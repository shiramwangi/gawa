{"ast":null,"code":"// API configuration for restaurant services\n\n// Google Places API configuration\nconst GOOGLE_PLACES_API_KEY = process.env.REACT_APP_GOOGLE_PLACES_API_KEY || 'YOUR_GOOGLE_PLACES_API_KEY';\nconst NAIROBI_COORDINATES = {\n  lat: -1.2921,\n  lng: 36.8219\n};\n\n// Yelp API configuration (alternative to Google Places)\nconst YELP_API_KEY = process.env.REACT_APP_YELP_API_KEY || 'YOUR_YELP_API_KEY';\n\n// Google Places API - Search for restaurants in Nairobi\nexport const searchRestaurantsGooglePlaces = async (query = 'restaurants', location = NAIROBI_COORDINATES) => {\n  try {\n    const response = await fetch(`https://maps.googleapis.com/maps/api/place/textsearch/json?query=${query}%20in%20Nairobi&location=${location.lat},${location.lng}&radius=50000&type=restaurant&key=${GOOGLE_PLACES_API_KEY}`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch restaurants from Google Places API');\n    }\n    const data = await response.json();\n    return data.results || [];\n  } catch (error) {\n    console.error('Google Places API Error:', error);\n    throw error;\n  }\n};\n\n// Google Places API - Get restaurant details including photos\nexport const getRestaurantDetails = async placeId => {\n  try {\n    const response = await fetch(`https://maps.googleapis.com/maps/api/place/details/json?place_id=${placeId}&fields=name,formatted_address,rating,price_level,photos,formatted_phone_number,website,opening_hours,reviews&key=${GOOGLE_PLACES_API_KEY}`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch restaurant details');\n    }\n    const data = await response.json();\n    return data.result;\n  } catch (error) {\n    console.error('Restaurant Details API Error:', error);\n    throw error;\n  }\n};\n\n// Yelp Fusion API - Alternative restaurant search\nexport const searchRestaurantsYelp = async (location = 'Nairobi, Kenya', term = 'restaurants') => {\n  try {\n    const response = await fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?location=${encodeURIComponent(location)}&term=${encodeURIComponent(term)}&limit=20`, {\n      headers: {\n        'Authorization': `Bearer ${YELP_API_KEY}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch restaurants from Yelp API');\n    }\n    const data = await response.json();\n    return data.businesses || [];\n  } catch (error) {\n    console.error('Yelp API Error:', error);\n    throw error;\n  }\n};\n\n// Foursquare Places API - Another alternative\nexport const searchRestaurantsFoursquare = async (query = 'restaurants', near = 'Nairobi, Kenya') => {\n  try {\n    const FOURSQUARE_API_KEY = process.env.REACT_APP_FOURSQUARE_API_KEY || 'YOUR_FOURSQUARE_API_KEY';\n    const response = await fetch(`https://api.foursquare.com/v3/places/search?query=${encodeURIComponent(query)}&near=${encodeURIComponent(near)}&categories=13065&limit=20`, {\n      headers: {\n        'Authorization': FOURSQUARE_API_KEY,\n        'Accept': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch restaurants from Foursquare API');\n    }\n    const data = await response.json();\n    return data.results || [];\n  } catch (error) {\n    console.error('Foursquare API Error:', error);\n    throw error;\n  }\n};\n\n// Transform Google Places data to our format\nexport const transformGooglePlacesData = places => {\n  return places.map(place => {\n    var _place$types, _place$photos, _place$photos$, _place$geometry, _place$opening_hours;\n    return {\n      id: place.place_id,\n      name: place.name,\n      location: place.formatted_address,\n      rating: place.rating || 0,\n      priceRange: place.price_level ? '$'.repeat(place.price_level) : 'N/A',\n      cuisine: ((_place$types = place.types) === null || _place$types === void 0 ? void 0 : _place$types.filter(type => ['restaurant', 'food', 'meal_takeaway', 'meal_delivery'].includes(type)).join(', ')) || 'Restaurant',\n      image: (_place$photos = place.photos) !== null && _place$photos !== void 0 && (_place$photos$ = _place$photos[0]) !== null && _place$photos$ !== void 0 && _place$photos$.photo_reference ? `https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&photoreference=${place.photos[0].photo_reference}&key=${GOOGLE_PLACES_API_KEY}` : 'https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=400&h=300&fit=crop',\n      placeId: place.place_id,\n      coordinates: (_place$geometry = place.geometry) === null || _place$geometry === void 0 ? void 0 : _place$geometry.location,\n      openNow: (_place$opening_hours = place.opening_hours) === null || _place$opening_hours === void 0 ? void 0 : _place$opening_hours.open_now,\n      userRatingsTotal: place.user_ratings_total || 0\n    };\n  });\n};\n\n// Transform Yelp data to our format\nexport const transformYelpData = businesses => {\n  return businesses.map(business => {\n    var _business$location, _business$location$di, _business$categories;\n    return {\n      id: business.id,\n      name: business.name,\n      location: ((_business$location = business.location) === null || _business$location === void 0 ? void 0 : (_business$location$di = _business$location.display_address) === null || _business$location$di === void 0 ? void 0 : _business$location$di.join(', ')) || 'Nairobi, Kenya',\n      rating: business.rating || 0,\n      priceRange: business.price || 'N/A',\n      cuisine: ((_business$categories = business.categories) === null || _business$categories === void 0 ? void 0 : _business$categories.map(cat => cat.title).join(', ')) || 'Restaurant',\n      image: business.image_url || 'https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=400&h=300&fit=crop',\n      coordinates: business.coordinates,\n      phone: business.phone,\n      url: business.url,\n      reviewCount: business.review_count || 0\n    };\n  });\n};\n\n// Get restaurant menu and food items (using Google Places or external menu APIs)\nexport const getRestaurantMenu = async (restaurantId, restaurantName) => {\n  try {\n    // For now, we'll use mock data based on restaurant type\n    // In production, you could integrate with:\n    // - Google Places API for menu photos\n    // - Zomato API for menu data\n    // - Restaurant's own API if available\n\n    const mockMenus = {\n      'Carnivore Restaurant': [{\n        name: \"Nyama Choma\",\n        price: \"KES 2,500\",\n        description: \"Grilled goat meat with ugali\",\n        category: \"Main Course\"\n      }, {\n        name: \"Beef Ribs\",\n        price: \"KES 3,200\",\n        description: \"Slow-cooked beef ribs\",\n        category: \"Main Course\"\n      }, {\n        name: \"Chicken Wings\",\n        price: \"KES 1,800\",\n        description: \"Spicy grilled wings\",\n        category: \"Appetizer\"\n      }, {\n        name: \"Ugali\",\n        price: \"KES 300\",\n        description: \"Traditional maize meal\",\n        category: \"Side Dish\"\n      }, {\n        name: \"Sukuma Wiki\",\n        price: \"KES 250\",\n        description: \"Collard greens\",\n        category: \"Side Dish\"\n      }],\n      'Java House': [{\n        name: \"Chicken Burger\",\n        price: \"KES 850\",\n        description: \"Grilled chicken with fries\",\n        category: \"Main Course\"\n      }, {\n        name: \"Cappuccino\",\n        price: \"KES 250\",\n        description: \"Freshly brewed coffee\",\n        category: \"Beverage\"\n      }, {\n        name: \"Caesar Salad\",\n        price: \"KES 650\",\n        description: \"Fresh greens with dressing\",\n        category: \"Salad\"\n      }, {\n        name: \"Flat White\",\n        price: \"KES 280\",\n        description: \"Smooth coffee with milk\",\n        category: \"Beverage\"\n      }, {\n        name: \"Chicken Pasta\",\n        price: \"KES 750\",\n        description: \"Creamy pasta with chicken\",\n        category: \"Main Course\"\n      }],\n      'Tamarind Restaurant': [{\n        name: \"Grilled Lobster\",\n        price: \"KES 4,500\",\n        description: \"Fresh lobster with garlic butter\",\n        category: \"Seafood\"\n      }, {\n        name: \"Fish Curry\",\n        price: \"KES 2,800\",\n        description: \"Spicy fish curry with rice\",\n        category: \"Main Course\"\n      }, {\n        name: \"Prawn Biryani\",\n        price: \"KES 3,200\",\n        description: \"Aromatic rice with prawns\",\n        category: \"Main Course\"\n      }, {\n        name: \"Coconut Rice\",\n        price: \"KES 450\",\n        description: \"Fragrant coconut rice\",\n        category: \"Side Dish\"\n      }, {\n        name: \"Mango Lassi\",\n        price: \"KES 350\",\n        description: \"Sweet mango yogurt drink\",\n        category: \"Beverage\"\n      }]\n    };\n\n    // Return mock menu if available, otherwise generic menu\n    if (mockMenus[restaurantName]) {\n      return mockMenus[restaurantName];\n    }\n\n    // Generic menu for unknown restaurants\n    return [{\n      name: \"Signature Dish\",\n      price: \"KES 1,500\",\n      description: \"Chef's special creation\",\n      category: \"Main Course\"\n    }, {\n      name: \"Local Special\",\n      price: \"KES 1,200\",\n      description: \"Traditional local cuisine\",\n      category: \"Main Course\"\n    }, {\n      name: \"Fresh Juice\",\n      price: \"KES 300\",\n      description: \"Seasonal fruit juice\",\n      category: \"Beverage\"\n    }];\n  } catch (error) {\n    console.error('Error fetching restaurant menu:', error);\n    return [];\n  }\n};\n\n// Main function to get restaurants with fallback options\nexport const getRestaurantsInNairobi = async (useMockData = false) => {\n  if (useMockData) {\n    // Return mock data for development/testing\n    return getMockRestaurants();\n  }\n  try {\n    // Try Google Places API first\n    if (GOOGLE_PLACES_API_KEY && GOOGLE_PLACES_API_KEY !== 'YOUR_GOOGLE_PLACES_API_KEY') {\n      const places = await searchRestaurantsGooglePlaces();\n      return transformGooglePlacesData(places);\n    }\n\n    // Fallback to Yelp API\n    if (YELP_API_KEY && YELP_API_KEY !== 'YOUR_YELP_API_KEY') {\n      const businesses = await searchRestaurantsYelp();\n      return transformYelpData(businesses);\n    }\n\n    // If no API keys available, return mock data\n    console.warn('No API keys configured. Using mock data.');\n    return getMockRestaurants();\n  } catch (error) {\n    console.error('Error fetching restaurants:', error);\n    // Fallback to mock data on error\n    return getMockRestaurants();\n  }\n};\n\n// Mock data fallback\nconst getMockRestaurants = () => [{\n  id: 1,\n  name: \"Carnivore Restaurant\",\n  location: \"Langata Road, Nairobi\",\n  rating: 4.5,\n  priceRange: \"$$$\",\n  cuisine: \"African, BBQ\",\n  image: \"https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=400&h=300&fit=crop\",\n  coordinates: {\n    lat: -1.2921,\n    lng: 36.8219\n  },\n  openNow: true,\n  userRatingsTotal: 1250\n}, {\n  id: 2,\n  name: \"Java House\",\n  location: \"Westlands, Nairobi\",\n  rating: 4.3,\n  priceRange: \"$$\",\n  cuisine: \"International, Coffee\",\n  image: \"https://images.unsplash.com/photo-1555396273-367ea4eb4db5?w=400&h=300&fit=crop\",\n  coordinates: {\n    lat: -1.2921,\n    lng: 36.8219\n  },\n  openNow: true,\n  userRatingsTotal: 890\n}, {\n  id: 3,\n  name: \"Tamarind Restaurant\",\n  location: \"Mombasa Road, Nairobi\",\n  rating: 4.7,\n  priceRange: \"$$$\",\n  cuisine: \"Seafood, International\",\n  image: \"https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=400&h=300&fit=crop\",\n  coordinates: {\n    lat: -1.2921,\n    lng: 36.8219\n  },\n  openNow: true,\n  userRatingsTotal: 567\n}, {\n  id: 4,\n  name: \"Artcaffe\",\n  location: \"CBD, Nairobi\",\n  rating: 4.2,\n  priceRange: \"$$\",\n  cuisine: \"Cafe, International\",\n  image: \"https://images.unsplash.com/photo-1554118811-1e0d58224f24?w=400&h=300&fit=crop\",\n  coordinates: {\n    lat: -1.2921,\n    lng: 36.8219\n  },\n  openNow: true,\n  userRatingsTotal: 432\n}, {\n  id: 5,\n  name: \"Nyama Mama\",\n  location: \"Kilimani, Nairobi\",\n  rating: 4.4,\n  priceRange: \"$$\",\n  cuisine: \"African, Fusion\",\n  image: \"https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=400&h=300&fit=crop\",\n  coordinates: {\n    lat: -1.2921,\n    lng: 36.8219\n  },\n  openNow: true,\n  userRatingsTotal: 678\n}];\nconst restaurantAPI = {\n  getRestaurantsInNairobi,\n  getRestaurantDetails,\n  getRestaurantMenu,\n  searchRestaurantsGooglePlaces,\n  searchRestaurantsYelp,\n  searchRestaurantsFoursquare\n};\nexport default restaurantAPI;","map":{"version":3,"names":["GOOGLE_PLACES_API_KEY","process","env","REACT_APP_GOOGLE_PLACES_API_KEY","NAIROBI_COORDINATES","lat","lng","YELP_API_KEY","REACT_APP_YELP_API_KEY","searchRestaurantsGooglePlaces","query","location","response","fetch","ok","Error","data","json","results","error","console","getRestaurantDetails","placeId","result","searchRestaurantsYelp","term","encodeURIComponent","headers","businesses","searchRestaurantsFoursquare","near","FOURSQUARE_API_KEY","REACT_APP_FOURSQUARE_API_KEY","transformGooglePlacesData","places","map","place","_place$types","_place$photos","_place$photos$","_place$geometry","_place$opening_hours","id","place_id","name","formatted_address","rating","priceRange","price_level","repeat","cuisine","types","filter","type","includes","join","image","photos","photo_reference","coordinates","geometry","openNow","opening_hours","open_now","userRatingsTotal","user_ratings_total","transformYelpData","business","_business$location","_business$location$di","_business$categories","display_address","price","categories","cat","title","image_url","phone","url","reviewCount","review_count","getRestaurantMenu","restaurantId","restaurantName","mockMenus","description","category","getRestaurantsInNairobi","useMockData","getMockRestaurants","warn","restaurantAPI"],"sources":["C:/Projects/gawa/frontend/src/api/restaurants.js"],"sourcesContent":["// API configuration for restaurant services\r\n\r\n// Google Places API configuration\r\nconst GOOGLE_PLACES_API_KEY = process.env.REACT_APP_GOOGLE_PLACES_API_KEY || 'YOUR_GOOGLE_PLACES_API_KEY';\r\nconst NAIROBI_COORDINATES = { lat: -1.2921, lng: 36.8219 };\r\n\r\n// Yelp API configuration (alternative to Google Places)\r\nconst YELP_API_KEY = process.env.REACT_APP_YELP_API_KEY || 'YOUR_YELP_API_KEY';\r\n\r\n// Google Places API - Search for restaurants in Nairobi\r\nexport const searchRestaurantsGooglePlaces = async (query = 'restaurants', location = NAIROBI_COORDINATES) => {\r\n  try {\r\n    const response = await fetch(\r\n      `https://maps.googleapis.com/maps/api/place/textsearch/json?query=${query}%20in%20Nairobi&location=${location.lat},${location.lng}&radius=50000&type=restaurant&key=${GOOGLE_PLACES_API_KEY}`\r\n    );\r\n    \r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch restaurants from Google Places API');\r\n    }\r\n    \r\n    const data = await response.json();\r\n    return data.results || [];\r\n  } catch (error) {\r\n    console.error('Google Places API Error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Google Places API - Get restaurant details including photos\r\nexport const getRestaurantDetails = async (placeId) => {\r\n  try {\r\n    const response = await fetch(\r\n      `https://maps.googleapis.com/maps/api/place/details/json?place_id=${placeId}&fields=name,formatted_address,rating,price_level,photos,formatted_phone_number,website,opening_hours,reviews&key=${GOOGLE_PLACES_API_KEY}`\r\n    );\r\n    \r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch restaurant details');\r\n    }\r\n    \r\n    const data = await response.json();\r\n    return data.result;\r\n  } catch (error) {\r\n    console.error('Restaurant Details API Error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Yelp Fusion API - Alternative restaurant search\r\nexport const searchRestaurantsYelp = async (location = 'Nairobi, Kenya', term = 'restaurants') => {\r\n  try {\r\n    const response = await fetch(\r\n      `https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?location=${encodeURIComponent(location)}&term=${encodeURIComponent(term)}&limit=20`,\r\n      {\r\n        headers: {\r\n          'Authorization': `Bearer ${YELP_API_KEY}`,\r\n          'Content-Type': 'application/json',\r\n        },\r\n      }\r\n    );\r\n    \r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch restaurants from Yelp API');\r\n    }\r\n    \r\n    const data = await response.json();\r\n    return data.businesses || [];\r\n  } catch (error) {\r\n    console.error('Yelp API Error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Foursquare Places API - Another alternative\r\nexport const searchRestaurantsFoursquare = async (query = 'restaurants', near = 'Nairobi, Kenya') => {\r\n  try {\r\n    const FOURSQUARE_API_KEY = process.env.REACT_APP_FOURSQUARE_API_KEY || 'YOUR_FOURSQUARE_API_KEY';\r\n    \r\n    const response = await fetch(\r\n      `https://api.foursquare.com/v3/places/search?query=${encodeURIComponent(query)}&near=${encodeURIComponent(near)}&categories=13065&limit=20`,\r\n      {\r\n        headers: {\r\n          'Authorization': FOURSQUARE_API_KEY,\r\n          'Accept': 'application/json',\r\n        },\r\n      }\r\n    );\r\n    \r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch restaurants from Foursquare API');\r\n    }\r\n    \r\n    const data = await response.json();\r\n    return data.results || [];\r\n  } catch (error) {\r\n    console.error('Foursquare API Error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Transform Google Places data to our format\r\nexport const transformGooglePlacesData = (places) => {\r\n  return places.map(place => ({\r\n    id: place.place_id,\r\n    name: place.name,\r\n    location: place.formatted_address,\r\n    rating: place.rating || 0,\r\n    priceRange: place.price_level ? '$'.repeat(place.price_level) : 'N/A',\r\n    cuisine: place.types?.filter(type => \r\n      ['restaurant', 'food', 'meal_takeaway', 'meal_delivery'].includes(type)\r\n    ).join(', ') || 'Restaurant',\r\n    image: place.photos?.[0]?.photo_reference \r\n      ? `https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&photoreference=${place.photos[0].photo_reference}&key=${GOOGLE_PLACES_API_KEY}`\r\n      : 'https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=400&h=300&fit=crop',\r\n    placeId: place.place_id,\r\n    coordinates: place.geometry?.location,\r\n    openNow: place.opening_hours?.open_now,\r\n    userRatingsTotal: place.user_ratings_total || 0\r\n  }));\r\n};\r\n\r\n// Transform Yelp data to our format\r\nexport const transformYelpData = (businesses) => {\r\n  return businesses.map(business => ({\r\n    id: business.id,\r\n    name: business.name,\r\n    location: business.location?.display_address?.join(', ') || 'Nairobi, Kenya',\r\n    rating: business.rating || 0,\r\n    priceRange: business.price || 'N/A',\r\n    cuisine: business.categories?.map(cat => cat.title).join(', ') || 'Restaurant',\r\n    image: business.image_url || 'https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=400&h=300&fit=crop',\r\n    coordinates: business.coordinates,\r\n    phone: business.phone,\r\n    url: business.url,\r\n    reviewCount: business.review_count || 0\r\n  }));\r\n};\r\n\r\n// Get restaurant menu and food items (using Google Places or external menu APIs)\r\nexport const getRestaurantMenu = async (restaurantId, restaurantName) => {\r\n  try {\r\n    // For now, we'll use mock data based on restaurant type\r\n    // In production, you could integrate with:\r\n    // - Google Places API for menu photos\r\n    // - Zomato API for menu data\r\n    // - Restaurant's own API if available\r\n    \r\n    const mockMenus = {\r\n      'Carnivore Restaurant': [\r\n        { name: \"Nyama Choma\", price: \"KES 2,500\", description: \"Grilled goat meat with ugali\", category: \"Main Course\" },\r\n        { name: \"Beef Ribs\", price: \"KES 3,200\", description: \"Slow-cooked beef ribs\", category: \"Main Course\" },\r\n        { name: \"Chicken Wings\", price: \"KES 1,800\", description: \"Spicy grilled wings\", category: \"Appetizer\" },\r\n        { name: \"Ugali\", price: \"KES 300\", description: \"Traditional maize meal\", category: \"Side Dish\" },\r\n        { name: \"Sukuma Wiki\", price: \"KES 250\", description: \"Collard greens\", category: \"Side Dish\" }\r\n      ],\r\n      'Java House': [\r\n        { name: \"Chicken Burger\", price: \"KES 850\", description: \"Grilled chicken with fries\", category: \"Main Course\" },\r\n        { name: \"Cappuccino\", price: \"KES 250\", description: \"Freshly brewed coffee\", category: \"Beverage\" },\r\n        { name: \"Caesar Salad\", price: \"KES 650\", description: \"Fresh greens with dressing\", category: \"Salad\" },\r\n        { name: \"Flat White\", price: \"KES 280\", description: \"Smooth coffee with milk\", category: \"Beverage\" },\r\n        { name: \"Chicken Pasta\", price: \"KES 750\", description: \"Creamy pasta with chicken\", category: \"Main Course\" }\r\n      ],\r\n      'Tamarind Restaurant': [\r\n        { name: \"Grilled Lobster\", price: \"KES 4,500\", description: \"Fresh lobster with garlic butter\", category: \"Seafood\" },\r\n        { name: \"Fish Curry\", price: \"KES 2,800\", description: \"Spicy fish curry with rice\", category: \"Main Course\" },\r\n        { name: \"Prawn Biryani\", price: \"KES 3,200\", description: \"Aromatic rice with prawns\", category: \"Main Course\" },\r\n        { name: \"Coconut Rice\", price: \"KES 450\", description: \"Fragrant coconut rice\", category: \"Side Dish\" },\r\n        { name: \"Mango Lassi\", price: \"KES 350\", description: \"Sweet mango yogurt drink\", category: \"Beverage\" }\r\n      ]\r\n    };\r\n    \r\n    // Return mock menu if available, otherwise generic menu\r\n    if (mockMenus[restaurantName]) {\r\n      return mockMenus[restaurantName];\r\n    }\r\n    \r\n    // Generic menu for unknown restaurants\r\n    return [\r\n      { name: \"Signature Dish\", price: \"KES 1,500\", description: \"Chef's special creation\", category: \"Main Course\" },\r\n      { name: \"Local Special\", price: \"KES 1,200\", description: \"Traditional local cuisine\", category: \"Main Course\" },\r\n      { name: \"Fresh Juice\", price: \"KES 300\", description: \"Seasonal fruit juice\", category: \"Beverage\" }\r\n    ];\r\n  } catch (error) {\r\n    console.error('Error fetching restaurant menu:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Main function to get restaurants with fallback options\r\nexport const getRestaurantsInNairobi = async (useMockData = false) => {\r\n  if (useMockData) {\r\n    // Return mock data for development/testing\r\n    return getMockRestaurants();\r\n  }\r\n  \r\n  try {\r\n    // Try Google Places API first\r\n    if (GOOGLE_PLACES_API_KEY && GOOGLE_PLACES_API_KEY !== 'YOUR_GOOGLE_PLACES_API_KEY') {\r\n      const places = await searchRestaurantsGooglePlaces();\r\n      return transformGooglePlacesData(places);\r\n    }\r\n    \r\n    // Fallback to Yelp API\r\n    if (YELP_API_KEY && YELP_API_KEY !== 'YOUR_YELP_API_KEY') {\r\n      const businesses = await searchRestaurantsYelp();\r\n      return transformYelpData(businesses);\r\n    }\r\n    \r\n    // If no API keys available, return mock data\r\n    console.warn('No API keys configured. Using mock data.');\r\n    return getMockRestaurants();\r\n    \r\n  } catch (error) {\r\n    console.error('Error fetching restaurants:', error);\r\n    // Fallback to mock data on error\r\n    return getMockRestaurants();\r\n  }\r\n};\r\n\r\n// Mock data fallback\r\nconst getMockRestaurants = () => [\r\n  {\r\n    id: 1,\r\n    name: \"Carnivore Restaurant\",\r\n    location: \"Langata Road, Nairobi\",\r\n    rating: 4.5,\r\n    priceRange: \"$$$\",\r\n    cuisine: \"African, BBQ\",\r\n    image: \"https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=400&h=300&fit=crop\",\r\n    coordinates: { lat: -1.2921, lng: 36.8219 },\r\n    openNow: true,\r\n    userRatingsTotal: 1250\r\n  },\r\n  {\r\n    id: 2,\r\n    name: \"Java House\",\r\n    location: \"Westlands, Nairobi\",\r\n    rating: 4.3,\r\n    priceRange: \"$$\",\r\n    cuisine: \"International, Coffee\",\r\n    image: \"https://images.unsplash.com/photo-1555396273-367ea4eb4db5?w=400&h=300&fit=crop\",\r\n    coordinates: { lat: -1.2921, lng: 36.8219 },\r\n    openNow: true,\r\n    userRatingsTotal: 890\r\n  },\r\n  {\r\n    id: 3,\r\n    name: \"Tamarind Restaurant\",\r\n    location: \"Mombasa Road, Nairobi\",\r\n    rating: 4.7,\r\n    priceRange: \"$$$\",\r\n    cuisine: \"Seafood, International\",\r\n    image: \"https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=400&h=300&fit=crop\",\r\n    coordinates: { lat: -1.2921, lng: 36.8219 },\r\n    openNow: true,\r\n    userRatingsTotal: 567\r\n  },\r\n  {\r\n    id: 4,\r\n    name: \"Artcaffe\",\r\n    location: \"CBD, Nairobi\",\r\n    rating: 4.2,\r\n    priceRange: \"$$\",\r\n    cuisine: \"Cafe, International\",\r\n    image: \"https://images.unsplash.com/photo-1554118811-1e0d58224f24?w=400&h=300&fit=crop\",\r\n    coordinates: { lat: -1.2921, lng: 36.8219 },\r\n    openNow: true,\r\n    userRatingsTotal: 432\r\n  },\r\n  {\r\n    id: 5,\r\n    name: \"Nyama Mama\",\r\n    location: \"Kilimani, Nairobi\",\r\n    rating: 4.4,\r\n    priceRange: \"$$\",\r\n    cuisine: \"African, Fusion\",\r\n    image: \"https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=400&h=300&fit=crop\",\r\n    coordinates: { lat: -1.2921, lng: 36.8219 },\r\n    openNow: true,\r\n    userRatingsTotal: 678\r\n  }\r\n];\r\n\r\nconst restaurantAPI = {\r\n  getRestaurantsInNairobi,\r\n  getRestaurantDetails,\r\n  getRestaurantMenu,\r\n  searchRestaurantsGooglePlaces,\r\n  searchRestaurantsYelp,\r\n  searchRestaurantsFoursquare\r\n};\r\n\r\nexport default restaurantAPI;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}