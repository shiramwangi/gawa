{"ast":null,"code":"// Java House API Service\nclass JavaHouseAPI {\n  constructor() {\n    this.baseURL = 'https://api.sampleapis.com';\n    this.themealdbURL = 'https://www.themealdb.com/api/json/v1/1';\n  }\n\n  // Get real coffee menu from Sample APIs\n  async getRealCoffeeMenu() {\n    try {\n      console.log('‚òï Fetching real coffee data from Sample APIs...');\n      const response = await fetch(`${this.baseURL}/coffee/hot`);\n      if (!response.ok) {\n        throw new Error(`Coffee API request failed: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('‚úÖ Coffee API response:', data);\n      if (!data || !Array.isArray(data)) {\n        console.warn('‚ö†Ô∏è Coffee API returned invalid data structure');\n        return null;\n      }\n\n      // Transform coffee data to menu items\n      const transformedCoffee = data.map((coffee, index) => ({\n        id: coffee.id || `coffee-${index}`,\n        name: coffee.title,\n        description: coffee.description,\n        price: this.generateCoffeePrice(),\n        category: 'Coffee',\n        image: coffee.image,\n        ingredients: coffee.ingredients || [],\n        customization: this.getCoffeeCustomization(),\n        isAvailable: true,\n        preparationTime: '5-8 minutes',\n        allergens: ['Milk', 'Nuts'],\n        nutritionalInfo: {\n          calories: Math.floor(Math.random() * 200) + 50,\n          protein: Math.floor(Math.random() * 8) + 2,\n          carbs: Math.floor(Math.random() * 30) + 10,\n          fat: Math.floor(Math.random() * 15) + 5\n        }\n      }));\n      return transformedCoffee;\n    } catch (error) {\n      console.error('‚ùå Error fetching real coffee data:', error);\n      return null;\n    }\n  }\n\n  // Get real dessert menu from TheMealDB\n  async getRealDessertMenu() {\n    try {\n      console.log('üç∞ Fetching real dessert data from TheMealDB...');\n      const response = await fetch(`${this.themealdbURL}/filter.php?c=Dessert`);\n      if (!response.ok) {\n        throw new Error(`Dessert API request failed: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('‚úÖ Dessert API response:', data);\n      if (!data || !data.meals || !Array.isArray(data.meals)) {\n        console.warn('‚ö†Ô∏è Dessert API returned invalid data structure');\n        return null;\n      }\n\n      // Transform dessert data to menu items\n      const transformedDesserts = data.meals.map((dessert, index) => ({\n        id: dessert.idMeal || `dessert-${index}`,\n        name: dessert.strMeal,\n        description: `Delicious ${dessert.strMeal} - a perfect sweet treat to complement your coffee`,\n        price: this.generateDessertPrice(),\n        category: 'Desserts',\n        image: dessert.strMealThumb,\n        ingredients: [],\n        customization: this.getDessertCustomization(),\n        isAvailable: true,\n        preparationTime: '10-15 minutes',\n        allergens: ['Gluten', 'Dairy', 'Eggs'],\n        nutritionalInfo: {\n          calories: Math.floor(Math.random() * 300) + 150,\n          protein: Math.floor(Math.random() * 10) + 3,\n          carbs: Math.floor(Math.random() * 50) + 20,\n          fat: Math.floor(Math.random() * 20) + 8\n        }\n      }));\n      return transformedDesserts;\n    } catch (error) {\n      console.error('‚ùå Error fetching real dessert data:', error);\n      return null;\n    }\n  }\n\n  // Test API endpoints to verify they're working\n  async testAPIEndpoints() {\n    console.log('üß™ Testing Java House API endpoints...');\n    try {\n      // Test coffee API\n      const coffeeResponse = await fetch(`${this.baseURL}/coffee/hot`);\n      console.log('‚òï Coffee API status:', coffeeResponse.status);\n      if (coffeeResponse.ok) {\n        const coffeeData = await coffeeResponse.json();\n        console.log('‚òï Coffee API data sample:', coffeeData === null || coffeeData === void 0 ? void 0 : coffeeData[0]);\n      }\n\n      // Test dessert API\n      const dessertResponse = await fetch(`${this.themealdbURL}/filter.php?c=Dessert`);\n      console.log('üç∞ Dessert API status:', dessertResponse.status);\n      if (dessertResponse.ok) {\n        var _dessertData$meals;\n        const dessertData = await dessertResponse.json();\n        console.log('üç∞ Dessert API data sample:', dessertData === null || dessertData === void 0 ? void 0 : (_dessertData$meals = dessertData.meals) === null || _dessertData$meals === void 0 ? void 0 : _dessertData$meals[0]);\n      }\n    } catch (error) {\n      console.error('‚ùå API testing failed:', error);\n    }\n  }\n\n  // Get full menu combining real APIs with mock data for other categories\n  async getFullMenu() {\n    try {\n      console.log('üè™ Fetching Java House full menu...');\n\n      // Test APIs first\n      await this.testAPIEndpoints();\n\n      // Fetch real data from APIs\n      const [coffeeData, dessertData] = await Promise.all([this.getRealCoffeeMenu(), this.getRealDessertMenu()]);\n      console.log('‚òï Coffee data received:', coffeeData);\n      console.log('üç∞ Dessert data received:', dessertData);\n\n      // Get mock data for other categories\n      const mockSides = this.getMockSides();\n      const mockBeverages = this.getMockBeverages();\n      const mockBreakfast = this.getMockBreakfast();\n      const mockLunch = this.getMockLunch();\n\n      // Combine all data with validation\n      const allMenuItems = [...(coffeeData || []), ...(dessertData || []), ...mockSides, ...mockBeverages, ...mockBreakfast, ...mockLunch];\n\n      // Validate each menu item\n      const validatedMenuItems = allMenuItems.filter(item => {\n        if (!item || !item.name || !item.description) {\n          console.warn('‚ö†Ô∏è Invalid menu item found:', item);\n          return false;\n        }\n        return true;\n      });\n      console.log('‚úÖ Validated menu items:', validatedMenuItems.length);\n      console.log('‚úÖ Sample validated item:', validatedMenuItems[0]);\n      const menuData = {\n        restaurant: {\n          name: 'Java House',\n          location: 'Westlands, Nairobi',\n          phone: '+254 20 123 4567',\n          website: 'https://javahouse.co.ke',\n          rating: 4.6,\n          priceRange: '$$',\n          cuisine: 'Coffee & International',\n          hours: '6:00 AM - 11:00 PM',\n          delivery: true,\n          pickup: true,\n          dineIn: true\n        },\n        menu: validatedMenuItems,\n        categories: this.getCategories(validatedMenuItems),\n        promotions: this.getPromotions(),\n        deals: this.getDeals(),\n        rewards: this.getRewards(),\n        customization: this.getCustomization(),\n        locations: this.getLocations()\n      };\n      console.log('‚úÖ Java House menu data prepared:', menuData);\n      return menuData;\n    } catch (error) {\n      console.error('‚ùå Error preparing Java House menu:', error);\n      // Return mock data as fallback\n      return this.getMockMenu();\n    }\n  }\n\n  // Helper methods for pricing\n  generateCoffeePrice() {\n    const basePrice = 180;\n    const variation = Math.floor(Math.random() * 60) - 30;\n    return Math.max(150, basePrice + variation);\n  }\n  generateDessertPrice() {\n    const basePrice = 250;\n    const variation = Math.floor(Math.random() * 80) - 40;\n    return Math.max(200, basePrice + variation);\n  }\n\n  // Helper methods for customization\n  getCoffeeCustomization() {\n    return {\n      available: true,\n      options: {\n        size: ['Small', 'Medium', 'Large'],\n        milk: ['Full Cream', 'Skim', 'Almond', 'Soy', 'Oat'],\n        sugar: ['None', 'Less', 'Normal', 'Extra'],\n        extras: ['Extra Shot', 'Whipped Cream', 'Caramel', 'Vanilla']\n      }\n    };\n  }\n  getDessertCustomization() {\n    return {\n      available: true,\n      options: {\n        size: ['Regular', 'Large'],\n        extras: ['Ice Cream', 'Whipped Cream', 'Nuts', 'Chocolate Sauce'],\n        dietary: ['Gluten-Free', 'Dairy-Free', 'Vegan']\n      }\n    };\n  }\n\n  // Mock data for other categories\n  getMockSides() {\n    return [{\n      id: 'side-1',\n      name: 'Croissant',\n      description: 'Buttery, flaky French croissant served warm',\n      price: 120,\n      category: 'Sides',\n      image: 'https://images.unsplash.com/photo-1555507036-ab1f4038802a?w=400',\n      customization: {\n        available: false\n      },\n      isAvailable: true,\n      preparationTime: '2-3 minutes',\n      allergens: ['Gluten', 'Dairy'],\n      nutritionalInfo: {\n        calories: 180,\n        protein: 4,\n        carbs: 20,\n        fat: 10\n      }\n    }, {\n      id: 'side-2',\n      name: 'Muffin',\n      description: 'Freshly baked muffin with your choice of flavor',\n      price: 100,\n      category: 'Sides',\n      image: 'https://images.unsplash.com/photo-1556909114-f6e7ad7d3136?w=400',\n      customization: {\n        available: false\n      },\n      isAvailable: true,\n      preparationTime: '2-3 minutes',\n      allergens: ['Gluten', 'Dairy', 'Eggs'],\n      nutritionalInfo: {\n        calories: 220,\n        protein: 5,\n        carbs: 28,\n        fat: 12\n      }\n    }];\n  }\n  getMockBeverages() {\n    return [{\n      id: 'beverage-1',\n      name: 'Fresh Orange Juice',\n      description: '100% natural orange juice, freshly squeezed',\n      price: 150,\n      category: 'Beverages',\n      image: 'https://images.unsplash.com/photo-1621506289937-a8e4df240d0b?w=400',\n      customization: {\n        available: false\n      },\n      isAvailable: true,\n      preparationTime: '3-5 minutes',\n      allergens: [],\n      nutritionalInfo: {\n        calories: 110,\n        protein: 2,\n        carbs: 26,\n        fat: 0\n      }\n    }, {\n      id: 'beverage-2',\n      name: 'Iced Tea',\n      description: 'Refreshing iced tea with lemon',\n      price: 120,\n      category: 'Beverages',\n      image: 'https://images.unsplash.com/photo-1556679343-c7306c1976bc?w=400',\n      customization: {\n        available: false\n      },\n      isAvailable: true,\n      preparationTime: '2-3 minutes',\n      allergens: [],\n      nutritionalInfo: {\n        calories: 80,\n        protein: 0,\n        carbs: 20,\n        fat: 0\n      }\n    }];\n  }\n  getMockBreakfast() {\n    return [{\n      id: 'breakfast-1',\n      name: 'Full English Breakfast',\n      description: 'Eggs, bacon, sausage, beans, mushrooms, and toast',\n      price: 450,\n      category: 'Breakfast',\n      image: 'https://images.unsplash.com/photo-1551782450-a2132b4ba21d?w=400',\n      customization: {\n        available: false\n      },\n      isAvailable: true,\n      preparationTime: '15-20 minutes',\n      allergens: ['Gluten', 'Dairy', 'Eggs'],\n      nutritionalInfo: {\n        calories: 650,\n        protein: 25,\n        carbs: 35,\n        fat: 45\n      }\n    }];\n  }\n  getMockLunch() {\n    return [{\n      id: 'lunch-1',\n      name: 'Caesar Salad',\n      description: 'Fresh romaine lettuce, parmesan cheese, croutons with caesar dressing',\n      price: 380,\n      category: 'Lunch',\n      image: 'https://images.unsplash.com/photo-1546793665-c74683f339c1?w=400',\n      customization: {\n        available: false\n      },\n      isAvailable: true,\n      preparationTime: '8-12 minutes',\n      allergens: ['Gluten', 'Dairy', 'Eggs'],\n      nutritionalInfo: {\n        calories: 320,\n        protein: 18,\n        carbs: 15,\n        fat: 25\n      }\n    }];\n  }\n\n  // Helper methods for other data\n  getCategories(allMenuItems) {\n    const categories = ['all'];\n    allMenuItems.forEach(item => {\n      if (!categories.includes(item.category)) {\n        categories.push(item.category);\n      }\n    });\n    return categories;\n  }\n  getPromotions() {\n    return ['Buy 2 coffees, get 1 free', '20% off all desserts after 8 PM', 'Student discount: 15% off with valid ID'];\n  }\n  getDeals() {\n    return ['Happy Hour: 2-for-1 on all beverages (3-5 PM)', 'Weekend Special: Free pastry with any coffee purchase', 'Lunch Combo: Coffee + Sandwich + Dessert for KES 650'];\n  }\n  getRewards() {\n    return {\n      program: 'Java Rewards',\n      available: true,\n      benefits: ['Earn 1 point per KES 10 spent', 'Free coffee after 10 points', 'Birthday month: 50% off any item', 'Exclusive member-only promotions']\n    };\n  }\n  getCustomization() {\n    return {\n      available: true,\n      options: {\n        coffee: ['Size', 'Milk type', 'Sugar level', 'Extra shots'],\n        food: ['Portion size', 'Cooking preference', 'Sauce options'],\n        dietary: ['Gluten-free', 'Dairy-free', 'Vegan', 'Halal']\n      }\n    };\n  }\n  getLocations() {\n    return ['Westlands, Nairobi', 'Kilimani, Nairobi', 'Lavington, Nairobi', 'Karen, Nairobi', 'Mombasa Road, Nairobi'];\n  }\n\n  // Fallback mock menu\n  getMockMenu() {\n    return {\n      restaurant: {\n        name: 'Java House',\n        location: 'Westlands, Nairobi',\n        phone: '+254 20 123 4567',\n        website: 'https://javahouse.co.ke',\n        rating: 4.6,\n        priceRange: '$$',\n        cuisine: 'Coffee & International',\n        hours: '6:00 AM - 11:00 PM',\n        delivery: true,\n        pickup: true,\n        dineIn: true\n      },\n      menu: [{\n        id: 'mock-1',\n        name: 'Cappuccino',\n        description: 'Classic Italian coffee with steamed milk foam',\n        price: 180,\n        category: 'Coffee',\n        image: 'https://images.unsplash.com/photo-1509042239860-f550ce710b93?w=400',\n        customization: {\n          available: true\n        },\n        isAvailable: true,\n        preparationTime: '5-8 minutes',\n        allergens: ['Milk'],\n        nutritionalInfo: {\n          calories: 120,\n          protein: 6,\n          carbs: 12,\n          fat: 6\n        }\n      }],\n      categories: ['all', 'Coffee'],\n      promotions: ['Buy 2 coffees, get 1 free'],\n      deals: ['Happy Hour: 2-for-1 on all beverages (3-5 PM)'],\n      rewards: {\n        program: 'Java Rewards',\n        available: true,\n        benefits: ['Earn points on every purchase']\n      },\n      customization: {\n        available: true,\n        options: {\n          coffee: ['Size', 'Milk type']\n        }\n      },\n      locations: ['Westlands, Nairobi']\n    };\n  }\n}\nconst javaHouseAPI = new JavaHouseAPI();\nexport default javaHouseAPI;","map":{"version":3,"names":["JavaHouseAPI","constructor","baseURL","themealdbURL","getRealCoffeeMenu","console","log","response","fetch","ok","Error","status","data","json","Array","isArray","warn","transformedCoffee","map","coffee","index","id","name","title","description","price","generateCoffeePrice","category","image","ingredients","customization","getCoffeeCustomization","isAvailable","preparationTime","allergens","nutritionalInfo","calories","Math","floor","random","protein","carbs","fat","error","getRealDessertMenu","meals","transformedDesserts","dessert","idMeal","strMeal","generateDessertPrice","strMealThumb","getDessertCustomization","testAPIEndpoints","coffeeResponse","coffeeData","dessertResponse","_dessertData$meals","dessertData","getFullMenu","Promise","all","mockSides","getMockSides","mockBeverages","getMockBeverages","mockBreakfast","getMockBreakfast","mockLunch","getMockLunch","allMenuItems","validatedMenuItems","filter","item","length","menuData","restaurant","location","phone","website","rating","priceRange","cuisine","hours","delivery","pickup","dineIn","menu","categories","getCategories","promotions","getPromotions","deals","getDeals","rewards","getRewards","getCustomization","locations","getLocations","getMockMenu","basePrice","variation","max","available","options","size","milk","sugar","extras","dietary","forEach","includes","push","program","benefits","food","javaHouseAPI"],"sources":["C:/Projects/gawa/frontend/src/api/javaHouseAPI.js"],"sourcesContent":["// Java House API Service\r\nclass JavaHouseAPI {\r\n  constructor() {\r\n    this.baseURL = 'https://api.sampleapis.com';\r\n    this.themealdbURL = 'https://www.themealdb.com/api/json/v1/1';\r\n  }\r\n\r\n  // Get real coffee menu from Sample APIs\r\n  async getRealCoffeeMenu() {\r\n    try {\r\n      console.log('‚òï Fetching real coffee data from Sample APIs...');\r\n      const response = await fetch(`${this.baseURL}/coffee/hot`);\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`Coffee API request failed: ${response.status}`);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      console.log('‚úÖ Coffee API response:', data);\r\n      \r\n      if (!data || !Array.isArray(data)) {\r\n        console.warn('‚ö†Ô∏è Coffee API returned invalid data structure');\r\n        return null;\r\n      }\r\n\r\n      // Transform coffee data to menu items\r\n      const transformedCoffee = data.map((coffee, index) => ({\r\n        id: coffee.id || `coffee-${index}`,\r\n        name: coffee.title,\r\n        description: coffee.description,\r\n        price: this.generateCoffeePrice(),\r\n        category: 'Coffee',\r\n        image: coffee.image,\r\n        ingredients: coffee.ingredients || [],\r\n        customization: this.getCoffeeCustomization(),\r\n        isAvailable: true,\r\n        preparationTime: '5-8 minutes',\r\n        allergens: ['Milk', 'Nuts'],\r\n        nutritionalInfo: {\r\n          calories: Math.floor(Math.random() * 200) + 50,\r\n          protein: Math.floor(Math.random() * 8) + 2,\r\n          carbs: Math.floor(Math.random() * 30) + 10,\r\n          fat: Math.floor(Math.random() * 15) + 5\r\n        }\r\n      }));\r\n\r\n      return transformedCoffee;\r\n    } catch (error) {\r\n      console.error('‚ùå Error fetching real coffee data:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // Get real dessert menu from TheMealDB\r\n  async getRealDessertMenu() {\r\n    try {\r\n      console.log('üç∞ Fetching real dessert data from TheMealDB...');\r\n      const response = await fetch(`${this.themealdbURL}/filter.php?c=Dessert`);\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`Dessert API request failed: ${response.status}`);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      console.log('‚úÖ Dessert API response:', data);\r\n      \r\n      if (!data || !data.meals || !Array.isArray(data.meals)) {\r\n        console.warn('‚ö†Ô∏è Dessert API returned invalid data structure');\r\n        return null;\r\n      }\r\n\r\n      // Transform dessert data to menu items\r\n      const transformedDesserts = data.meals.map((dessert, index) => ({\r\n        id: dessert.idMeal || `dessert-${index}`,\r\n        name: dessert.strMeal,\r\n        description: `Delicious ${dessert.strMeal} - a perfect sweet treat to complement your coffee`,\r\n        price: this.generateDessertPrice(),\r\n        category: 'Desserts',\r\n        image: dessert.strMealThumb,\r\n        ingredients: [],\r\n        customization: this.getDessertCustomization(),\r\n        isAvailable: true,\r\n        preparationTime: '10-15 minutes',\r\n        allergens: ['Gluten', 'Dairy', 'Eggs'],\r\n        nutritionalInfo: {\r\n          calories: Math.floor(Math.random() * 300) + 150,\r\n          protein: Math.floor(Math.random() * 10) + 3,\r\n          carbs: Math.floor(Math.random() * 50) + 20,\r\n          fat: Math.floor(Math.random() * 20) + 8\r\n        }\r\n      }));\r\n\r\n      return transformedDesserts;\r\n    } catch (error) {\r\n      console.error('‚ùå Error fetching real dessert data:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // Test API endpoints to verify they're working\r\n  async testAPIEndpoints() {\r\n    console.log('üß™ Testing Java House API endpoints...');\r\n    \r\n    try {\r\n      // Test coffee API\r\n      const coffeeResponse = await fetch(`${this.baseURL}/coffee/hot`);\r\n      console.log('‚òï Coffee API status:', coffeeResponse.status);\r\n      if (coffeeResponse.ok) {\r\n        const coffeeData = await coffeeResponse.json();\r\n        console.log('‚òï Coffee API data sample:', coffeeData?.[0]);\r\n      }\r\n      \r\n      // Test dessert API\r\n      const dessertResponse = await fetch(`${this.themealdbURL}/filter.php?c=Dessert`);\r\n      console.log('üç∞ Dessert API status:', dessertResponse.status);\r\n      if (dessertResponse.ok) {\r\n        const dessertData = await dessertResponse.json();\r\n        console.log('üç∞ Dessert API data sample:', dessertData?.meals?.[0]);\r\n      }\r\n    } catch (error) {\r\n      console.error('‚ùå API testing failed:', error);\r\n    }\r\n  }\r\n\r\n  // Get full menu combining real APIs with mock data for other categories\r\n  async getFullMenu() {\r\n    try {\r\n      console.log('üè™ Fetching Java House full menu...');\r\n      \r\n      // Test APIs first\r\n      await this.testAPIEndpoints();\r\n      \r\n      // Fetch real data from APIs\r\n      const [coffeeData, dessertData] = await Promise.all([\r\n        this.getRealCoffeeMenu(),\r\n        this.getRealDessertMenu()\r\n      ]);\r\n\r\n      console.log('‚òï Coffee data received:', coffeeData);\r\n      console.log('üç∞ Dessert data received:', dessertData);\r\n\r\n      // Get mock data for other categories\r\n      const mockSides = this.getMockSides();\r\n      const mockBeverages = this.getMockBeverages();\r\n      const mockBreakfast = this.getMockBreakfast();\r\n      const mockLunch = this.getMockLunch();\r\n\r\n      // Combine all data with validation\r\n      const allMenuItems = [\r\n        ...(coffeeData || []),\r\n        ...(dessertData || []),\r\n        ...mockSides,\r\n        ...mockBeverages,\r\n        ...mockBreakfast,\r\n        ...mockLunch\r\n      ];\r\n\r\n      // Validate each menu item\r\n      const validatedMenuItems = allMenuItems.filter(item => {\r\n        if (!item || !item.name || !item.description) {\r\n          console.warn('‚ö†Ô∏è Invalid menu item found:', item);\r\n          return false;\r\n        }\r\n        return true;\r\n      });\r\n\r\n      console.log('‚úÖ Validated menu items:', validatedMenuItems.length);\r\n      console.log('‚úÖ Sample validated item:', validatedMenuItems[0]);\r\n\r\n      const menuData = {\r\n        restaurant: {\r\n          name: 'Java House',\r\n          location: 'Westlands, Nairobi',\r\n          phone: '+254 20 123 4567',\r\n          website: 'https://javahouse.co.ke',\r\n          rating: 4.6,\r\n          priceRange: '$$',\r\n          cuisine: 'Coffee & International',\r\n          hours: '6:00 AM - 11:00 PM',\r\n          delivery: true,\r\n          pickup: true,\r\n          dineIn: true\r\n        },\r\n        menu: validatedMenuItems,\r\n        categories: this.getCategories(validatedMenuItems),\r\n        promotions: this.getPromotions(),\r\n        deals: this.getDeals(),\r\n        rewards: this.getRewards(),\r\n        customization: this.getCustomization(),\r\n        locations: this.getLocations()\r\n      };\r\n\r\n      console.log('‚úÖ Java House menu data prepared:', menuData);\r\n      return menuData;\r\n    } catch (error) {\r\n      console.error('‚ùå Error preparing Java House menu:', error);\r\n      // Return mock data as fallback\r\n      return this.getMockMenu();\r\n    }\r\n  }\r\n\r\n  // Helper methods for pricing\r\n  generateCoffeePrice() {\r\n    const basePrice = 180;\r\n    const variation = Math.floor(Math.random() * 60) - 30;\r\n    return Math.max(150, basePrice + variation);\r\n  }\r\n\r\n  generateDessertPrice() {\r\n    const basePrice = 250;\r\n    const variation = Math.floor(Math.random() * 80) - 40;\r\n    return Math.max(200, basePrice + variation);\r\n  }\r\n\r\n  // Helper methods for customization\r\n  getCoffeeCustomization() {\r\n    return {\r\n      available: true,\r\n      options: {\r\n        size: ['Small', 'Medium', 'Large'],\r\n        milk: ['Full Cream', 'Skim', 'Almond', 'Soy', 'Oat'],\r\n        sugar: ['None', 'Less', 'Normal', 'Extra'],\r\n        extras: ['Extra Shot', 'Whipped Cream', 'Caramel', 'Vanilla']\r\n      }\r\n    };\r\n  }\r\n\r\n  getDessertCustomization() {\r\n    return {\r\n      available: true,\r\n      options: {\r\n        size: ['Regular', 'Large'],\r\n        extras: ['Ice Cream', 'Whipped Cream', 'Nuts', 'Chocolate Sauce'],\r\n        dietary: ['Gluten-Free', 'Dairy-Free', 'Vegan']\r\n      }\r\n    };\r\n  }\r\n\r\n  // Mock data for other categories\r\n  getMockSides() {\r\n    return [\r\n      {\r\n        id: 'side-1',\r\n        name: 'Croissant',\r\n        description: 'Buttery, flaky French croissant served warm',\r\n        price: 120,\r\n        category: 'Sides',\r\n        image: 'https://images.unsplash.com/photo-1555507036-ab1f4038802a?w=400',\r\n        customization: { available: false },\r\n        isAvailable: true,\r\n        preparationTime: '2-3 minutes',\r\n        allergens: ['Gluten', 'Dairy'],\r\n        nutritionalInfo: { calories: 180, protein: 4, carbs: 20, fat: 10 }\r\n      },\r\n      {\r\n        id: 'side-2',\r\n        name: 'Muffin',\r\n        description: 'Freshly baked muffin with your choice of flavor',\r\n        price: 100,\r\n        category: 'Sides',\r\n        image: 'https://images.unsplash.com/photo-1556909114-f6e7ad7d3136?w=400',\r\n        customization: { available: false },\r\n        isAvailable: true,\r\n        preparationTime: '2-3 minutes',\r\n        allergens: ['Gluten', 'Dairy', 'Eggs'],\r\n        nutritionalInfo: { calories: 220, protein: 5, carbs: 28, fat: 12 }\r\n      }\r\n    ];\r\n  }\r\n\r\n  getMockBeverages() {\r\n    return [\r\n      {\r\n        id: 'beverage-1',\r\n        name: 'Fresh Orange Juice',\r\n        description: '100% natural orange juice, freshly squeezed',\r\n        price: 150,\r\n        category: 'Beverages',\r\n        image: 'https://images.unsplash.com/photo-1621506289937-a8e4df240d0b?w=400',\r\n        customization: { available: false },\r\n        isAvailable: true,\r\n        preparationTime: '3-5 minutes',\r\n        allergens: [],\r\n        nutritionalInfo: { calories: 110, protein: 2, carbs: 26, fat: 0 }\r\n      },\r\n      {\r\n        id: 'beverage-2',\r\n        name: 'Iced Tea',\r\n        description: 'Refreshing iced tea with lemon',\r\n        price: 120,\r\n        category: 'Beverages',\r\n        image: 'https://images.unsplash.com/photo-1556679343-c7306c1976bc?w=400',\r\n        customization: { available: false },\r\n        isAvailable: true,\r\n        preparationTime: '2-3 minutes',\r\n        allergens: [],\r\n        nutritionalInfo: { calories: 80, protein: 0, carbs: 20, fat: 0 }\r\n      }\r\n    ];\r\n  }\r\n\r\n  getMockBreakfast() {\r\n    return [\r\n      {\r\n        id: 'breakfast-1',\r\n        name: 'Full English Breakfast',\r\n        description: 'Eggs, bacon, sausage, beans, mushrooms, and toast',\r\n        price: 450,\r\n        category: 'Breakfast',\r\n        image: 'https://images.unsplash.com/photo-1551782450-a2132b4ba21d?w=400',\r\n        customization: { available: false },\r\n        isAvailable: true,\r\n        preparationTime: '15-20 minutes',\r\n        allergens: ['Gluten', 'Dairy', 'Eggs'],\r\n        nutritionalInfo: { calories: 650, protein: 25, carbs: 35, fat: 45 }\r\n      }\r\n    ];\r\n  }\r\n\r\n  getMockLunch() {\r\n    return [\r\n      {\r\n        id: 'lunch-1',\r\n        name: 'Caesar Salad',\r\n        description: 'Fresh romaine lettuce, parmesan cheese, croutons with caesar dressing',\r\n        price: 380,\r\n        category: 'Lunch',\r\n        image: 'https://images.unsplash.com/photo-1546793665-c74683f339c1?w=400',\r\n        customization: { available: false },\r\n        isAvailable: true,\r\n        preparationTime: '8-12 minutes',\r\n        allergens: ['Gluten', 'Dairy', 'Eggs'],\r\n        nutritionalInfo: { calories: 320, protein: 18, carbs: 15, fat: 25 }\r\n      }\r\n    ];\r\n  }\r\n\r\n  // Helper methods for other data\r\n  getCategories(allMenuItems) {\r\n    const categories = ['all'];\r\n    allMenuItems.forEach(item => {\r\n      if (!categories.includes(item.category)) {\r\n        categories.push(item.category);\r\n      }\r\n    });\r\n    return categories;\r\n  }\r\n\r\n  getPromotions() {\r\n    return [\r\n      'Buy 2 coffees, get 1 free',\r\n      '20% off all desserts after 8 PM',\r\n      'Student discount: 15% off with valid ID'\r\n    ];\r\n  }\r\n\r\n  getDeals() {\r\n    return [\r\n      'Happy Hour: 2-for-1 on all beverages (3-5 PM)',\r\n      'Weekend Special: Free pastry with any coffee purchase',\r\n      'Lunch Combo: Coffee + Sandwich + Dessert for KES 650'\r\n    ];\r\n  }\r\n\r\n  getRewards() {\r\n    return {\r\n      program: 'Java Rewards',\r\n      available: true,\r\n      benefits: [\r\n        'Earn 1 point per KES 10 spent',\r\n        'Free coffee after 10 points',\r\n        'Birthday month: 50% off any item',\r\n        'Exclusive member-only promotions'\r\n      ]\r\n    };\r\n  }\r\n\r\n  getCustomization() {\r\n    return {\r\n      available: true,\r\n      options: {\r\n        coffee: ['Size', 'Milk type', 'Sugar level', 'Extra shots'],\r\n        food: ['Portion size', 'Cooking preference', 'Sauce options'],\r\n        dietary: ['Gluten-free', 'Dairy-free', 'Vegan', 'Halal']\r\n      }\r\n    };\r\n  }\r\n\r\n  getLocations() {\r\n    return [\r\n      'Westlands, Nairobi',\r\n      'Kilimani, Nairobi',\r\n      'Lavington, Nairobi',\r\n      'Karen, Nairobi',\r\n      'Mombasa Road, Nairobi'\r\n    ];\r\n  }\r\n\r\n  // Fallback mock menu\r\n  getMockMenu() {\r\n    return {\r\n      restaurant: {\r\n        name: 'Java House',\r\n        location: 'Westlands, Nairobi',\r\n        phone: '+254 20 123 4567',\r\n        website: 'https://javahouse.co.ke',\r\n        rating: 4.6,\r\n        priceRange: '$$',\r\n        cuisine: 'Coffee & International',\r\n        hours: '6:00 AM - 11:00 PM',\r\n        delivery: true,\r\n        pickup: true,\r\n        dineIn: true\r\n      },\r\n      menu: [\r\n        {\r\n          id: 'mock-1',\r\n          name: 'Cappuccino',\r\n          description: 'Classic Italian coffee with steamed milk foam',\r\n          price: 180,\r\n          category: 'Coffee',\r\n          image: 'https://images.unsplash.com/photo-1509042239860-f550ce710b93?w=400',\r\n          customization: { available: true },\r\n          isAvailable: true,\r\n          preparationTime: '5-8 minutes',\r\n          allergens: ['Milk'],\r\n          nutritionalInfo: { calories: 120, protein: 6, carbs: 12, fat: 6 }\r\n        }\r\n      ],\r\n      categories: ['all', 'Coffee'],\r\n      promotions: ['Buy 2 coffees, get 1 free'],\r\n      deals: ['Happy Hour: 2-for-1 on all beverages (3-5 PM)'],\r\n      rewards: { program: 'Java Rewards', available: true, benefits: ['Earn points on every purchase'] },\r\n      customization: { available: true, options: { coffee: ['Size', 'Milk type'] } },\r\n      locations: ['Westlands, Nairobi']\r\n    };\r\n  }\r\n}\r\n\r\nconst javaHouseAPI = new JavaHouseAPI();\r\nexport default javaHouseAPI;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}