{"ast":null,"code":"// CORS Proxy Service\n// This service helps bypass CORS restrictions when calling external APIs\n\n// List of CORS proxy services\nconst CORS_PROXIES = ['https://cors-anywhere.herokuapp.com/', 'https://api.allorigins.win/raw?url=', 'https://corsproxy.io/?', 'https://thingproxy.freeboard.io/fetch/', 'https://cors.bridged.cc/'];\n\n// Function to get a working CORS proxy\nasync function getWorkingProxy() {\n  for (const proxy of CORS_PROXIES) {\n    try {\n      const testResponse = await fetch(`${proxy}https://httpbin.org/get`, {\n        method: 'GET',\n        timeout: 5000\n      });\n      if (testResponse.ok) {\n        console.log(`‚úÖ Working CORS proxy found: ${proxy}`);\n        return proxy;\n      }\n    } catch (error) {\n      console.log(`‚ùå Proxy failed: ${proxy}`, error.message);\n      continue;\n    }\n  }\n  console.log('‚ö†Ô∏è No working CORS proxy found, using mock data');\n  return null;\n}\n\n// Function to make CORS-free API calls\nexport async function makeCorsFreeRequest(url, options = {}) {\n  try {\n    // First try direct request (in case CORS is not an issue)\n    try {\n      const directResponse = await fetch(url, options);\n      if (directResponse.ok) {\n        console.log('‚úÖ Direct API call successful');\n        return directResponse;\n      }\n    } catch (directError) {\n      console.log('‚ö†Ô∏è Direct API call failed, trying CORS proxy...');\n    }\n\n    // If direct request fails, try CORS proxy\n    const workingProxy = await getWorkingProxy();\n    if (workingProxy) {\n      const proxyUrl = `${workingProxy}${url}`;\n      console.log(`üîÑ Making request through CORS proxy: ${proxyUrl}`);\n      const proxyResponse = await fetch(proxyUrl, {\n        ...options,\n        headers: {\n          ...options.headers,\n          'Origin': window.location.origin,\n          'X-Requested-With': 'XMLHttpRequest'\n        }\n      });\n      if (proxyResponse.ok) {\n        console.log('‚úÖ CORS proxy request successful');\n        return proxyResponse;\n      } else {\n        console.log(`‚ùå CORS proxy request failed: ${proxyResponse.status}`);\n      }\n    }\n    throw new Error('No working CORS solution found');\n  } catch (error) {\n    console.error('‚ùå CORS-free request failed:', error);\n    throw error;\n  }\n}\n\n// Alternative: Use a backend proxy endpoint\nexport async function makeBackendProxyRequest(endpoint, data = {}) {\n  try {\n    // This would call your own backend endpoint that makes the external API call\n    // For now, we'll simulate this with a mock response\n    console.log('üîÑ Simulating backend proxy request...');\n\n    // Simulate network delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n\n    // Return mock data for now\n    return {\n      ok: true,\n      json: async () => ({\n        message: 'Backend proxy not implemented yet'\n      })\n    };\n  } catch (error) {\n    console.error('‚ùå Backend proxy request failed:', error);\n    throw error;\n  }\n}\n\n// Function to check if CORS is supported\nexport function isCorsSupported() {\n  return 'cors' in new Request('', {\n    mode: 'cors'\n  });\n}\n\n// Function to get CORS status\nexport async function getCorsStatus(url) {\n  try {\n    const response = await fetch(url, {\n      mode: 'cors'\n    });\n    return {\n      supported: true,\n      status: response.status,\n      statusText: response.statusText\n    };\n  } catch (error) {\n    return {\n      supported: false,\n      error: error.message\n    };\n  }\n}\nexport default {\n  makeCorsFreeRequest,\n  makeBackendProxyRequest,\n  isCorsSupported,\n  getCorsStatus\n};","map":{"version":3,"names":["CORS_PROXIES","getWorkingProxy","proxy","testResponse","fetch","method","timeout","ok","console","log","error","message","makeCorsFreeRequest","url","options","directResponse","directError","workingProxy","proxyUrl","proxyResponse","headers","window","location","origin","status","Error","makeBackendProxyRequest","endpoint","data","Promise","resolve","setTimeout","json","isCorsSupported","Request","mode","getCorsStatus","response","supported","statusText"],"sources":["C:/Projects/gawa/frontend/src/api/corsProxy.js"],"sourcesContent":["// CORS Proxy Service\r\n// This service helps bypass CORS restrictions when calling external APIs\r\n\r\n// List of CORS proxy services\r\nconst CORS_PROXIES = [\r\n  'https://cors-anywhere.herokuapp.com/',\r\n  'https://api.allorigins.win/raw?url=',\r\n  'https://corsproxy.io/?',\r\n  'https://thingproxy.freeboard.io/fetch/',\r\n  'https://cors.bridged.cc/'\r\n];\r\n\r\n// Function to get a working CORS proxy\r\nasync function getWorkingProxy() {\r\n  for (const proxy of CORS_PROXIES) {\r\n    try {\r\n      const testResponse = await fetch(`${proxy}https://httpbin.org/get`, {\r\n        method: 'GET',\r\n        timeout: 5000\r\n      });\r\n      if (testResponse.ok) {\r\n        console.log(`‚úÖ Working CORS proxy found: ${proxy}`);\r\n        return proxy;\r\n      }\r\n    } catch (error) {\r\n      console.log(`‚ùå Proxy failed: ${proxy}`, error.message);\r\n      continue;\r\n    }\r\n  }\r\n  console.log('‚ö†Ô∏è No working CORS proxy found, using mock data');\r\n  return null;\r\n}\r\n\r\n// Function to make CORS-free API calls\r\nexport async function makeCorsFreeRequest(url, options = {}) {\r\n  try {\r\n    // First try direct request (in case CORS is not an issue)\r\n    try {\r\n      const directResponse = await fetch(url, options);\r\n      if (directResponse.ok) {\r\n        console.log('‚úÖ Direct API call successful');\r\n        return directResponse;\r\n      }\r\n    } catch (directError) {\r\n      console.log('‚ö†Ô∏è Direct API call failed, trying CORS proxy...');\r\n    }\r\n\r\n    // If direct request fails, try CORS proxy\r\n    const workingProxy = await getWorkingProxy();\r\n    if (workingProxy) {\r\n      const proxyUrl = `${workingProxy}${url}`;\r\n      console.log(`üîÑ Making request through CORS proxy: ${proxyUrl}`);\r\n      \r\n      const proxyResponse = await fetch(proxyUrl, {\r\n        ...options,\r\n        headers: {\r\n          ...options.headers,\r\n          'Origin': window.location.origin,\r\n          'X-Requested-With': 'XMLHttpRequest'\r\n        }\r\n      });\r\n      \r\n      if (proxyResponse.ok) {\r\n        console.log('‚úÖ CORS proxy request successful');\r\n        return proxyResponse;\r\n      } else {\r\n        console.log(`‚ùå CORS proxy request failed: ${proxyResponse.status}`);\r\n      }\r\n    }\r\n    \r\n    throw new Error('No working CORS solution found');\r\n  } catch (error) {\r\n    console.error('‚ùå CORS-free request failed:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Alternative: Use a backend proxy endpoint\r\nexport async function makeBackendProxyRequest(endpoint, data = {}) {\r\n  try {\r\n    // This would call your own backend endpoint that makes the external API call\r\n    // For now, we'll simulate this with a mock response\r\n    console.log('üîÑ Simulating backend proxy request...');\r\n    \r\n    // Simulate network delay\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n    \r\n    // Return mock data for now\r\n    return {\r\n      ok: true,\r\n      json: async () => ({ message: 'Backend proxy not implemented yet' })\r\n    };\r\n  } catch (error) {\r\n    console.error('‚ùå Backend proxy request failed:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Function to check if CORS is supported\r\nexport function isCorsSupported() {\r\n  return 'cors' in new Request('', { mode: 'cors' });\r\n}\r\n\r\n// Function to get CORS status\r\nexport async function getCorsStatus(url) {\r\n  try {\r\n    const response = await fetch(url, { mode: 'cors' });\r\n    return {\r\n      supported: true,\r\n      status: response.status,\r\n      statusText: response.statusText\r\n    };\r\n  } catch (error) {\r\n    return {\r\n      supported: false,\r\n      error: error.message\r\n    };\r\n  }\r\n}\r\n\r\nexport default {\r\n  makeCorsFreeRequest,\r\n  makeBackendProxyRequest,\r\n  isCorsSupported,\r\n  getCorsStatus\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}