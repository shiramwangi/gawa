{"ast":null,"code":"// Subway Restaurant API Integration Service\n// This service provides multiple ways to get Subway's menu data\n\n// Base configuration\nconst SUBWAY_CONFIG = {\n  name: 'Subway',\n  location: 'Multiple locations across Kenya',\n  phone: '+254 20 777 9999',\n  website: 'https://www.subway.co.ke',\n  coordinates: {\n    lat: -1.2921,\n    lng: 36.8219\n  },\n  // Nairobi location\n  description: 'Eat Fresh! Serving made-to-order sandwiches, wraps, and salads with fresh ingredients and healthy options',\n  founded: 1965,\n  branches: 12,\n  specialties: ['Fresh Sandwiches', 'Wraps', 'Salads', 'Healthy Options', 'Customizable', 'Delivery']\n};\n\n// Forkify API for real sandwich data\nconst FORKIFY_API = {\n  baseURL: 'https://forkify-api.herokuapp.com/api/v2',\n  endpoints: {\n    sandwiches: '/recipes?search=sandwich'\n  }\n};\n\n// Option 1: Direct API endpoints (if Subway has them)\nconst SUBWAY_DIRECT_API = {\n  baseURL: 'https://api.subway.co.ke',\n  // Hypothetical API endpoint\n  endpoints: {\n    menu: '/api/v1/menu',\n    promotions: '/api/v1/promotions',\n    locations: '/api/v1/locations',\n    delivery: '/api/v1/delivery',\n    deals: '/api/v1/deals',\n    rewards: '/api/v1/rewards',\n    customization: '/api/v1/customization'\n  }\n};\n\n// Option 2: Jumia Food API integration\nconst JUMIA_FOOD_API = {\n  baseURL: 'https://food.jumia.co.ke/api',\n  endpoints: {\n    search: '/restaurants/search',\n    menu: '/restaurants/{id}/menu',\n    categories: '/categories'\n  },\n  headers: {\n    'Authorization': 'Bearer YOUR_JUMIA_API_KEY',\n    'Content-Type': 'application/json'\n  }\n};\n\n// Option 3: Glovo API integration\nconst GLOVO_API = {\n  baseURL: 'https://api.glovoapp.com',\n  endpoints: {\n    restaurants: '/v3/restaurants',\n    menu: '/v3/restaurants/{id}/menu',\n    categories: '/v3/categories'\n  },\n  headers: {\n    'Authorization': 'Bearer YOUR_GLOVO_API_KEY',\n    'Content-Type': 'application/json'\n  }\n};\n\n// Main API functions\nexport const subwayAPI = {\n  // Get full menu with real-time data\n  async getFullMenu() {\n    try {\n      // Try Forkify API first for real sandwich data\n      const realSandwichMenu = await this.getRealSandwichMenu();\n      if (realSandwichMenu) return realSandwichMenu;\n\n      // Fallback to enhanced mock data\n      return this.getEnhancedMockMenu();\n    } catch (error) {\n      console.error('Error fetching Subway menu:', error);\n      return this.getEnhancedMockMenu();\n    }\n  },\n  // Get real sandwich data from Forkify API\n  async getRealSandwichMenu() {\n    try {\n      console.log('🍔 Fetching real sandwich data from Forkify API...');\n      const response = await fetch(`${FORKIFY_API.baseURL}${FORKIFY_API.endpoints.sandwiches}`);\n      if (!response.ok) {\n        throw new Error(`Forkify API request failed: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('✅ Forkify API response:', data);\n      if (data.status === 'success' && data.data && data.data.recipes) {\n        const sandwiches = data.data.recipes.map((recipe, index) => ({\n          id: recipe.id || `sandwich-${index}`,\n          name: recipe.title || 'Sandwich',\n          description: `Delicious ${recipe.title} - a premium sandwich from ${recipe.publisher}`,\n          price: this.generatePrice(800, 1500),\n          image: recipe.image_url || '/images/food/placeholder-food.jpg',\n          category: 'Sandwiches',\n          calories: this.generateCalories(200, 500),\n          serves: '1 person',\n          preparationTime: '15-25 min',\n          isPromo: Math.random() > 0.7,\n          promoText: 'Fresh Deal!',\n          signature: Math.random() > 0.8,\n          vegetarian: this.isVegetarian(recipe.title),\n          allergens: ['Gluten', 'Dairy', 'Eggs'],\n          tags: this.generateTags(recipe.title),\n          size: this.generateSize(),\n          crust: null,\n          spiceLevel: 'None',\n          originalPrice: null\n        }));\n        console.log('🍔 Transformed sandwiches:', sandwiches);\n        return {\n          restaurant: SUBWAY_CONFIG,\n          menu: sandwiches,\n          categories: {\n            'Sandwiches': sandwiches\n          },\n          customization: {\n            available: true,\n            options: {\n              bread: ['White', 'Wheat', 'Italian', 'Honey Oat', 'Flatbread'],\n              meat: ['Turkey', 'Ham', 'Chicken', 'Beef', 'Tuna', 'Veggie'],\n              cheese: ['American', 'Swiss', 'Provolone', 'Pepper Jack', 'Cheddar'],\n              vegetables: ['Lettuce', 'Tomato', 'Onion', 'Cucumber', 'Bell Peppers', 'Olives'],\n              sauces: ['Mayo', 'Mustard', 'Ranch', 'Sweet Onion', 'Chipotle', 'Honey Mustard']\n            }\n          },\n          deals: ['Buy 2 Get 1 Free on Tuesdays', 'Student Discount 15% off', 'Family Pack: 4 sandwiches + 4 drinks for KES 2,500'],\n          rewards: {\n            available: true,\n            program: 'Subway Rewards',\n            benefits: ['Earn points on every purchase', 'Free sandwich after 8 visits', 'Birthday month special offers', 'Exclusive member-only deals']\n          },\n          locations: ['Westlands Mall', 'Two Rivers Mall', 'The Hub Karen', 'Galleria Mall', 'Sarit Centre', 'Yaya Centre']\n        };\n      }\n      console.log('❌ No valid sandwich data found in Forkify response');\n      return null;\n    } catch (error) {\n      console.error('❌ Error fetching real sandwich data:', error);\n      return null;\n    }\n  },\n  // Generate random price between min and max\n  generatePrice(min, max) {\n    const price = Math.floor(Math.random() * (max - min + 1)) + min;\n    return `KES ${price.toLocaleString()}`;\n  },\n  // Generate random calories between min and max\n  generateCalories(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  },\n  // Check if sandwich is vegetarian based on title\n  isVegetarian(title) {\n    const vegetarianKeywords = ['veggie', 'vegetarian', 'vegan', 'hummus', 'falafel', 'tofu'];\n    return vegetarianKeywords.some(keyword => title.toLowerCase().includes(keyword));\n  },\n  // Generate tags based on sandwich title\n  generateTags(title) {\n    const tags = ['Fresh', 'Healthy', 'Customizable'];\n    if (title.toLowerCase().includes('grilled')) tags.push('Grilled');\n    if (title.toLowerCase().includes('cheese')) tags.push('Cheese');\n    if (title.toLowerCase().includes('chicken')) tags.push('Chicken');\n    if (title.toLowerCase().includes('turkey')) tags.push('Turkey');\n    if (title.toLowerCase().includes('beef')) tags.push('Beef');\n    if (title.toLowerCase().includes('veggie')) tags.push('Vegetarian');\n    return tags.slice(0, 5); // Return max 5 tags\n  },\n  // Generate random size\n  generateSize() {\n    const sizes = ['6 inch', '12 inch', 'Footlong'];\n    return sizes[Math.floor(Math.random() * sizes.length)];\n  },\n  // Try direct Subway API\n  async getDirectMenu() {\n    try {\n      const response = await fetch(`${SUBWAY_DIRECT_API.baseURL}${SUBWAY_DIRECT_API.endpoints.menu}`);\n      if (response.ok) {\n        const data = await response.json();\n        return this.transformDirectMenuData(data);\n      }\n    } catch (error) {\n      console.log('Direct API not available, trying alternatives...');\n    }\n    return null;\n  },\n  // Try Jumia Food API\n  async getJumiaMenu() {\n    try {\n      // Search for Subway on Jumia Food\n      const searchResponse = await fetch(`${JUMIA_FOOD_API.baseURL}${JUMIA_FOOD_API.endpoints.search}?q=subway`, {\n        headers: JUMIA_FOOD_API.headers\n      });\n      if (searchResponse.ok) {\n        const searchData = await searchResponse.json();\n        const subwayId = this.findSubwayId(searchData);\n        if (subwayId) {\n          const menuResponse = await fetch(`${JUMIA_FOOD_API.baseURL}${JUMIA_FOOD_API.endpoints.menu.replace('{id}', subwayId)}`, {\n            headers: JUMIA_FOOD_API.headers\n          });\n          if (menuResponse.ok) {\n            const menuData = await menuResponse.json();\n            return this.transformJumiaMenuData(menuData);\n          }\n        }\n      }\n    } catch (error) {\n      console.log('Jumia Food API not available, trying alternatives...');\n    }\n    return null;\n  },\n  // Try Glovo API\n  async getGlovoMenu() {\n    try {\n      // Search for Subway on Glovo\n      const searchResponse = await fetch(`${GLOVO_API.baseURL}${GLOVO_API.endpoints.restaurants}?search=subway`, {\n        headers: GLOVO_API.headers\n      });\n      if (searchResponse.ok) {\n        const searchData = await searchResponse.json();\n        const subwayId = this.findSubwayId(searchData);\n        if (subwayId) {\n          const menuResponse = await fetch(`${GLOVO_API.baseURL}${GLOVO_API.endpoints.menu.replace('{id}', subwayId)}`, {\n            headers: GLOVO_API.headers\n          });\n          if (menuResponse.ok) {\n            const menuData = await menuResponse.json();\n            return this.transformGlovoMenuData(menuData);\n          }\n        }\n      }\n    } catch (error) {\n      console.log('Glovo API not available, using fallback...');\n    }\n    return null;\n  },\n  // Enhanced mock menu with realistic Subway data\n  getEnhancedMockMenu() {\n    return {\n      restaurant: SUBWAY_CONFIG,\n      categories: {\n        'Classic Sandwiches': [{\n          id: 'cs-001',\n          name: 'BMT (Biggest, Meatiest, Tastiest)',\n          price: 'KES 450',\n          description: 'Salami, pepperoni, and ham with your choice of fresh vegetables and condiments',\n          category: 'Classic Sandwiches',\n          image: '/images/food/subway-bmt.jpg',\n          isPromo: true,\n          promoText: 'Popular',\n          calories: '380',\n          serves: '1 person',\n          allergens: ['Gluten', 'Pork', 'Beef'],\n          preparationTime: '5-8 min',\n          spiceLevel: 'Mild',\n          tags: ['Classic', 'Meat', 'Popular'],\n          vegetarian: false,\n          signature: true,\n          size: '6-inch',\n          bread: 'Italian'\n        }, {\n          id: 'cs-002',\n          name: 'Chicken Teriyaki',\n          price: 'KES 420',\n          description: 'Grilled chicken with teriyaki sauce, fresh vegetables, and your choice of condiments',\n          category: 'Classic Sandwiches',\n          image: '/images/food/subway-chicken-teriyaki.jpg',\n          isPromo: false,\n          calories: '320',\n          serves: '1 person',\n          allergens: ['Gluten', 'Chicken', 'Soy'],\n          preparationTime: '5-8 min',\n          spiceLevel: 'Mild',\n          tags: ['Classic', 'Chicken', 'Teriyaki'],\n          vegetarian: false,\n          signature: false,\n          size: '6-inch',\n          bread: 'Italian'\n        }, {\n          id: 'cs-003',\n          name: 'Veggie Delite',\n          price: 'KES 350',\n          description: 'Fresh lettuce, tomatoes, cucumbers, green peppers, and onions with your choice of condiments',\n          category: 'Classic Sandwiches',\n          image: '/images/food/subway-veggie-delite.jpg',\n          isPromo: false,\n          calories: '200',\n          serves: '1 person',\n          allergens: ['Gluten'],\n          preparationTime: '5-8 min',\n          spiceLevel: 'None',\n          tags: ['Classic', 'Vegetarian', 'Fresh'],\n          vegetarian: true,\n          signature: false,\n          size: '6-inch',\n          bread: 'Italian'\n        }],\n        'Premium Sandwiches': [{\n          id: 'ps-001',\n          name: 'Steak & Cheese',\n          price: 'KES 480',\n          description: 'Tender steak strips with melted cheese, fresh vegetables, and your choice of condiments',\n          category: 'Premium Sandwiches',\n          image: '/images/food/subway-steak-cheese.jpg',\n          isPromo: false,\n          calories: '420',\n          serves: '1 person',\n          allergens: ['Gluten', 'Beef', 'Dairy'],\n          preparationTime: '6-10 min',\n          spiceLevel: 'Mild',\n          tags: ['Premium', 'Steak', 'Cheese'],\n          vegetarian: false,\n          signature: false,\n          size: '6-inch',\n          bread: 'Italian'\n        }, {\n          id: 'ps-002',\n          name: 'Turkey Breast',\n          price: 'KES 400',\n          description: 'Sliced turkey breast with fresh vegetables and your choice of condiments',\n          category: 'Premium Sandwiches',\n          image: '/images/food/subway-turkey-breast.jpg',\n          isPromo: false,\n          calories: '280',\n          serves: '1 person',\n          allergens: ['Gluten', 'Turkey'],\n          preparationTime: '5-8 min',\n          spiceLevel: 'None',\n          tags: ['Premium', 'Turkey', 'Lean'],\n          vegetarian: false,\n          signature: false,\n          size: '6-inch',\n          bread: 'Italian'\n        }],\n        'Wraps': [{\n          id: 'wr-001',\n          name: 'Chicken Caesar Wrap',\n          price: 'KES 450',\n          description: 'Grilled chicken with Caesar dressing, lettuce, and parmesan cheese wrapped in a tortilla',\n          category: 'Wraps',\n          image: '/images/food/subway-chicken-caesar-wrap.jpg',\n          isPromo: false,\n          calories: '380',\n          serves: '1 person',\n          allergens: ['Gluten', 'Chicken', 'Dairy'],\n          preparationTime: '5-8 min',\n          spiceLevel: 'Mild',\n          tags: ['Wrap', 'Chicken', 'Caesar'],\n          vegetarian: false,\n          signature: false,\n          size: 'Regular',\n          bread: 'Tortilla'\n        }, {\n          id: 'wr-002',\n          name: 'Veggie Wrap',\n          price: 'KES 380',\n          description: 'Fresh vegetables with hummus and your choice of condiments wrapped in a tortilla',\n          category: 'Wraps',\n          image: '/images/food/subway-veggie-wrap.jpg',\n          isPromo: false,\n          calories: '250',\n          serves: '1 person',\n          allergens: ['Gluten', 'Chickpeas'],\n          preparationTime: '5-8 min',\n          spiceLevel: 'None',\n          tags: ['Wrap', 'Vegetarian', 'Hummus'],\n          vegetarian: true,\n          signature: false,\n          size: 'Regular',\n          bread: 'Tortilla'\n        }],\n        'Salads': [{\n          id: 'sl-001',\n          name: 'Chicken Caesar Salad',\n          price: 'KES 420',\n          description: 'Fresh lettuce with grilled chicken, Caesar dressing, and parmesan cheese',\n          category: 'Salads',\n          image: '/images/food/subway-chicken-caesar-salad.jpg',\n          isPromo: false,\n          calories: '280',\n          serves: '1 person',\n          allergens: ['Chicken', 'Dairy', 'Eggs'],\n          preparationTime: '5-8 min',\n          spiceLevel: 'None',\n          tags: ['Salad', 'Chicken', 'Caesar'],\n          vegetarian: false,\n          signature: false\n        }, {\n          id: 'sl-002',\n          name: 'Veggie Delite Salad',\n          price: 'KES 320',\n          description: 'Fresh lettuce, tomatoes, cucumbers, green peppers, and onions with your choice of dressing',\n          category: 'Salads',\n          image: '/images/food/subway-veggie-salad.jpg',\n          isPromo: false,\n          calories: '120',\n          serves: '1 person',\n          allergens: ['None'],\n          preparationTime: '5-8 min',\n          spiceLevel: 'None',\n          tags: ['Salad', 'Vegetarian', 'Fresh'],\n          vegetarian: true,\n          signature: false\n        }],\n        'Sides & Snacks': [{\n          id: 'ss-001',\n          name: 'Cookies (2 Pcs)',\n          price: 'KES 120',\n          description: 'Freshly baked chocolate chip cookies',\n          category: 'Sides & Snacks',\n          image: '/images/food/subway-cookies.jpg',\n          isPromo: false,\n          calories: '200',\n          serves: '1 person',\n          allergens: ['Gluten', 'Dairy', 'Chocolate'],\n          preparationTime: '1-2 min',\n          spiceLevel: 'None',\n          tags: ['Cookies', 'Sweet', 'Baked'],\n          vegetarian: true,\n          signature: false\n        }, {\n          id: 'ss-002',\n          name: 'Chips',\n          price: 'KES 80',\n          description: 'Assorted potato chips and snacks',\n          category: 'Sides & Snacks',\n          image: '/images/food/subway-chips.jpg',\n          isPromo: false,\n          calories: '150',\n          serves: '1 person',\n          allergens: ['Potatoes'],\n          preparationTime: '1 min',\n          spiceLevel: 'None',\n          tags: ['Chips', 'Snack', 'Crunchy'],\n          vegetarian: true,\n          signature: false\n        }],\n        'Beverages': [{\n          id: 'bv-001',\n          name: 'Coca Cola (Medium)',\n          price: 'KES 100',\n          description: 'Refreshing Coca Cola soft drink',\n          category: 'Beverages',\n          image: '/images/food/subway-coca-cola.jpg',\n          isPromo: false,\n          calories: '210',\n          serves: '1 person',\n          allergens: ['None'],\n          preparationTime: '1-2 min',\n          spiceLevel: 'None',\n          tags: ['Soft Drink', 'Refreshing', 'Classic'],\n          vegetarian: true,\n          signature: false\n        }, {\n          id: 'bv-002',\n          name: 'Sprite (Medium)',\n          price: 'KES 100',\n          description: 'Clear lemon-lime soft drink',\n          category: 'Beverages',\n          image: '/images/food/subway-sprite.jpg',\n          isPromo: false,\n          calories: '200',\n          serves: '1 person',\n          allergens: ['None'],\n          preparationTime: '1-2 min',\n          spiceLevel: 'None',\n          tags: ['Soft Drink', 'Lemon-Lime', 'Clear'],\n          vegetarian: true,\n          signature: false\n        }, {\n          id: 'bv-003',\n          name: 'Water (500ml)',\n          price: 'KES 60',\n          description: 'Pure bottled water',\n          category: 'Beverages',\n          image: '/images/food/subway-water.jpg',\n          isPromo: false,\n          calories: '0',\n          serves: '1 person',\n          allergens: ['None'],\n          preparationTime: '1 min',\n          spiceLevel: 'None',\n          tags: ['Water', 'Pure', 'Hydrating'],\n          vegetarian: true,\n          signature: false\n        }]\n      },\n      promotions: [{\n        id: 'promo-001',\n        title: 'Footlong Deal',\n        description: 'Get any footlong sandwich for only KES 600 (Save up to KES 200)',\n        discount: 'Save up to KES 200',\n        validUntil: '2024-12-31',\n        code: 'FOOTLONGDEAL',\n        timing: 'Available Daily'\n      }, {\n        id: 'promo-002',\n        title: 'Combo Special',\n        description: '6-inch sandwich + chips + drink for only KES 500',\n        discount: 'Save KES 100',\n        validUntil: '2024-12-31',\n        code: 'COMBOSPECIAL',\n        timing: 'Available Daily'\n      }, {\n        id: 'promo-003',\n        title: 'Healthy Choice',\n        description: 'Salad + drink for only KES 350 (Available all day)',\n        discount: 'Save KES 70',\n        validUntil: '2024-12-31',\n        code: 'HEALTHYCHOICE',\n        timing: 'Available All Day'\n      }],\n      deliveryInfo: {\n        available: true,\n        services: ['Jumia Food', 'Glovo', 'Uber Eats', 'Own Delivery'],\n        deliveryTime: '20-35 minutes',\n        deliveryFee: 'KES 120',\n        minimumOrder: 'KES 600',\n        freeDeliveryThreshold: 'KES 1,500'\n      },\n      locations: ['Westlands', 'CBD', 'Kilimani', 'Lavington', 'Karen', 'Mombasa Road', 'Thika Road', 'Nakuru', 'Mombasa', 'Kisumu'],\n      deals: ['Footlong Deal', 'Combo Special', 'Healthy Choice', 'Student Discount', 'Lunch Special'],\n      rewards: {\n        available: true,\n        program: 'Subway Rewards',\n        benefits: ['Points on every order', 'Free sandwich on birthday', 'Exclusive member deals', 'Early access to promotions']\n      },\n      customization: {\n        available: true,\n        options: {\n          breads: ['Italian', 'Wheat', 'Honey Oat', 'Flatbread', 'Wrap'],\n          sizes: ['6-inch', 'Footlong'],\n          meats: ['Chicken', 'Turkey', 'Ham', 'Salami', 'Pepperoni', 'Steak', 'Tuna'],\n          vegetables: ['Lettuce', 'Tomatoes', 'Cucumbers', 'Green Peppers', 'Onions', 'Olives', 'Jalapeños'],\n          condiments: ['Mayo', 'Mustard', 'Ketchup', 'BBQ', 'Ranch', 'Sweet Onion', 'Vinegar', 'Oil']\n        }\n      }\n    };\n  },\n  // Helper functions\n  findSubwayId(searchData) {\n    var _searchData$restauran;\n    // Logic to find Subway's ID in search results\n    const subway = (_searchData$restauran = searchData.restaurants) === null || _searchData$restauran === void 0 ? void 0 : _searchData$restauran.find(r => r.name.toLowerCase().includes('subway'));\n    return subway === null || subway === void 0 ? void 0 : subway.id;\n  },\n  transformDirectMenuData(data) {\n    // Transform direct API data to our format\n    return {\n      restaurant: SUBWAY_CONFIG,\n      categories: data.categories || {},\n      promotions: data.promotions || [],\n      deliveryInfo: data.delivery || {},\n      locations: data.locations || [],\n      deals: data.deals || [],\n      rewards: data.rewards || {},\n      customization: data.customization || {}\n    };\n  },\n  transformJumiaMenuData(data) {\n    // Transform Jumia Food data to our format\n    return {\n      restaurant: SUBWAY_CONFIG,\n      categories: this.groupByCategory(data.menu || []),\n      promotions: data.promotions || [],\n      deliveryInfo: {\n        available: true,\n        services: ['Jumia Food'],\n        deliveryTime: data.deliveryTime || '20-35 minutes',\n        deliveryFee: data.deliveryFee || 'KES 120',\n        minimumOrder: data.minimumOrder || 'KES 600'\n      },\n      locations: data.locations || [],\n      deals: data.deals || [],\n      rewards: data.rewards || {},\n      customization: data.customization || {}\n    };\n  },\n  transformGlovoMenuData(data) {\n    // Transform Glovo data to our format\n    return {\n      restaurant: SUBWAY_CONFIG,\n      categories: this.groupByCategory(data.menu || []),\n      promotions: data.promotions || [],\n      deliveryInfo: {\n        available: true,\n        services: ['Glovo'],\n        deliveryTime: data.deliveryTime || '20-35 minutes',\n        deliveryFee: data.deliveryFee || 'KES 120',\n        minimumOrder: data.minimumOrder || 'KES 600'\n      },\n      locations: data.locations || [],\n      deals: data.deals || [],\n      rewards: data.rewards || {},\n      customization: data.customization || {}\n    };\n  },\n  groupByCategory(menuItems) {\n    // Group menu items by category\n    const categories = {};\n    menuItems.forEach(item => {\n      if (!categories[item.category]) {\n        categories[item.category] = [];\n      }\n      categories[item.category].push(item);\n    });\n    return categories;\n  },\n  // Get restaurant information\n  getRestaurantInfo() {\n    return SUBWAY_CONFIG;\n  },\n  // Get current promotions\n  async getPromotions() {\n    try {\n      const response = await fetch(`${SUBWAY_DIRECT_API.baseURL}${SUBWAY_DIRECT_API.endpoints.promotions}`);\n      if (response.ok) {\n        return await response.json();\n      }\n    } catch (error) {\n      console.log('Using mock promotions');\n    }\n    return this.getEnhancedMockMenu().promotions;\n  },\n  // Check delivery availability\n  async checkDeliveryAvailability() {\n    try {\n      const response = await fetch(`${SUBWAY_DIRECT_API.baseURL}${SUBWAY_DIRECT_API.endpoints.delivery}`);\n      if (response.ok) {\n        return await response.json();\n      }\n    } catch (error) {\n      console.log('Using mock delivery info');\n    }\n    return this.getEnhancedMockMenu().deliveryInfo;\n  },\n  // Get deals\n  async getDeals() {\n    try {\n      const response = await fetch(`${SUBWAY_DIRECT_API.baseURL}${SUBWAY_DIRECT_API.endpoints.deals}`);\n      if (response.ok) {\n        return await response.json();\n      }\n    } catch (error) {\n      console.log('Using mock deals');\n    }\n    return this.getEnhancedMockMenu().deals;\n  },\n  // Get rewards info\n  async getRewards() {\n    try {\n      const response = await fetch(`${SUBWAY_DIRECT_API.baseURL}${SUBWAY_DIRECT_API.endpoints.rewards}`);\n      if (response.ok) {\n        return await response.json();\n      }\n    } catch (error) {\n      console.log('Using mock rewards info');\n    }\n    return this.getEnhancedMockMenu().rewards;\n  },\n  // Get customization options\n  async getCustomization() {\n    try {\n      const response = await fetch(`${SUBWAY_DIRECT_API.baseURL}${SUBWAY_DIRECT_API.endpoints.customization}`);\n      if (response.ok) {\n        return await response.json();\n      }\n    } catch (error) {\n      console.log('Using mock customization info');\n    }\n    return this.getEnhancedMockMenu().customization;\n  },\n  // Get all locations\n  async getLocations() {\n    try {\n      const response = await fetch(`${SUBWAY_DIRECT_API.baseURL}${SUBWAY_DIRECT_API.endpoints.locations}`);\n      if (response.ok) {\n        return await response.json();\n      }\n    } catch (error) {\n      console.log('Using mock locations');\n    }\n    return this.getEnhancedMockMenu().locations;\n  }\n};\nexport default subwayAPI;","map":{"version":3,"names":["SUBWAY_CONFIG","name","location","phone","website","coordinates","lat","lng","description","founded","branches","specialties","FORKIFY_API","baseURL","endpoints","sandwiches","SUBWAY_DIRECT_API","menu","promotions","locations","delivery","deals","rewards","customization","JUMIA_FOOD_API","search","categories","headers","GLOVO_API","restaurants","subwayAPI","getFullMenu","realSandwichMenu","getRealSandwichMenu","getEnhancedMockMenu","error","console","log","response","fetch","ok","Error","status","data","json","recipes","map","recipe","index","id","title","publisher","price","generatePrice","image","image_url","category","calories","generateCalories","serves","preparationTime","isPromo","Math","random","promoText","signature","vegetarian","isVegetarian","allergens","tags","generateTags","size","generateSize","crust","spiceLevel","originalPrice","restaurant","available","options","bread","meat","cheese","vegetables","sauces","program","benefits","min","max","floor","toLocaleString","vegetarianKeywords","some","keyword","toLowerCase","includes","push","slice","sizes","length","getDirectMenu","transformDirectMenuData","getJumiaMenu","searchResponse","searchData","subwayId","findSubwayId","menuResponse","replace","menuData","transformJumiaMenuData","getGlovoMenu","transformGlovoMenuData","discount","validUntil","code","timing","deliveryInfo","services","deliveryTime","deliveryFee","minimumOrder","freeDeliveryThreshold","breads","meats","condiments","_searchData$restauran","subway","find","r","groupByCategory","menuItems","forEach","item","getRestaurantInfo","getPromotions","checkDeliveryAvailability","getDeals","getRewards","getCustomization","getLocations"],"sources":["C:/Projects/gawa/frontend/src/api/subwayAPI.js"],"sourcesContent":["// Subway Restaurant API Integration Service\r\n// This service provides multiple ways to get Subway's menu data\r\n\r\n// Base configuration\r\nconst SUBWAY_CONFIG = {\r\n  name: 'Subway',\r\n  location: 'Multiple locations across Kenya',\r\n  phone: '+254 20 777 9999',\r\n  website: 'https://www.subway.co.ke',\r\n  coordinates: { lat: -1.2921, lng: 36.8219 }, // Nairobi location\r\n  description: 'Eat Fresh! Serving made-to-order sandwiches, wraps, and salads with fresh ingredients and healthy options',\r\n  founded: 1965,\r\n  branches: 12,\r\n  specialties: ['Fresh Sandwiches', 'Wraps', 'Salads', 'Healthy Options', 'Customizable', 'Delivery']\r\n};\r\n\r\n// Forkify API for real sandwich data\r\nconst FORKIFY_API = {\r\n  baseURL: 'https://forkify-api.herokuapp.com/api/v2',\r\n  endpoints: {\r\n    sandwiches: '/recipes?search=sandwich'\r\n  }\r\n};\r\n\r\n// Option 1: Direct API endpoints (if Subway has them)\r\nconst SUBWAY_DIRECT_API = {\r\n  baseURL: 'https://api.subway.co.ke', // Hypothetical API endpoint\r\n  endpoints: {\r\n    menu: '/api/v1/menu',\r\n    promotions: '/api/v1/promotions',\r\n    locations: '/api/v1/locations',\r\n    delivery: '/api/v1/delivery',\r\n    deals: '/api/v1/deals',\r\n    rewards: '/api/v1/rewards',\r\n    customization: '/api/v1/customization'\r\n  }\r\n};\r\n\r\n// Option 2: Jumia Food API integration\r\nconst JUMIA_FOOD_API = {\r\n  baseURL: 'https://food.jumia.co.ke/api',\r\n  endpoints: {\r\n    search: '/restaurants/search',\r\n    menu: '/restaurants/{id}/menu',\r\n    categories: '/categories'\r\n  },\r\n  headers: {\r\n    'Authorization': 'Bearer YOUR_JUMIA_API_KEY',\r\n    'Content-Type': 'application/json'\r\n  }\r\n};\r\n\r\n// Option 3: Glovo API integration\r\nconst GLOVO_API = {\r\n  baseURL: 'https://api.glovoapp.com',\r\n  endpoints: {\r\n    restaurants: '/v3/restaurants',\r\n    menu: '/v3/restaurants/{id}/menu',\r\n    categories: '/v3/categories'\r\n  },\r\n  headers: {\r\n    'Authorization': 'Bearer YOUR_GLOVO_API_KEY',\r\n    'Content-Type': 'application/json'\r\n  }\r\n};\r\n\r\n// Main API functions\r\nexport const subwayAPI = {\r\n  // Get full menu with real-time data\r\n  async getFullMenu() {\r\n    try {\r\n      // Try Forkify API first for real sandwich data\r\n      const realSandwichMenu = await this.getRealSandwichMenu();\r\n      if (realSandwichMenu) return realSandwichMenu;\r\n\r\n      // Fallback to enhanced mock data\r\n      return this.getEnhancedMockMenu();\r\n    } catch (error) {\r\n      console.error('Error fetching Subway menu:', error);\r\n      return this.getEnhancedMockMenu();\r\n    }\r\n  },\r\n\r\n  // Get real sandwich data from Forkify API\r\n  async getRealSandwichMenu() {\r\n    try {\r\n      console.log('🍔 Fetching real sandwich data from Forkify API...');\r\n      \r\n      const response = await fetch(`${FORKIFY_API.baseURL}${FORKIFY_API.endpoints.sandwiches}`);\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`Forkify API request failed: ${response.status}`);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      console.log('✅ Forkify API response:', data);\r\n      \r\n      if (data.status === 'success' && data.data && data.data.recipes) {\r\n        const sandwiches = data.data.recipes.map((recipe, index) => ({\r\n          id: recipe.id || `sandwich-${index}`,\r\n          name: recipe.title || 'Sandwich',\r\n          description: `Delicious ${recipe.title} - a premium sandwich from ${recipe.publisher}`,\r\n          price: this.generatePrice(800, 1500),\r\n          image: recipe.image_url || '/images/food/placeholder-food.jpg',\r\n          category: 'Sandwiches',\r\n          calories: this.generateCalories(200, 500),\r\n          serves: '1 person',\r\n          preparationTime: '15-25 min',\r\n          isPromo: Math.random() > 0.7,\r\n          promoText: 'Fresh Deal!',\r\n          signature: Math.random() > 0.8,\r\n          vegetarian: this.isVegetarian(recipe.title),\r\n          allergens: ['Gluten', 'Dairy', 'Eggs'],\r\n          tags: this.generateTags(recipe.title),\r\n          size: this.generateSize(),\r\n          crust: null,\r\n          spiceLevel: 'None',\r\n          originalPrice: null\r\n        }));\r\n        \r\n        console.log('🍔 Transformed sandwiches:', sandwiches);\r\n        \r\n        return {\r\n          restaurant: SUBWAY_CONFIG,\r\n          menu: sandwiches,\r\n          categories: {\r\n            'Sandwiches': sandwiches\r\n          },\r\n          customization: {\r\n            available: true,\r\n            options: {\r\n              bread: ['White', 'Wheat', 'Italian', 'Honey Oat', 'Flatbread'],\r\n              meat: ['Turkey', 'Ham', 'Chicken', 'Beef', 'Tuna', 'Veggie'],\r\n              cheese: ['American', 'Swiss', 'Provolone', 'Pepper Jack', 'Cheddar'],\r\n              vegetables: ['Lettuce', 'Tomato', 'Onion', 'Cucumber', 'Bell Peppers', 'Olives'],\r\n              sauces: ['Mayo', 'Mustard', 'Ranch', 'Sweet Onion', 'Chipotle', 'Honey Mustard']\r\n            }\r\n          },\r\n          deals: [\r\n            'Buy 2 Get 1 Free on Tuesdays',\r\n            'Student Discount 15% off',\r\n            'Family Pack: 4 sandwiches + 4 drinks for KES 2,500'\r\n          ],\r\n          rewards: {\r\n            available: true,\r\n            program: 'Subway Rewards',\r\n            benefits: [\r\n              'Earn points on every purchase',\r\n              'Free sandwich after 8 visits',\r\n              'Birthday month special offers',\r\n              'Exclusive member-only deals'\r\n            ]\r\n          },\r\n          locations: [\r\n            'Westlands Mall',\r\n            'Two Rivers Mall',\r\n            'The Hub Karen',\r\n            'Galleria Mall',\r\n            'Sarit Centre',\r\n            'Yaya Centre'\r\n          ]\r\n        };\r\n      }\r\n      \r\n      console.log('❌ No valid sandwich data found in Forkify response');\r\n      return null;\r\n      \r\n    } catch (error) {\r\n      console.error('❌ Error fetching real sandwich data:', error);\r\n      return null;\r\n    }\r\n  },\r\n\r\n  // Generate random price between min and max\r\n  generatePrice(min, max) {\r\n    const price = Math.floor(Math.random() * (max - min + 1)) + min;\r\n    return `KES ${price.toLocaleString()}`;\r\n  },\r\n\r\n  // Generate random calories between min and max\r\n  generateCalories(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n  },\r\n\r\n  // Check if sandwich is vegetarian based on title\r\n  isVegetarian(title) {\r\n    const vegetarianKeywords = ['veggie', 'vegetarian', 'vegan', 'hummus', 'falafel', 'tofu'];\r\n    return vegetarianKeywords.some(keyword => \r\n      title.toLowerCase().includes(keyword)\r\n    );\r\n  },\r\n\r\n  // Generate tags based on sandwich title\r\n  generateTags(title) {\r\n    const tags = ['Fresh', 'Healthy', 'Customizable'];\r\n    \r\n    if (title.toLowerCase().includes('grilled')) tags.push('Grilled');\r\n    if (title.toLowerCase().includes('cheese')) tags.push('Cheese');\r\n    if (title.toLowerCase().includes('chicken')) tags.push('Chicken');\r\n    if (title.toLowerCase().includes('turkey')) tags.push('Turkey');\r\n    if (title.toLowerCase().includes('beef')) tags.push('Beef');\r\n    if (title.toLowerCase().includes('veggie')) tags.push('Vegetarian');\r\n    \r\n    return tags.slice(0, 5); // Return max 5 tags\r\n  },\r\n\r\n  // Generate random size\r\n  generateSize() {\r\n    const sizes = ['6 inch', '12 inch', 'Footlong'];\r\n    return sizes[Math.floor(Math.random() * sizes.length)];\r\n  },\r\n\r\n  // Try direct Subway API\r\n  async getDirectMenu() {\r\n    try {\r\n      const response = await fetch(`${SUBWAY_DIRECT_API.baseURL}${SUBWAY_DIRECT_API.endpoints.menu}`);\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        return this.transformDirectMenuData(data);\r\n      }\r\n    } catch (error) {\r\n      console.log('Direct API not available, trying alternatives...');\r\n    }\r\n    return null;\r\n  },\r\n\r\n  // Try Jumia Food API\r\n  async getJumiaMenu() {\r\n    try {\r\n      // Search for Subway on Jumia Food\r\n      const searchResponse = await fetch(`${JUMIA_FOOD_API.baseURL}${JUMIA_FOOD_API.endpoints.search}?q=subway`, {\r\n        headers: JUMIA_FOOD_API.headers\r\n      });\r\n      \r\n      if (searchResponse.ok) {\r\n        const searchData = await searchResponse.json();\r\n        const subwayId = this.findSubwayId(searchData);\r\n        \r\n        if (subwayId) {\r\n          const menuResponse = await fetch(`${JUMIA_FOOD_API.baseURL}${JUMIA_FOOD_API.endpoints.menu.replace('{id}', subwayId)}`, {\r\n            headers: JUMIA_FOOD_API.headers\r\n          });\r\n          \r\n          if (menuResponse.ok) {\r\n            const menuData = await menuResponse.json();\r\n            return this.transformJumiaMenuData(menuData);\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log('Jumia Food API not available, trying alternatives...');\r\n    }\r\n    return null;\r\n  },\r\n\r\n  // Try Glovo API\r\n  async getGlovoMenu() {\r\n    try {\r\n      // Search for Subway on Glovo\r\n      const searchResponse = await fetch(`${GLOVO_API.baseURL}${GLOVO_API.endpoints.restaurants}?search=subway`, {\r\n        headers: GLOVO_API.headers\r\n      });\r\n      \r\n      if (searchResponse.ok) {\r\n        const searchData = await searchResponse.json();\r\n        const subwayId = this.findSubwayId(searchData);\r\n        \r\n        if (subwayId) {\r\n          const menuResponse = await fetch(`${GLOVO_API.baseURL}${GLOVO_API.endpoints.menu.replace('{id}', subwayId)}`, {\r\n            headers: GLOVO_API.headers\r\n          });\r\n          \r\n          if (menuResponse.ok) {\r\n            const menuData = await menuResponse.json();\r\n            return this.transformGlovoMenuData(menuData);\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log('Glovo API not available, using fallback...');\r\n    }\r\n    return null;\r\n  },\r\n\r\n  // Enhanced mock menu with realistic Subway data\r\n  getEnhancedMockMenu() {\r\n    return {\r\n      restaurant: SUBWAY_CONFIG,\r\n      categories: {\r\n        'Classic Sandwiches': [\r\n          {\r\n            id: 'cs-001',\r\n            name: 'BMT (Biggest, Meatiest, Tastiest)',\r\n            price: 'KES 450',\r\n            description: 'Salami, pepperoni, and ham with your choice of fresh vegetables and condiments',\r\n            category: 'Classic Sandwiches',\r\n            image: '/images/food/subway-bmt.jpg',\r\n            isPromo: true,\r\n            promoText: 'Popular',\r\n            calories: '380',\r\n            serves: '1 person',\r\n            allergens: ['Gluten', 'Pork', 'Beef'],\r\n            preparationTime: '5-8 min',\r\n            spiceLevel: 'Mild',\r\n            tags: ['Classic', 'Meat', 'Popular'],\r\n            vegetarian: false,\r\n            signature: true,\r\n            size: '6-inch',\r\n            bread: 'Italian'\r\n          },\r\n          {\r\n            id: 'cs-002',\r\n            name: 'Chicken Teriyaki',\r\n            price: 'KES 420',\r\n            description: 'Grilled chicken with teriyaki sauce, fresh vegetables, and your choice of condiments',\r\n            category: 'Classic Sandwiches',\r\n            image: '/images/food/subway-chicken-teriyaki.jpg',\r\n            isPromo: false,\r\n            calories: '320',\r\n            serves: '1 person',\r\n            allergens: ['Gluten', 'Chicken', 'Soy'],\r\n            preparationTime: '5-8 min',\r\n            spiceLevel: 'Mild',\r\n            tags: ['Classic', 'Chicken', 'Teriyaki'],\r\n            vegetarian: false,\r\n            signature: false,\r\n            size: '6-inch',\r\n            bread: 'Italian'\r\n          },\r\n          {\r\n            id: 'cs-003',\r\n            name: 'Veggie Delite',\r\n            price: 'KES 350',\r\n            description: 'Fresh lettuce, tomatoes, cucumbers, green peppers, and onions with your choice of condiments',\r\n            category: 'Classic Sandwiches',\r\n            image: '/images/food/subway-veggie-delite.jpg',\r\n            isPromo: false,\r\n            calories: '200',\r\n            serves: '1 person',\r\n            allergens: ['Gluten'],\r\n            preparationTime: '5-8 min',\r\n            spiceLevel: 'None',\r\n            tags: ['Classic', 'Vegetarian', 'Fresh'],\r\n            vegetarian: true,\r\n            signature: false,\r\n            size: '6-inch',\r\n            bread: 'Italian'\r\n          }\r\n        ],\r\n        'Premium Sandwiches': [\r\n          {\r\n            id: 'ps-001',\r\n            name: 'Steak & Cheese',\r\n            price: 'KES 480',\r\n            description: 'Tender steak strips with melted cheese, fresh vegetables, and your choice of condiments',\r\n            category: 'Premium Sandwiches',\r\n            image: '/images/food/subway-steak-cheese.jpg',\r\n            isPromo: false,\r\n            calories: '420',\r\n            serves: '1 person',\r\n            allergens: ['Gluten', 'Beef', 'Dairy'],\r\n            preparationTime: '6-10 min',\r\n            spiceLevel: 'Mild',\r\n            tags: ['Premium', 'Steak', 'Cheese'],\r\n            vegetarian: false,\r\n            signature: false,\r\n            size: '6-inch',\r\n            bread: 'Italian'\r\n          },\r\n          {\r\n            id: 'ps-002',\r\n            name: 'Turkey Breast',\r\n            price: 'KES 400',\r\n            description: 'Sliced turkey breast with fresh vegetables and your choice of condiments',\r\n            category: 'Premium Sandwiches',\r\n            image: '/images/food/subway-turkey-breast.jpg',\r\n            isPromo: false,\r\n            calories: '280',\r\n            serves: '1 person',\r\n            allergens: ['Gluten', 'Turkey'],\r\n            preparationTime: '5-8 min',\r\n            spiceLevel: 'None',\r\n            tags: ['Premium', 'Turkey', 'Lean'],\r\n            vegetarian: false,\r\n            signature: false,\r\n            size: '6-inch',\r\n            bread: 'Italian'\r\n          }\r\n        ],\r\n        'Wraps': [\r\n          {\r\n            id: 'wr-001',\r\n            name: 'Chicken Caesar Wrap',\r\n            price: 'KES 450',\r\n            description: 'Grilled chicken with Caesar dressing, lettuce, and parmesan cheese wrapped in a tortilla',\r\n            category: 'Wraps',\r\n            image: '/images/food/subway-chicken-caesar-wrap.jpg',\r\n            isPromo: false,\r\n            calories: '380',\r\n            serves: '1 person',\r\n            allergens: ['Gluten', 'Chicken', 'Dairy'],\r\n            preparationTime: '5-8 min',\r\n            spiceLevel: 'Mild',\r\n            tags: ['Wrap', 'Chicken', 'Caesar'],\r\n            vegetarian: false,\r\n            signature: false,\r\n            size: 'Regular',\r\n            bread: 'Tortilla'\r\n          },\r\n          {\r\n            id: 'wr-002',\r\n            name: 'Veggie Wrap',\r\n            price: 'KES 380',\r\n            description: 'Fresh vegetables with hummus and your choice of condiments wrapped in a tortilla',\r\n            category: 'Wraps',\r\n            image: '/images/food/subway-veggie-wrap.jpg',\r\n            isPromo: false,\r\n            calories: '250',\r\n            serves: '1 person',\r\n            allergens: ['Gluten', 'Chickpeas'],\r\n            preparationTime: '5-8 min',\r\n            spiceLevel: 'None',\r\n            tags: ['Wrap', 'Vegetarian', 'Hummus'],\r\n            vegetarian: true,\r\n            signature: false,\r\n            size: 'Regular',\r\n            bread: 'Tortilla'\r\n          }\r\n        ],\r\n        'Salads': [\r\n          {\r\n            id: 'sl-001',\r\n            name: 'Chicken Caesar Salad',\r\n            price: 'KES 420',\r\n            description: 'Fresh lettuce with grilled chicken, Caesar dressing, and parmesan cheese',\r\n            category: 'Salads',\r\n            image: '/images/food/subway-chicken-caesar-salad.jpg',\r\n            isPromo: false,\r\n            calories: '280',\r\n            serves: '1 person',\r\n            allergens: ['Chicken', 'Dairy', 'Eggs'],\r\n            preparationTime: '5-8 min',\r\n            spiceLevel: 'None',\r\n            tags: ['Salad', 'Chicken', 'Caesar'],\r\n            vegetarian: false,\r\n            signature: false\r\n          },\r\n          {\r\n            id: 'sl-002',\r\n            name: 'Veggie Delite Salad',\r\n            price: 'KES 320',\r\n            description: 'Fresh lettuce, tomatoes, cucumbers, green peppers, and onions with your choice of dressing',\r\n            category: 'Salads',\r\n            image: '/images/food/subway-veggie-salad.jpg',\r\n            isPromo: false,\r\n            calories: '120',\r\n            serves: '1 person',\r\n            allergens: ['None'],\r\n            preparationTime: '5-8 min',\r\n            spiceLevel: 'None',\r\n            tags: ['Salad', 'Vegetarian', 'Fresh'],\r\n            vegetarian: true,\r\n            signature: false\r\n          }\r\n        ],\r\n        'Sides & Snacks': [\r\n          {\r\n            id: 'ss-001',\r\n            name: 'Cookies (2 Pcs)',\r\n            price: 'KES 120',\r\n            description: 'Freshly baked chocolate chip cookies',\r\n            category: 'Sides & Snacks',\r\n            image: '/images/food/subway-cookies.jpg',\r\n            isPromo: false,\r\n            calories: '200',\r\n            serves: '1 person',\r\n            allergens: ['Gluten', 'Dairy', 'Chocolate'],\r\n            preparationTime: '1-2 min',\r\n            spiceLevel: 'None',\r\n            tags: ['Cookies', 'Sweet', 'Baked'],\r\n            vegetarian: true,\r\n            signature: false\r\n          },\r\n          {\r\n            id: 'ss-002',\r\n            name: 'Chips',\r\n            price: 'KES 80',\r\n            description: 'Assorted potato chips and snacks',\r\n            category: 'Sides & Snacks',\r\n            image: '/images/food/subway-chips.jpg',\r\n            isPromo: false,\r\n            calories: '150',\r\n            serves: '1 person',\r\n            allergens: ['Potatoes'],\r\n            preparationTime: '1 min',\r\n            spiceLevel: 'None',\r\n            tags: ['Chips', 'Snack', 'Crunchy'],\r\n            vegetarian: true,\r\n            signature: false\r\n          }\r\n        ],\r\n        'Beverages': [\r\n          {\r\n            id: 'bv-001',\r\n            name: 'Coca Cola (Medium)',\r\n            price: 'KES 100',\r\n            description: 'Refreshing Coca Cola soft drink',\r\n            category: 'Beverages',\r\n            image: '/images/food/subway-coca-cola.jpg',\r\n            isPromo: false,\r\n            calories: '210',\r\n            serves: '1 person',\r\n            allergens: ['None'],\r\n            preparationTime: '1-2 min',\r\n            spiceLevel: 'None',\r\n            tags: ['Soft Drink', 'Refreshing', 'Classic'],\r\n            vegetarian: true,\r\n            signature: false\r\n          },\r\n          {\r\n            id: 'bv-002',\r\n            name: 'Sprite (Medium)',\r\n            price: 'KES 100',\r\n            description: 'Clear lemon-lime soft drink',\r\n            category: 'Beverages',\r\n            image: '/images/food/subway-sprite.jpg',\r\n            isPromo: false,\r\n            calories: '200',\r\n            serves: '1 person',\r\n            allergens: ['None'],\r\n            preparationTime: '1-2 min',\r\n            spiceLevel: 'None',\r\n            tags: ['Soft Drink', 'Lemon-Lime', 'Clear'],\r\n            vegetarian: true,\r\n            signature: false\r\n          },\r\n          {\r\n            id: 'bv-003',\r\n            name: 'Water (500ml)',\r\n            price: 'KES 60',\r\n            description: 'Pure bottled water',\r\n            category: 'Beverages',\r\n            image: '/images/food/subway-water.jpg',\r\n            isPromo: false,\r\n            calories: '0',\r\n            serves: '1 person',\r\n            allergens: ['None'],\r\n            preparationTime: '1 min',\r\n            spiceLevel: 'None',\r\n            tags: ['Water', 'Pure', 'Hydrating'],\r\n            vegetarian: true,\r\n            signature: false\r\n          }\r\n        ]\r\n      },\r\n      promotions: [\r\n        {\r\n          id: 'promo-001',\r\n          title: 'Footlong Deal',\r\n          description: 'Get any footlong sandwich for only KES 600 (Save up to KES 200)',\r\n          discount: 'Save up to KES 200',\r\n          validUntil: '2024-12-31',\r\n          code: 'FOOTLONGDEAL',\r\n          timing: 'Available Daily'\r\n        },\r\n        {\r\n          id: 'promo-002',\r\n          title: 'Combo Special',\r\n          description: '6-inch sandwich + chips + drink for only KES 500',\r\n          discount: 'Save KES 100',\r\n          validUntil: '2024-12-31',\r\n          code: 'COMBOSPECIAL',\r\n          timing: 'Available Daily'\r\n        },\r\n        {\r\n          id: 'promo-003',\r\n          title: 'Healthy Choice',\r\n          description: 'Salad + drink for only KES 350 (Available all day)',\r\n          discount: 'Save KES 70',\r\n          validUntil: '2024-12-31',\r\n          code: 'HEALTHYCHOICE',\r\n          timing: 'Available All Day'\r\n        }\r\n      ],\r\n      deliveryInfo: {\r\n        available: true,\r\n        services: ['Jumia Food', 'Glovo', 'Uber Eats', 'Own Delivery'],\r\n        deliveryTime: '20-35 minutes',\r\n        deliveryFee: 'KES 120',\r\n        minimumOrder: 'KES 600',\r\n        freeDeliveryThreshold: 'KES 1,500'\r\n      },\r\n      locations: [\r\n        'Westlands',\r\n        'CBD',\r\n        'Kilimani',\r\n        'Lavington',\r\n        'Karen',\r\n        'Mombasa Road',\r\n        'Thika Road',\r\n        'Nakuru',\r\n        'Mombasa',\r\n        'Kisumu'\r\n      ],\r\n      deals: [\r\n        'Footlong Deal',\r\n        'Combo Special',\r\n        'Healthy Choice',\r\n        'Student Discount',\r\n        'Lunch Special'\r\n      ],\r\n      rewards: {\r\n        available: true,\r\n        program: 'Subway Rewards',\r\n        benefits: ['Points on every order', 'Free sandwich on birthday', 'Exclusive member deals', 'Early access to promotions']\r\n      },\r\n      customization: {\r\n        available: true,\r\n        options: {\r\n          breads: ['Italian', 'Wheat', 'Honey Oat', 'Flatbread', 'Wrap'],\r\n          sizes: ['6-inch', 'Footlong'],\r\n          meats: ['Chicken', 'Turkey', 'Ham', 'Salami', 'Pepperoni', 'Steak', 'Tuna'],\r\n          vegetables: ['Lettuce', 'Tomatoes', 'Cucumbers', 'Green Peppers', 'Onions', 'Olives', 'Jalapeños'],\r\n          condiments: ['Mayo', 'Mustard', 'Ketchup', 'BBQ', 'Ranch', 'Sweet Onion', 'Vinegar', 'Oil']\r\n        }\r\n      }\r\n    };\r\n  },\r\n\r\n  // Helper functions\r\n  findSubwayId(searchData) {\r\n    // Logic to find Subway's ID in search results\r\n    const subway = searchData.restaurants?.find(r => \r\n      r.name.toLowerCase().includes('subway')\r\n    );\r\n    return subway?.id;\r\n  },\r\n\r\n  transformDirectMenuData(data) {\r\n    // Transform direct API data to our format\r\n    return {\r\n      restaurant: SUBWAY_CONFIG,\r\n      categories: data.categories || {},\r\n      promotions: data.promotions || [],\r\n      deliveryInfo: data.delivery || {},\r\n      locations: data.locations || [],\r\n      deals: data.deals || [],\r\n      rewards: data.rewards || {},\r\n      customization: data.customization || {}\r\n    };\r\n  },\r\n\r\n  transformJumiaMenuData(data) {\r\n    // Transform Jumia Food data to our format\r\n    return {\r\n      restaurant: SUBWAY_CONFIG,\r\n      categories: this.groupByCategory(data.menu || []),\r\n      promotions: data.promotions || [],\r\n      deliveryInfo: {\r\n        available: true,\r\n        services: ['Jumia Food'],\r\n        deliveryTime: data.deliveryTime || '20-35 minutes',\r\n        deliveryFee: data.deliveryFee || 'KES 120',\r\n        minimumOrder: data.minimumOrder || 'KES 600'\r\n      },\r\n      locations: data.locations || [],\r\n      deals: data.deals || [],\r\n      rewards: data.rewards || {},\r\n      customization: data.customization || {}\r\n    };\r\n  },\r\n\r\n  transformGlovoMenuData(data) {\r\n    // Transform Glovo data to our format\r\n    return {\r\n      restaurant: SUBWAY_CONFIG,\r\n      categories: this.groupByCategory(data.menu || []),\r\n      promotions: data.promotions || [],\r\n      deliveryInfo: {\r\n        available: true,\r\n        services: ['Glovo'],\r\n        deliveryTime: data.deliveryTime || '20-35 minutes',\r\n        deliveryFee: data.deliveryFee || 'KES 120',\r\n        minimumOrder: data.minimumOrder || 'KES 600'\r\n      },\r\n      locations: data.locations || [],\r\n      deals: data.deals || [],\r\n      rewards: data.rewards || {},\r\n      customization: data.customization || {}\r\n    };\r\n  },\r\n\r\n  groupByCategory(menuItems) {\r\n    // Group menu items by category\r\n    const categories = {};\r\n    menuItems.forEach(item => {\r\n      if (!categories[item.category]) {\r\n        categories[item.category] = [];\r\n      }\r\n      categories[item.category].push(item);\r\n    });\r\n    return categories;\r\n  },\r\n\r\n  // Get restaurant information\r\n  getRestaurantInfo() {\r\n    return SUBWAY_CONFIG;\r\n  },\r\n\r\n  // Get current promotions\r\n  async getPromotions() {\r\n    try {\r\n      const response = await fetch(`${SUBWAY_DIRECT_API.baseURL}${SUBWAY_DIRECT_API.endpoints.promotions}`);\r\n      if (response.ok) {\r\n        return await response.json();\r\n      }\r\n    } catch (error) {\r\n      console.log('Using mock promotions');\r\n    }\r\n    \r\n    return this.getEnhancedMockMenu().promotions;\r\n  },\r\n\r\n  // Check delivery availability\r\n  async checkDeliveryAvailability() {\r\n    try {\r\n      const response = await fetch(`${SUBWAY_DIRECT_API.baseURL}${SUBWAY_DIRECT_API.endpoints.delivery}`);\r\n      if (response.ok) {\r\n        return await response.json();\r\n      }\r\n    } catch (error) {\r\n      console.log('Using mock delivery info');\r\n    }\r\n    \r\n    return this.getEnhancedMockMenu().deliveryInfo;\r\n  },\r\n\r\n  // Get deals\r\n  async getDeals() {\r\n    try {\r\n      const response = await fetch(`${SUBWAY_DIRECT_API.baseURL}${SUBWAY_DIRECT_API.endpoints.deals}`);\r\n      if (response.ok) {\r\n        return await response.json();\r\n      }\r\n    } catch (error) {\r\n      console.log('Using mock deals');\r\n    }\r\n    \r\n    return this.getEnhancedMockMenu().deals;\r\n  },\r\n\r\n  // Get rewards info\r\n  async getRewards() {\r\n    try {\r\n      const response = await fetch(`${SUBWAY_DIRECT_API.baseURL}${SUBWAY_DIRECT_API.endpoints.rewards}`);\r\n      if (response.ok) {\r\n        return await response.json();\r\n      }\r\n    } catch (error) {\r\n      console.log('Using mock rewards info');\r\n    }\r\n    \r\n    return this.getEnhancedMockMenu().rewards;\r\n  },\r\n\r\n  // Get customization options\r\n  async getCustomization() {\r\n    try {\r\n      const response = await fetch(`${SUBWAY_DIRECT_API.baseURL}${SUBWAY_DIRECT_API.endpoints.customization}`);\r\n      if (response.ok) {\r\n        return await response.json();\r\n      }\r\n    } catch (error) {\r\n      console.log('Using mock customization info');\r\n    }\r\n    \r\n    return this.getEnhancedMockMenu().customization;\r\n  },\r\n\r\n  // Get all locations\r\n  async getLocations() {\r\n    try {\r\n      const response = await fetch(`${SUBWAY_DIRECT_API.baseURL}${SUBWAY_DIRECT_API.endpoints.locations}`);\r\n      if (response.ok) {\r\n        return await response.json();\r\n      }\r\n    } catch (error) {\r\n      console.log('Using mock locations');\r\n    }\r\n    \r\n    return this.getEnhancedMockMenu().locations;\r\n  }\r\n};\r\n\r\nexport default subwayAPI;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}