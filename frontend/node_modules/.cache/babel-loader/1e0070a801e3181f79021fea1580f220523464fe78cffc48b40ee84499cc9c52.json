{"ast":null,"code":"// Burger King Restaurant API Integration Service\n// This service provides multiple ways to get Burger King's menu data\n\n// Base configuration\nconst BURGER_KING_CONFIG = {\n  name: 'Burger King',\n  location: 'Multiple locations across Kenya',\n  phone: '+254 20 777 8888',\n  website: 'https://www.burgerking.co.ke',\n  coordinates: {\n    lat: -1.2921,\n    lng: 36.8219\n  },\n  // Nairobi location\n  description: 'Home of the Whopper! Serving flame-grilled burgers, crispy chicken, and delicious fast food favorites',\n  founded: 1954,\n  branches: 15,\n  specialties: ['Flame-Grilled Burgers', 'Whopper', 'Chicken', 'Fries', 'Beverages', 'Breakfast', 'Delivery']\n};\n\n// Option 1: Direct API endpoints (if Burger King has them)\nconst BURGER_KING_DIRECT_API = {\n  baseURL: 'https://api.burgerking.co.ke',\n  // Hypothetical API endpoint\n  endpoints: {\n    menu: '/api/v1/menu',\n    promotions: '/api/v1/promotions',\n    locations: '/api/v1/locations',\n    delivery: '/api/v1/delivery',\n    deals: '/api/v1/deals',\n    rewards: '/api/v1/rewards',\n    customization: '/api/v1/customization'\n  }\n};\n\n// Option 2: Jumia Food API integration\nconst JUMIA_FOOD_API = {\n  baseURL: 'https://food.jumia.co.ke/api',\n  endpoints: {\n    search: '/restaurants/search',\n    menu: '/restaurants/{id}/menu',\n    categories: '/categories'\n  },\n  headers: {\n    'Authorization': 'Bearer YOUR_JUMIA_API_KEY',\n    'Content-Type': 'application/json'\n  }\n};\n\n// Option 3: Glovo API integration\nconst GLOVO_API = {\n  baseURL: 'https://api.glovoapp.com',\n  endpoints: {\n    restaurants: '/v3/restaurants',\n    menu: '/v3/restaurants/{id}/menu',\n    categories: '/v3/categories'\n  },\n  headers: {\n    'Authorization': 'Bearer YOUR_GLOVO_API_KEY',\n    'Content-Type': 'application/json'\n  }\n};\n\n// TheMealDB API for real burger data\nconst THEMEALDB_API = {\n  baseURL: 'https://www.themealdb.com/api/json/v1/1',\n  endpoints: {\n    burgers: '/search.php?s=burger'\n  }\n};\n\n// Main API functions\nexport const burgerKingAPI = {\n  // Get full menu with real-time data\n  async getFullMenu() {\n    try {\n      // Try TheMealDB API first for real burger data\n      const realBurgerMenu = await this.getRealBurgerMenu();\n      if (realBurgerMenu) return realBurgerMenu;\n\n      // Fallback to enhanced mock data\n      return this.getEnhancedMockMenu();\n    } catch (error) {\n      console.error('Error fetching Burger King menu:', error);\n      return this.getEnhancedMockMenu();\n    }\n  },\n  // Try direct Burger King API\n  async getDirectMenu() {\n    try {\n      const response = await fetch(`${BURGER_KING_DIRECT_API.baseURL}${BURGER_KING_DIRECT_API.endpoints.menu}`);\n      if (response.ok) {\n        const data = await response.json();\n        return this.transformDirectMenuData(data);\n      }\n    } catch (error) {\n      console.log('Direct API not available, trying alternatives...');\n    }\n    return null;\n  },\n  // Try Jumia Food API\n  async getJumiaMenu() {\n    try {\n      // Search for Burger King on Jumia Food\n      const searchResponse = await fetch(`${JUMIA_FOOD_API.baseURL}${JUMIA_FOOD_API.endpoints.search}?q=burger king`, {\n        headers: JUMIA_FOOD_API.headers\n      });\n      if (searchResponse.ok) {\n        const searchData = await searchResponse.json();\n        const burgerKingId = this.findBurgerKingId(searchData);\n        if (burgerKingId) {\n          const menuResponse = await fetch(`${JUMIA_FOOD_API.baseURL}${JUMIA_FOOD_API.endpoints.menu.replace('{id}', burgerKingId)}`, {\n            headers: JUMIA_FOOD_API.headers\n          });\n          if (menuResponse.ok) {\n            const menuData = await menuResponse.json();\n            return this.transformJumiaMenuData(menuData);\n          }\n        }\n      }\n    } catch (error) {\n      console.log('Jumia Food API not available, trying alternatives...');\n    }\n    return null;\n  },\n  // Try Glovo API\n  async getGlovoMenu() {\n    try {\n      // Search for Burger King on Glovo\n      const searchResponse = await fetch(`${GLOVO_API.baseURL}${GLOVO_API.endpoints.restaurants}?search=burger king`, {\n        headers: GLOVO_API.headers\n      });\n      if (searchResponse.ok) {\n        const searchData = await searchResponse.json();\n        const burgerKingId = this.findBurgerKingId(searchData);\n        if (burgerKingId) {\n          const menuResponse = await fetch(`${GLOVO_API.baseURL}${GLOVO_API.endpoints.menu.replace('{id}', burgerKingId)}`, {\n            headers: GLOVO_API.headers\n          });\n          if (menuResponse.ok) {\n            const menuData = await menuResponse.json();\n            return this.transformGlovoMenuData(menuData);\n          }\n        }\n      }\n    } catch (error) {\n      console.log('Glovo API not available, using fallback...');\n    }\n    return null;\n  },\n  // Get real burger data from TheMealDB API\n  async getRealBurgerMenu() {\n    try {\n      console.log('🍔 Fetching real burger data from TheMealDB API...');\n      const response = await fetch(`${THEMEALDB_API.baseURL}${THEMEALDB_API.endpoints.burgers}`);\n      if (!response.ok) {\n        throw new Error(`TheMealDB API request failed: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('✅ TheMealDB API response:', data);\n      if (data.meals && data.meals.length > 0) {\n        const burgers = data.meals.map((meal, index) => ({\n          id: meal.idMeal || `burger-${index}`,\n          name: meal.strMeal || 'Burger',\n          description: this.generateDescription(meal.strMeal, meal.strCategory, meal.strArea),\n          price: this.generatePrice(600, 1200),\n          image: meal.strMealThumb || '/images/food/placeholder-food.jpg',\n          category: 'Burgers',\n          calories: this.generateCalories(300, 800),\n          serves: '1 person',\n          preparationTime: '20-35 min',\n          isPromo: Math.random() > 0.7,\n          promoText: 'Flame-Grilled Deal!',\n          signature: Math.random() > 0.8,\n          vegetarian: this.isVegetarian(meal.strMeal, meal.strCategory),\n          allergens: ['Gluten', 'Dairy', 'Eggs', 'Soy'],\n          tags: this.generateTags(meal.strMeal, meal.strCategory, meal.strArea),\n          size: this.generateSize(),\n          crust: null,\n          spiceLevel: this.generateSpiceLevel(meal.strMeal),\n          originalPrice: null,\n          ingredients: this.extractIngredients(meal),\n          instructions: meal.strInstructions,\n          youtube: meal.strYoutube,\n          source: meal.strSource\n        }));\n        console.log('🍔 Transformed burgers:', burgers);\n        return {\n          restaurant: BURGER_KING_CONFIG,\n          menu: burgers,\n          categories: {\n            'Burgers': burgers\n          },\n          customization: {\n            available: true,\n            options: {\n              patty: ['Beef', 'Chicken', 'Lamb', 'Veggie', 'Fish'],\n              cheese: ['American', 'Swiss', 'Cheddar', 'Pepper Jack', 'Blue Cheese'],\n              toppings: ['Lettuce', 'Tomato', 'Onion', 'Pickles', 'Bacon', 'Mushrooms'],\n              sauces: ['Ketchup', 'Mustard', 'Mayo', 'BBQ', 'Ranch', 'Hot Sauce'],\n              sides: ['French Fries', 'Onion Rings', 'Chicken Nuggets', 'Salad']\n            }\n          },\n          deals: ['2 for 1 Whopper on Wednesdays', 'Student Discount 20% off', 'Family Pack: 4 burgers + 4 fries + 4 drinks for KES 2,800'],\n          rewards: {\n            available: true,\n            program: 'BK Rewards',\n            benefits: ['Earn points on every purchase', 'Free burger after 6 visits', 'Birthday month special offers', 'Exclusive member-only deals']\n          },\n          locations: ['Westlands Mall', 'Two Rivers Mall', 'The Hub Karen', 'Galleria Mall', 'Sarit Centre', 'Yaya Centre', 'Nakumatt Mega']\n        };\n      }\n      console.log('❌ No valid burger data found in TheMealDB response');\n      return null;\n    } catch (error) {\n      console.error('❌ Error fetching real burger data:', error);\n      return null;\n    }\n  },\n  // Generate description based on meal data\n  generateDescription(mealName, category, area) {\n    if (category === 'Lamb') {\n      return `Delicious ${mealName} - a premium lamb burger with authentic ${area} flavors`;\n    } else if (category === 'Chicken') {\n      return `Tasty ${mealName} - a juicy chicken burger with fresh ingredients`;\n    } else {\n      return `Amazing ${mealName} - a classic burger with premium quality ingredients`;\n    }\n  },\n  // Generate random price between min and max\n  generatePrice(min, max) {\n    const price = Math.floor(Math.random() * (max - min + 1)) + min;\n    return `KES ${price.toLocaleString()}`;\n  },\n  // Generate random calories between min and max\n  generateCalories(min, max) {\n    return Math.floor(Math.random() * (min - max + 1)) + min;\n  },\n  // Check if burger is vegetarian based on name and category\n  isVegetarian(mealName, category) {\n    const vegetarianKeywords = ['veggie', 'vegetarian', 'vegan', 'bean', 'lentil', 'mushroom'];\n    return vegetarianKeywords.some(keyword => mealName.toLowerCase().includes(keyword) || category.toLowerCase().includes(keyword));\n  },\n  // Generate tags based on burger data\n  generateTags(mealName, category, area) {\n    const tags = ['Flame-Grilled', 'Premium', 'Fresh'];\n    if (category === 'Lamb') tags.push('Lamb', 'Gourmet');\n    if (category === 'Chicken') tags.push('Chicken', 'Healthy');\n    if (area === 'Greek') tags.push('Greek', 'Mediterranean');\n    if (area === 'American') tags.push('American', 'Classic');\n    if (mealName.toLowerCase().includes('halloumi')) tags.push('Halloumi', 'Cheese');\n    return tags.slice(0, 6); // Return max 6 tags\n  },\n  // Generate random size\n  generateSize() {\n    const sizes = ['Regular', 'Large', 'King Size'];\n    return sizes[Math.floor(Math.random() * sizes.length)];\n  },\n  // Generate spice level based on meal name\n  generateSpiceLevel(mealName) {\n    const spicyKeywords = ['hot', 'spicy', 'chilli', 'pepper', 'jalapeno'];\n    if (spicyKeywords.some(keyword => mealName.toLowerCase().includes(keyword))) {\n      return 'Medium';\n    }\n    return 'None';\n  },\n  // Extract ingredients from meal data\n  extractIngredients(meal) {\n    const ingredients = [];\n    for (let i = 1; i <= 20; i++) {\n      const ingredient = meal[`strIngredient${i}`];\n      const measure = meal[`strMeasure${i}`];\n      if (ingredient && ingredient.trim() !== '') {\n        ingredients.push({\n          name: ingredient.trim(),\n          measure: measure ? measure.trim() : ''\n        });\n      }\n    }\n    return ingredients;\n  },\n  // Enhanced mock menu with realistic Burger King data\n  getEnhancedMockMenu() {\n    return {\n      restaurant: BURGER_KING_CONFIG,\n      categories: {\n        'Signature Burgers': [{\n          id: 'sb-001',\n          name: 'Whopper',\n          price: 'KES 650',\n          description: 'Flame-grilled beef patty with fresh lettuce, tomatoes, mayo, pickles, and onions on a sesame seed bun',\n          category: 'Signature Burgers',\n          image: '/images/food/burger-king-whopper.jpg',\n          isPromo: true,\n          promoText: 'Iconic',\n          calories: '660',\n          serves: '1 person',\n          allergens: ['Gluten', 'Dairy', 'Beef', 'Sesame'],\n          preparationTime: '8-12 min',\n          spiceLevel: 'Mild',\n          tags: ['Signature', 'Flame-Grilled', 'Iconic'],\n          vegetarian: false,\n          signature: true,\n          size: 'Regular',\n          patty: 'Flame-Grilled Beef'\n        }, {\n          id: 'sb-002',\n          name: 'Double Whopper',\n          price: 'KES 850',\n          description: 'Two flame-grilled beef patties with fresh lettuce, tomatoes, mayo, pickles, and onions',\n          category: 'Signature Burgers',\n          image: '/images/food/burger-king-double-whopper.jpg',\n          isPromo: false,\n          calories: '980',\n          serves: '1 person',\n          allergens: ['Gluten', 'Dairy', 'Beef', 'Sesame'],\n          preparationTime: '10-15 min',\n          spiceLevel: 'Mild',\n          tags: ['Signature', 'Double Patty', 'Flame-Grilled'],\n          vegetarian: false,\n          signature: true,\n          size: 'Regular',\n          patty: 'Flame-Grilled Beef'\n        }, {\n          id: 'sb-003',\n          name: 'Bacon King',\n          price: 'KES 750',\n          description: 'Flame-grilled beef patty with crispy bacon, cheese, lettuce, tomatoes, and special sauce',\n          category: 'Signature Burgers',\n          image: '/images/food/burger-king-bacon-king.jpg',\n          isPromo: false,\n          calories: '720',\n          serves: '1 person',\n          allergens: ['Gluten', 'Dairy', 'Beef', 'Pork', 'Sesame'],\n          preparationTime: '8-12 min',\n          spiceLevel: 'Mild',\n          tags: ['Signature', 'Bacon', 'Cheese'],\n          vegetarian: false,\n          signature: false,\n          size: 'Regular',\n          patty: 'Flame-Grilled Beef'\n        }],\n        'Chicken Sandwiches': [{\n          id: 'cs-001',\n          name: 'Crispy Chicken Sandwich',\n          price: 'KES 550',\n          description: 'Crispy breaded chicken fillet with lettuce, tomatoes, and mayo on a toasted bun',\n          category: 'Chicken Sandwiches',\n          image: '/images/food/burger-king-crispy-chicken.jpg',\n          isPromo: false,\n          calories: '580',\n          serves: '1 person',\n          allergens: ['Gluten', 'Dairy', 'Chicken', 'Eggs'],\n          preparationTime: '6-10 min',\n          spiceLevel: 'Mild',\n          tags: ['Chicken', 'Crispy', 'Breaded'],\n          vegetarian: false,\n          signature: false,\n          size: 'Regular',\n          patty: 'Crispy Chicken'\n        }, {\n          id: 'cs-002',\n          name: 'Spicy Crispy Chicken',\n          price: 'KES 580',\n          description: 'Spicy breaded chicken fillet with lettuce, tomatoes, and spicy mayo',\n          category: 'Chicken Sandwiches',\n          image: '/images/food/burger-king-spicy-chicken.jpg',\n          isPromo: false,\n          calories: '600',\n          serves: '1 person',\n          allergens: ['Gluten', 'Dairy', 'Chicken', 'Eggs'],\n          preparationTime: '6-10 min',\n          spiceLevel: 'Medium',\n          tags: ['Chicken', 'Spicy', 'Crispy'],\n          vegetarian: false,\n          signature: false,\n          size: 'Regular',\n          patty: 'Spicy Chicken'\n        }],\n        'Value Menu': [{\n          id: 'vm-001',\n          name: 'Cheeseburger',\n          price: 'KES 350',\n          description: 'Flame-grilled beef patty with cheese, pickles, ketchup, and mustard',\n          category: 'Value Menu',\n          image: '/images/food/burger-king-cheeseburger.jpg',\n          isPromo: false,\n          calories: '310',\n          serves: '1 person',\n          allergens: ['Gluten', 'Dairy', 'Beef', 'Sesame'],\n          preparationTime: '5-8 min',\n          spiceLevel: 'Mild',\n          tags: ['Value', 'Classic', 'Cheese'],\n          vegetarian: false,\n          signature: false,\n          size: 'Regular',\n          patty: 'Flame-Grilled Beef'\n        }, {\n          id: 'vm-002',\n          name: 'Hamburger',\n          price: 'KES 280',\n          description: 'Flame-grilled beef patty with pickles, ketchup, and mustard',\n          category: 'Value Menu',\n          image: '/images/food/burger-king-hamburger.jpg',\n          isPromo: false,\n          calories: '250',\n          serves: '1 person',\n          allergens: ['Gluten', 'Beef', 'Sesame'],\n          preparationTime: '5-8 min',\n          spiceLevel: 'Mild',\n          tags: ['Value', 'Classic', 'Simple'],\n          vegetarian: false,\n          signature: false,\n          size: 'Regular',\n          patty: 'Flame-Grilled Beef'\n        }],\n        'Sides & Snacks': [{\n          id: 'ss-001',\n          name: 'French Fries (Medium)',\n          price: 'KES 180',\n          description: 'Crispy golden fries seasoned with salt',\n          category: 'Sides & Snacks',\n          image: '/images/food/burger-king-fries.jpg',\n          isPromo: false,\n          calories: '380',\n          serves: '1 person',\n          allergens: ['Potatoes'],\n          preparationTime: '3-5 min',\n          spiceLevel: 'None',\n          tags: ['Fries', 'Crispy', 'Golden'],\n          vegetarian: true,\n          signature: false\n        }, {\n          id: 'ss-002',\n          name: 'Onion Rings (6 Pcs)',\n          price: 'KES 220',\n          description: 'Crispy breaded onion rings served with dipping sauce',\n          category: 'Sides & Snacks',\n          image: '/images/food/burger-king-onion-rings.jpg',\n          isPromo: false,\n          calories: '320',\n          serves: '1 person',\n          allergens: ['Gluten', 'Onions'],\n          preparationTime: '4-6 min',\n          spiceLevel: 'None',\n          tags: ['Onion Rings', 'Crispy', 'Breaded'],\n          vegetarian: true,\n          signature: false\n        }, {\n          id: 'ss-003',\n          name: 'Chicken Nuggets (8 Pcs)',\n          price: 'KES 280',\n          description: 'Breaded chicken nuggets served with your choice of dipping sauce',\n          category: 'Sides & Snacks',\n          image: '/images/food/burger-king-chicken-nuggets.jpg',\n          isPromo: false,\n          calories: '360',\n          serves: '1 person',\n          allergens: ['Gluten', 'Chicken', 'Eggs'],\n          preparationTime: '4-6 min',\n          spiceLevel: 'None',\n          tags: ['Chicken', 'Nuggets', 'Breaded'],\n          vegetarian: false,\n          signature: false\n        }],\n        'Breakfast': [{\n          id: 'bf-001',\n          name: 'Croissan\\'wich',\n          price: 'KES 420',\n          description: 'Fluffy croissant with egg, cheese, and your choice of bacon, ham, or sausage',\n          category: 'Breakfast',\n          image: '/images/food/burger-king-croissanwich.jpg',\n          isPromo: false,\n          calories: '320',\n          serves: '1 person',\n          allergens: ['Gluten', 'Dairy', 'Eggs', 'Pork'],\n          preparationTime: '5-8 min',\n          spiceLevel: 'None',\n          tags: ['Breakfast', 'Croissant', 'Egg & Cheese'],\n          vegetarian: false,\n          signature: false\n        }, {\n          id: 'bf-002',\n          name: 'Breakfast Burrito',\n          price: 'KES 380',\n          description: 'Flour tortilla filled with scrambled eggs, cheese, and your choice of meat',\n          category: 'Breakfast',\n          image: '/images/food/burger-king-breakfast-burrito.jpg',\n          isPromo: false,\n          calories: '280',\n          serves: '1 person',\n          allergens: ['Gluten', 'Dairy', 'Eggs'],\n          preparationTime: '5-8 min',\n          spiceLevel: 'None',\n          tags: ['Breakfast', 'Burrito', 'Egg & Cheese'],\n          vegetarian: false,\n          signature: false\n        }],\n        'Desserts': [{\n          id: 'ds-001',\n          name: 'Oreo Shake',\n          price: 'KES 320',\n          description: 'Creamy vanilla shake blended with Oreo cookie pieces',\n          category: 'Desserts',\n          image: '/images/food/burger-king-oreo-shake.jpg',\n          isPromo: false,\n          calories: '580',\n          serves: '1 person',\n          allergens: ['Dairy', 'Oreo Cookies'],\n          preparationTime: '3-5 min',\n          spiceLevel: 'None',\n          tags: ['Shake', 'Oreo', 'Creamy'],\n          vegetarian: true,\n          signature: false\n        }, {\n          id: 'ds-002',\n          name: 'Chocolate Sundae',\n          price: 'KES 180',\n          description: 'Vanilla soft serve topped with rich chocolate sauce',\n          category: 'Desserts',\n          image: '/images/food/burger-king-chocolate-sundae.jpg',\n          isPromo: false,\n          calories: '280',\n          serves: '1 person',\n          allergens: ['Dairy', 'Chocolate'],\n          preparationTime: '2-3 min',\n          spiceLevel: 'None',\n          tags: ['Sundae', 'Chocolate', 'Soft Serve'],\n          vegetarian: true,\n          signature: false\n        }],\n        'Beverages': [{\n          id: 'bv-001',\n          name: 'Coca Cola (Medium)',\n          price: 'KES 120',\n          description: 'Refreshing Coca Cola soft drink',\n          category: 'Beverages',\n          image: '/images/food/burger-king-coca-cola.jpg',\n          isPromo: false,\n          calories: '210',\n          serves: '1 person',\n          allergens: ['None'],\n          preparationTime: '1-2 min',\n          spiceLevel: 'None',\n          tags: ['Soft Drink', 'Refreshing', 'Classic'],\n          vegetarian: true,\n          signature: false\n        }, {\n          id: 'bv-002',\n          name: 'Sprite (Medium)',\n          price: 'KES 120',\n          description: 'Clear lemon-lime soft drink',\n          category: 'Beverages',\n          image: '/images/food/burger-king-sprite.jpg',\n          isPromo: false,\n          calories: '200',\n          serves: '1 person',\n          allergens: ['None'],\n          preparationTime: '1-2 min',\n          spiceLevel: 'None',\n          tags: ['Soft Drink', 'Lemon-Lime', 'Clear'],\n          vegetarian: true,\n          signature: false\n        }, {\n          id: 'bv-003',\n          name: 'Fanta Orange (Medium)',\n          price: 'KES 120',\n          description: 'Refreshing orange-flavored soft drink',\n          category: 'Beverages',\n          image: '/images/food/burger-king-fanta.jpg',\n          isPromo: false,\n          calories: '220',\n          serves: '1 person',\n          allergens: ['None'],\n          preparationTime: '1-2 min',\n          spiceLevel: 'None',\n          tags: ['Soft Drink', 'Orange', 'Fruity'],\n          vegetarian: true,\n          signature: false\n        }]\n      },\n      promotions: [{\n        id: 'promo-001',\n        title: '2 for KES 1,000',\n        description: 'Get any 2 Whoppers for only KES 1,000 (Save up to KES 300)',\n        discount: 'Save up to KES 300',\n        validUntil: '2024-12-31',\n        code: '2FOR1000',\n        timing: 'Available Daily'\n      }, {\n        id: 'promo-002',\n        title: 'Value Menu Deal',\n        description: 'Cheeseburger + Fries + Drink for only KES 500',\n        discount: 'Save KES 150',\n        validUntil: '2024-12-31',\n        code: 'VALUEDEAL',\n        timing: 'Available Daily'\n      }, {\n        id: 'promo-003',\n        title: 'Breakfast Special',\n        description: 'Croissan\\'wich + Hash Browns + Coffee for only KES 600 (6 AM - 10 AM)',\n        discount: 'Save KES 200',\n        validUntil: '2024-12-31',\n        code: 'BREAKFASTSPECIAL',\n        timing: '6 AM - 10 AM Daily'\n      }],\n      deliveryInfo: {\n        available: true,\n        services: ['Jumia Food', 'Glovo', 'Uber Eats', 'Own Delivery'],\n        deliveryTime: '25-40 minutes',\n        deliveryFee: 'KES 150',\n        minimumOrder: 'KES 800',\n        freeDeliveryThreshold: 'KES 2,000'\n      },\n      locations: ['Westlands', 'CBD', 'Kilimani', 'Lavington', 'Karen', 'Mombasa Road', 'Thika Road', 'Nakuru', 'Mombasa', 'Kisumu'],\n      deals: ['2 for KES 1,000', 'Value Menu Deal', 'Breakfast Special', 'Student Discount', 'Happy Hour'],\n      rewards: {\n        available: true,\n        program: 'Burger King Rewards',\n        benefits: ['Points on every order', 'Free Whopper on birthday', 'Exclusive member deals', 'Early access to promotions']\n      },\n      customization: {\n        available: true,\n        options: {\n          patties: ['Single', 'Double', 'Triple'],\n          cheeses: ['American', 'Cheddar', 'Swiss', 'Pepper Jack'],\n          toppings: ['Lettuce', 'Tomatoes', 'Onions', 'Pickles', 'Bacon', 'Mushrooms', 'Jalapeños'],\n          sauces: ['Mayo', 'Ketchup', 'Mustard', 'BBQ', 'Ranch', 'Spicy Mayo', 'Honey Mustard']\n        }\n      }\n    };\n  },\n  // Helper functions\n  findBurgerKingId(searchData) {\n    var _searchData$restauran;\n    // Logic to find Burger King's ID in search results\n    const burgerKing = (_searchData$restauran = searchData.restaurants) === null || _searchData$restauran === void 0 ? void 0 : _searchData$restauran.find(r => r.name.toLowerCase().includes('burger king') || r.name.toLowerCase().includes('bk'));\n    return burgerKing === null || burgerKing === void 0 ? void 0 : burgerKing.id;\n  },\n  transformDirectMenuData(data) {\n    // Transform direct API data to our format\n    return {\n      restaurant: BURGER_KING_CONFIG,\n      categories: data.categories || {},\n      promotions: data.promotions || [],\n      deliveryInfo: data.delivery || {},\n      locations: data.locations || [],\n      deals: data.deals || [],\n      rewards: data.rewards || {},\n      customization: data.customization || {}\n    };\n  },\n  transformJumiaMenuData(data) {\n    // Transform Jumia Food data to our format\n    return {\n      restaurant: BURGER_KING_CONFIG,\n      categories: this.groupByCategory(data.menu || []),\n      promotions: data.promotions || [],\n      deliveryInfo: {\n        available: true,\n        services: ['Jumia Food'],\n        deliveryTime: data.deliveryTime || '25-40 minutes',\n        deliveryFee: data.deliveryFee || 'KES 150',\n        minimumOrder: data.minimumOrder || 'KES 800'\n      },\n      locations: data.locations || [],\n      deals: data.deals || [],\n      rewards: data.rewards || {},\n      customization: data.customization || {}\n    };\n  },\n  transformGlovoMenuData(data) {\n    // Transform Glovo data to our format\n    return {\n      restaurant: BURGER_KING_CONFIG,\n      categories: this.groupByCategory(data.menu || []),\n      promotions: data.promotions || [],\n      deliveryInfo: {\n        available: true,\n        services: ['Glovo'],\n        deliveryTime: data.deliveryTime || '25-40 minutes',\n        deliveryFee: data.deliveryFee || 'KES 150',\n        minimumOrder: data.minimumOrder || 'KES 800'\n      },\n      locations: data.locations || [],\n      deals: data.deals || [],\n      rewards: data.rewards || {},\n      customization: data.customization || {}\n    };\n  },\n  groupByCategory(menuItems) {\n    // Group menu items by category\n    const categories = {};\n    menuItems.forEach(item => {\n      if (!categories[item.category]) {\n        categories[item.category] = [];\n      }\n      categories[item.category].push(item);\n    });\n    return categories;\n  },\n  // Get restaurant information\n  getRestaurantInfo() {\n    return BURGER_KING_CONFIG;\n  },\n  // Get current promotions\n  async getPromotions() {\n    try {\n      const response = await fetch(`${BURGER_KING_DIRECT_API.baseURL}${BURGER_KING_DIRECT_API.endpoints.promotions}`);\n      if (response.ok) {\n        return await response.json();\n      }\n    } catch (error) {\n      console.log('Using mock promotions');\n    }\n    return this.getEnhancedMockMenu().promotions;\n  },\n  // Check delivery availability\n  async checkDeliveryAvailability() {\n    try {\n      const response = await fetch(`${BURGER_KING_DIRECT_API.baseURL}${BURGER_KING_DIRECT_API.endpoints.delivery}`);\n      if (response.ok) {\n        return await response.json();\n      }\n    } catch (error) {\n      console.log('Using mock delivery info');\n    }\n    return this.getEnhancedMockMenu().deliveryInfo;\n  },\n  // Get deals\n  async getDeals() {\n    try {\n      const response = await fetch(`${BURGER_KING_DIRECT_API.baseURL}${BURGER_KING_DIRECT_API.endpoints.deals}`);\n      if (response.ok) {\n        return await response.json();\n      }\n    } catch (error) {\n      console.log('Using mock deals');\n    }\n    return this.getEnhancedMockMenu().deals;\n  },\n  // Get rewards info\n  async getRewards() {\n    try {\n      const response = await fetch(`${BURGER_KING_DIRECT_API.baseURL}${BURGER_KING_DIRECT_API.endpoints.rewards}`);\n      if (response.ok) {\n        return await response.json();\n      }\n    } catch (error) {\n      console.log('Using mock rewards info');\n    }\n    return this.getEnhancedMockMenu().rewards;\n  },\n  // Get customization options\n  async getCustomization() {\n    try {\n      const response = await fetch(`${BURGER_KING_DIRECT_API.baseURL}${BURGER_KING_DIRECT_API.endpoints.customization}`);\n      if (response.ok) {\n        return await response.json();\n      }\n    } catch (error) {\n      console.log('Using mock customization info');\n    }\n    return this.getEnhancedMockMenu().customization;\n  },\n  // Get all locations\n  async getLocations() {\n    try {\n      const response = await fetch(`${BURGER_KING_DIRECT_API.baseURL}${BURGER_KING_DIRECT_API.endpoints.locations}`);\n      if (response.ok) {\n        return await response.json();\n      }\n    } catch (error) {\n      console.log('Using mock locations');\n    }\n    return this.getEnhancedMockMenu().locations;\n  }\n};\nexport default burgerKingAPI;","map":{"version":3,"names":["BURGER_KING_CONFIG","name","location","phone","website","coordinates","lat","lng","description","founded","branches","specialties","BURGER_KING_DIRECT_API","baseURL","endpoints","menu","promotions","locations","delivery","deals","rewards","customization","JUMIA_FOOD_API","search","categories","headers","GLOVO_API","restaurants","THEMEALDB_API","burgers","burgerKingAPI","getFullMenu","realBurgerMenu","getRealBurgerMenu","getEnhancedMockMenu","error","console","getDirectMenu","response","fetch","ok","data","json","transformDirectMenuData","log","getJumiaMenu","searchResponse","searchData","burgerKingId","findBurgerKingId","menuResponse","replace","menuData","transformJumiaMenuData","getGlovoMenu","transformGlovoMenuData","Error","status","meals","length","map","meal","index","id","idMeal","strMeal","generateDescription","strCategory","strArea","price","generatePrice","image","strMealThumb","category","calories","generateCalories","serves","preparationTime","isPromo","Math","random","promoText","signature","vegetarian","isVegetarian","allergens","tags","generateTags","size","generateSize","crust","spiceLevel","generateSpiceLevel","originalPrice","ingredients","extractIngredients","instructions","strInstructions","youtube","strYoutube","source","strSource","restaurant","available","options","patty","cheese","toppings","sauces","sides","program","benefits","mealName","area","min","max","floor","toLocaleString","vegetarianKeywords","some","keyword","toLowerCase","includes","push","slice","sizes","spicyKeywords","i","ingredient","measure","trim","title","discount","validUntil","code","timing","deliveryInfo","services","deliveryTime","deliveryFee","minimumOrder","freeDeliveryThreshold","patties","cheeses","_searchData$restauran","burgerKing","find","r","groupByCategory","menuItems","forEach","item","getRestaurantInfo","getPromotions","checkDeliveryAvailability","getDeals","getRewards","getCustomization","getLocations"],"sources":["C:/Projects/gawa/frontend/src/api/burgerKingAPI.js"],"sourcesContent":["// Burger King Restaurant API Integration Service\r\n// This service provides multiple ways to get Burger King's menu data\r\n\r\n// Base configuration\r\nconst BURGER_KING_CONFIG = {\r\n  name: 'Burger King',\r\n  location: 'Multiple locations across Kenya',\r\n  phone: '+254 20 777 8888',\r\n  website: 'https://www.burgerking.co.ke',\r\n  coordinates: { lat: -1.2921, lng: 36.8219 }, // Nairobi location\r\n  description: 'Home of the Whopper! Serving flame-grilled burgers, crispy chicken, and delicious fast food favorites',\r\n  founded: 1954,\r\n  branches: 15,\r\n  specialties: ['Flame-Grilled Burgers', 'Whopper', 'Chicken', 'Fries', 'Beverages', 'Breakfast', 'Delivery']\r\n};\r\n\r\n// Option 1: Direct API endpoints (if Burger King has them)\r\nconst BURGER_KING_DIRECT_API = {\r\n  baseURL: 'https://api.burgerking.co.ke', // Hypothetical API endpoint\r\n  endpoints: {\r\n    menu: '/api/v1/menu',\r\n    promotions: '/api/v1/promotions',\r\n    locations: '/api/v1/locations',\r\n    delivery: '/api/v1/delivery',\r\n    deals: '/api/v1/deals',\r\n    rewards: '/api/v1/rewards',\r\n    customization: '/api/v1/customization'\r\n  }\r\n};\r\n\r\n// Option 2: Jumia Food API integration\r\nconst JUMIA_FOOD_API = {\r\n  baseURL: 'https://food.jumia.co.ke/api',\r\n  endpoints: {\r\n    search: '/restaurants/search',\r\n    menu: '/restaurants/{id}/menu',\r\n    categories: '/categories'\r\n  },\r\n  headers: {\r\n    'Authorization': 'Bearer YOUR_JUMIA_API_KEY',\r\n    'Content-Type': 'application/json'\r\n  }\r\n};\r\n\r\n// Option 3: Glovo API integration\r\nconst GLOVO_API = {\r\n  baseURL: 'https://api.glovoapp.com',\r\n  endpoints: {\r\n    restaurants: '/v3/restaurants',\r\n    menu: '/v3/restaurants/{id}/menu',\r\n    categories: '/v3/categories'\r\n  },\r\n  headers: {\r\n    'Authorization': 'Bearer YOUR_GLOVO_API_KEY',\r\n    'Content-Type': 'application/json'\r\n  }\r\n};\r\n\r\n// TheMealDB API for real burger data\r\nconst THEMEALDB_API = {\r\n  baseURL: 'https://www.themealdb.com/api/json/v1/1',\r\n  endpoints: {\r\n    burgers: '/search.php?s=burger'\r\n  }\r\n};\r\n\r\n// Main API functions\r\nexport const burgerKingAPI = {\r\n  // Get full menu with real-time data\r\n  async getFullMenu() {\r\n    try {\r\n      // Try TheMealDB API first for real burger data\r\n      const realBurgerMenu = await this.getRealBurgerMenu();\r\n      if (realBurgerMenu) return realBurgerMenu;\r\n\r\n      // Fallback to enhanced mock data\r\n      return this.getEnhancedMockMenu();\r\n    } catch (error) {\r\n      console.error('Error fetching Burger King menu:', error);\r\n      return this.getEnhancedMockMenu();\r\n    }\r\n  },\r\n\r\n  // Try direct Burger King API\r\n  async getDirectMenu() {\r\n    try {\r\n      const response = await fetch(`${BURGER_KING_DIRECT_API.baseURL}${BURGER_KING_DIRECT_API.endpoints.menu}`);\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        return this.transformDirectMenuData(data);\r\n      }\r\n    } catch (error) {\r\n      console.log('Direct API not available, trying alternatives...');\r\n    }\r\n    return null;\r\n  },\r\n\r\n  // Try Jumia Food API\r\n  async getJumiaMenu() {\r\n    try {\r\n      // Search for Burger King on Jumia Food\r\n      const searchResponse = await fetch(`${JUMIA_FOOD_API.baseURL}${JUMIA_FOOD_API.endpoints.search}?q=burger king`, {\r\n        headers: JUMIA_FOOD_API.headers\r\n      });\r\n      \r\n      if (searchResponse.ok) {\r\n        const searchData = await searchResponse.json();\r\n        const burgerKingId = this.findBurgerKingId(searchData);\r\n        \r\n        if (burgerKingId) {\r\n          const menuResponse = await fetch(`${JUMIA_FOOD_API.baseURL}${JUMIA_FOOD_API.endpoints.menu.replace('{id}', burgerKingId)}`, {\r\n            headers: JUMIA_FOOD_API.headers\r\n          });\r\n          \r\n          if (menuResponse.ok) {\r\n            const menuData = await menuResponse.json();\r\n            return this.transformJumiaMenuData(menuData);\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log('Jumia Food API not available, trying alternatives...');\r\n    }\r\n    return null;\r\n  },\r\n\r\n  // Try Glovo API\r\n  async getGlovoMenu() {\r\n    try {\r\n      // Search for Burger King on Glovo\r\n      const searchResponse = await fetch(`${GLOVO_API.baseURL}${GLOVO_API.endpoints.restaurants}?search=burger king`, {\r\n        headers: GLOVO_API.headers\r\n      });\r\n      \r\n      if (searchResponse.ok) {\r\n        const searchData = await searchResponse.json();\r\n        const burgerKingId = this.findBurgerKingId(searchData);\r\n        \r\n        if (burgerKingId) {\r\n          const menuResponse = await fetch(`${GLOVO_API.baseURL}${GLOVO_API.endpoints.menu.replace('{id}', burgerKingId)}`, {\r\n            headers: GLOVO_API.headers\r\n          });\r\n          \r\n          if (menuResponse.ok) {\r\n            const menuData = await menuResponse.json();\r\n            return this.transformGlovoMenuData(menuData);\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log('Glovo API not available, using fallback...');\r\n    }\r\n    return null;\r\n  },\r\n\r\n  // Get real burger data from TheMealDB API\r\n  async getRealBurgerMenu() {\r\n    try {\r\n      console.log('🍔 Fetching real burger data from TheMealDB API...');\r\n      \r\n      const response = await fetch(`${THEMEALDB_API.baseURL}${THEMEALDB_API.endpoints.burgers}`);\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`TheMealDB API request failed: ${response.status}`);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      console.log('✅ TheMealDB API response:', data);\r\n      \r\n      if (data.meals && data.meals.length > 0) {\r\n        const burgers = data.meals.map((meal, index) => ({\r\n          id: meal.idMeal || `burger-${index}`,\r\n          name: meal.strMeal || 'Burger',\r\n          description: this.generateDescription(meal.strMeal, meal.strCategory, meal.strArea),\r\n          price: this.generatePrice(600, 1200),\r\n          image: meal.strMealThumb || '/images/food/placeholder-food.jpg',\r\n          category: 'Burgers',\r\n          calories: this.generateCalories(300, 800),\r\n          serves: '1 person',\r\n          preparationTime: '20-35 min',\r\n          isPromo: Math.random() > 0.7,\r\n          promoText: 'Flame-Grilled Deal!',\r\n          signature: Math.random() > 0.8,\r\n          vegetarian: this.isVegetarian(meal.strMeal, meal.strCategory),\r\n          allergens: ['Gluten', 'Dairy', 'Eggs', 'Soy'],\r\n          tags: this.generateTags(meal.strMeal, meal.strCategory, meal.strArea),\r\n          size: this.generateSize(),\r\n          crust: null,\r\n          spiceLevel: this.generateSpiceLevel(meal.strMeal),\r\n          originalPrice: null,\r\n          ingredients: this.extractIngredients(meal),\r\n          instructions: meal.strInstructions,\r\n          youtube: meal.strYoutube,\r\n          source: meal.strSource\r\n        }));\r\n        \r\n        console.log('🍔 Transformed burgers:', burgers);\r\n        \r\n        return {\r\n          restaurant: BURGER_KING_CONFIG,\r\n          menu: burgers,\r\n          categories: {\r\n            'Burgers': burgers\r\n          },\r\n          customization: {\r\n            available: true,\r\n            options: {\r\n              patty: ['Beef', 'Chicken', 'Lamb', 'Veggie', 'Fish'],\r\n              cheese: ['American', 'Swiss', 'Cheddar', 'Pepper Jack', 'Blue Cheese'],\r\n              toppings: ['Lettuce', 'Tomato', 'Onion', 'Pickles', 'Bacon', 'Mushrooms'],\r\n              sauces: ['Ketchup', 'Mustard', 'Mayo', 'BBQ', 'Ranch', 'Hot Sauce'],\r\n              sides: ['French Fries', 'Onion Rings', 'Chicken Nuggets', 'Salad']\r\n            }\r\n          },\r\n          deals: [\r\n            '2 for 1 Whopper on Wednesdays',\r\n            'Student Discount 20% off',\r\n            'Family Pack: 4 burgers + 4 fries + 4 drinks for KES 2,800'\r\n          ],\r\n          rewards: {\r\n            available: true,\r\n            program: 'BK Rewards',\r\n            benefits: [\r\n              'Earn points on every purchase',\r\n              'Free burger after 6 visits',\r\n              'Birthday month special offers',\r\n              'Exclusive member-only deals'\r\n            ]\r\n          },\r\n          locations: [\r\n            'Westlands Mall',\r\n            'Two Rivers Mall',\r\n            'The Hub Karen',\r\n            'Galleria Mall',\r\n            'Sarit Centre',\r\n            'Yaya Centre',\r\n            'Nakumatt Mega'\r\n          ]\r\n        };\r\n      }\r\n      \r\n      console.log('❌ No valid burger data found in TheMealDB response');\r\n      return null;\r\n      \r\n    } catch (error) {\r\n      console.error('❌ Error fetching real burger data:', error);\r\n      return null;\r\n    }\r\n  },\r\n\r\n  // Generate description based on meal data\r\n  generateDescription(mealName, category, area) {\r\n    if (category === 'Lamb') {\r\n      return `Delicious ${mealName} - a premium lamb burger with authentic ${area} flavors`;\r\n    } else if (category === 'Chicken') {\r\n      return `Tasty ${mealName} - a juicy chicken burger with fresh ingredients`;\r\n    } else {\r\n      return `Amazing ${mealName} - a classic burger with premium quality ingredients`;\r\n    }\r\n  },\r\n\r\n  // Generate random price between min and max\r\n  generatePrice(min, max) {\r\n    const price = Math.floor(Math.random() * (max - min + 1)) + min;\r\n    return `KES ${price.toLocaleString()}`;\r\n  },\r\n\r\n  // Generate random calories between min and max\r\n  generateCalories(min, max) {\r\n    return Math.floor(Math.random() * (min - max + 1)) + min;\r\n  },\r\n\r\n  // Check if burger is vegetarian based on name and category\r\n  isVegetarian(mealName, category) {\r\n    const vegetarianKeywords = ['veggie', 'vegetarian', 'vegan', 'bean', 'lentil', 'mushroom'];\r\n    return vegetarianKeywords.some(keyword => \r\n      mealName.toLowerCase().includes(keyword) || category.toLowerCase().includes(keyword)\r\n    );\r\n  },\r\n\r\n  // Generate tags based on burger data\r\n  generateTags(mealName, category, area) {\r\n    const tags = ['Flame-Grilled', 'Premium', 'Fresh'];\r\n    \r\n    if (category === 'Lamb') tags.push('Lamb', 'Gourmet');\r\n    if (category === 'Chicken') tags.push('Chicken', 'Healthy');\r\n    if (area === 'Greek') tags.push('Greek', 'Mediterranean');\r\n    if (area === 'American') tags.push('American', 'Classic');\r\n    if (mealName.toLowerCase().includes('halloumi')) tags.push('Halloumi', 'Cheese');\r\n    \r\n    return tags.slice(0, 6); // Return max 6 tags\r\n  },\r\n\r\n  // Generate random size\r\n  generateSize() {\r\n    const sizes = ['Regular', 'Large', 'King Size'];\r\n    return sizes[Math.floor(Math.random() * sizes.length)];\r\n  },\r\n\r\n  // Generate spice level based on meal name\r\n  generateSpiceLevel(mealName) {\r\n    const spicyKeywords = ['hot', 'spicy', 'chilli', 'pepper', 'jalapeno'];\r\n    if (spicyKeywords.some(keyword => mealName.toLowerCase().includes(keyword))) {\r\n      return 'Medium';\r\n    }\r\n    return 'None';\r\n  },\r\n\r\n  // Extract ingredients from meal data\r\n  extractIngredients(meal) {\r\n    const ingredients = [];\r\n    for (let i = 1; i <= 20; i++) {\r\n      const ingredient = meal[`strIngredient${i}`];\r\n      const measure = meal[`strMeasure${i}`];\r\n      if (ingredient && ingredient.trim() !== '') {\r\n        ingredients.push({\r\n          name: ingredient.trim(),\r\n          measure: measure ? measure.trim() : ''\r\n        });\r\n      }\r\n    }\r\n    return ingredients;\r\n  },\r\n\r\n  // Enhanced mock menu with realistic Burger King data\r\n  getEnhancedMockMenu() {\r\n    return {\r\n      restaurant: BURGER_KING_CONFIG,\r\n      categories: {\r\n        'Signature Burgers': [\r\n          {\r\n            id: 'sb-001',\r\n            name: 'Whopper',\r\n            price: 'KES 650',\r\n            description: 'Flame-grilled beef patty with fresh lettuce, tomatoes, mayo, pickles, and onions on a sesame seed bun',\r\n            category: 'Signature Burgers',\r\n            image: '/images/food/burger-king-whopper.jpg',\r\n            isPromo: true,\r\n            promoText: 'Iconic',\r\n            calories: '660',\r\n            serves: '1 person',\r\n            allergens: ['Gluten', 'Dairy', 'Beef', 'Sesame'],\r\n            preparationTime: '8-12 min',\r\n            spiceLevel: 'Mild',\r\n            tags: ['Signature', 'Flame-Grilled', 'Iconic'],\r\n            vegetarian: false,\r\n            signature: true,\r\n            size: 'Regular',\r\n            patty: 'Flame-Grilled Beef'\r\n          },\r\n          {\r\n            id: 'sb-002',\r\n            name: 'Double Whopper',\r\n            price: 'KES 850',\r\n            description: 'Two flame-grilled beef patties with fresh lettuce, tomatoes, mayo, pickles, and onions',\r\n            category: 'Signature Burgers',\r\n            image: '/images/food/burger-king-double-whopper.jpg',\r\n            isPromo: false,\r\n            calories: '980',\r\n            serves: '1 person',\r\n            allergens: ['Gluten', 'Dairy', 'Beef', 'Sesame'],\r\n            preparationTime: '10-15 min',\r\n            spiceLevel: 'Mild',\r\n            tags: ['Signature', 'Double Patty', 'Flame-Grilled'],\r\n            vegetarian: false,\r\n            signature: true,\r\n            size: 'Regular',\r\n            patty: 'Flame-Grilled Beef'\r\n          },\r\n          {\r\n            id: 'sb-003',\r\n            name: 'Bacon King',\r\n            price: 'KES 750',\r\n            description: 'Flame-grilled beef patty with crispy bacon, cheese, lettuce, tomatoes, and special sauce',\r\n            category: 'Signature Burgers',\r\n            image: '/images/food/burger-king-bacon-king.jpg',\r\n            isPromo: false,\r\n            calories: '720',\r\n            serves: '1 person',\r\n            allergens: ['Gluten', 'Dairy', 'Beef', 'Pork', 'Sesame'],\r\n            preparationTime: '8-12 min',\r\n            spiceLevel: 'Mild',\r\n            tags: ['Signature', 'Bacon', 'Cheese'],\r\n            vegetarian: false,\r\n            signature: false,\r\n            size: 'Regular',\r\n            patty: 'Flame-Grilled Beef'\r\n          }\r\n        ],\r\n        'Chicken Sandwiches': [\r\n          {\r\n            id: 'cs-001',\r\n            name: 'Crispy Chicken Sandwich',\r\n            price: 'KES 550',\r\n            description: 'Crispy breaded chicken fillet with lettuce, tomatoes, and mayo on a toasted bun',\r\n            category: 'Chicken Sandwiches',\r\n            image: '/images/food/burger-king-crispy-chicken.jpg',\r\n            isPromo: false,\r\n            calories: '580',\r\n            serves: '1 person',\r\n            allergens: ['Gluten', 'Dairy', 'Chicken', 'Eggs'],\r\n            preparationTime: '6-10 min',\r\n            spiceLevel: 'Mild',\r\n            tags: ['Chicken', 'Crispy', 'Breaded'],\r\n            vegetarian: false,\r\n            signature: false,\r\n            size: 'Regular',\r\n            patty: 'Crispy Chicken'\r\n          },\r\n          {\r\n            id: 'cs-002',\r\n            name: 'Spicy Crispy Chicken',\r\n            price: 'KES 580',\r\n            description: 'Spicy breaded chicken fillet with lettuce, tomatoes, and spicy mayo',\r\n            category: 'Chicken Sandwiches',\r\n            image: '/images/food/burger-king-spicy-chicken.jpg',\r\n            isPromo: false,\r\n            calories: '600',\r\n            serves: '1 person',\r\n            allergens: ['Gluten', 'Dairy', 'Chicken', 'Eggs'],\r\n            preparationTime: '6-10 min',\r\n            spiceLevel: 'Medium',\r\n            tags: ['Chicken', 'Spicy', 'Crispy'],\r\n            vegetarian: false,\r\n            signature: false,\r\n            size: 'Regular',\r\n            patty: 'Spicy Chicken'\r\n          }\r\n        ],\r\n        'Value Menu': [\r\n          {\r\n            id: 'vm-001',\r\n            name: 'Cheeseburger',\r\n            price: 'KES 350',\r\n            description: 'Flame-grilled beef patty with cheese, pickles, ketchup, and mustard',\r\n            category: 'Value Menu',\r\n            image: '/images/food/burger-king-cheeseburger.jpg',\r\n            isPromo: false,\r\n            calories: '310',\r\n            serves: '1 person',\r\n            allergens: ['Gluten', 'Dairy', 'Beef', 'Sesame'],\r\n            preparationTime: '5-8 min',\r\n            spiceLevel: 'Mild',\r\n            tags: ['Value', 'Classic', 'Cheese'],\r\n            vegetarian: false,\r\n            signature: false,\r\n            size: 'Regular',\r\n            patty: 'Flame-Grilled Beef'\r\n          },\r\n          {\r\n            id: 'vm-002',\r\n            name: 'Hamburger',\r\n            price: 'KES 280',\r\n            description: 'Flame-grilled beef patty with pickles, ketchup, and mustard',\r\n            category: 'Value Menu',\r\n            image: '/images/food/burger-king-hamburger.jpg',\r\n            isPromo: false,\r\n            calories: '250',\r\n            serves: '1 person',\r\n            allergens: ['Gluten', 'Beef', 'Sesame'],\r\n            preparationTime: '5-8 min',\r\n            spiceLevel: 'Mild',\r\n            tags: ['Value', 'Classic', 'Simple'],\r\n            vegetarian: false,\r\n            signature: false,\r\n            size: 'Regular',\r\n            patty: 'Flame-Grilled Beef'\r\n          }\r\n        ],\r\n        'Sides & Snacks': [\r\n          {\r\n            id: 'ss-001',\r\n            name: 'French Fries (Medium)',\r\n            price: 'KES 180',\r\n            description: 'Crispy golden fries seasoned with salt',\r\n            category: 'Sides & Snacks',\r\n            image: '/images/food/burger-king-fries.jpg',\r\n            isPromo: false,\r\n            calories: '380',\r\n            serves: '1 person',\r\n            allergens: ['Potatoes'],\r\n            preparationTime: '3-5 min',\r\n            spiceLevel: 'None',\r\n            tags: ['Fries', 'Crispy', 'Golden'],\r\n            vegetarian: true,\r\n            signature: false\r\n          },\r\n          {\r\n            id: 'ss-002',\r\n            name: 'Onion Rings (6 Pcs)',\r\n            price: 'KES 220',\r\n            description: 'Crispy breaded onion rings served with dipping sauce',\r\n            category: 'Sides & Snacks',\r\n            image: '/images/food/burger-king-onion-rings.jpg',\r\n            isPromo: false,\r\n            calories: '320',\r\n            serves: '1 person',\r\n            allergens: ['Gluten', 'Onions'],\r\n            preparationTime: '4-6 min',\r\n            spiceLevel: 'None',\r\n            tags: ['Onion Rings', 'Crispy', 'Breaded'],\r\n            vegetarian: true,\r\n            signature: false\r\n          },\r\n          {\r\n            id: 'ss-003',\r\n            name: 'Chicken Nuggets (8 Pcs)',\r\n            price: 'KES 280',\r\n            description: 'Breaded chicken nuggets served with your choice of dipping sauce',\r\n            category: 'Sides & Snacks',\r\n            image: '/images/food/burger-king-chicken-nuggets.jpg',\r\n            isPromo: false,\r\n            calories: '360',\r\n            serves: '1 person',\r\n            allergens: ['Gluten', 'Chicken', 'Eggs'],\r\n            preparationTime: '4-6 min',\r\n            spiceLevel: 'None',\r\n            tags: ['Chicken', 'Nuggets', 'Breaded'],\r\n            vegetarian: false,\r\n            signature: false\r\n          }\r\n        ],\r\n        'Breakfast': [\r\n          {\r\n            id: 'bf-001',\r\n            name: 'Croissan\\'wich',\r\n            price: 'KES 420',\r\n            description: 'Fluffy croissant with egg, cheese, and your choice of bacon, ham, or sausage',\r\n            category: 'Breakfast',\r\n            image: '/images/food/burger-king-croissanwich.jpg',\r\n            isPromo: false,\r\n            calories: '320',\r\n            serves: '1 person',\r\n            allergens: ['Gluten', 'Dairy', 'Eggs', 'Pork'],\r\n            preparationTime: '5-8 min',\r\n            spiceLevel: 'None',\r\n            tags: ['Breakfast', 'Croissant', 'Egg & Cheese'],\r\n            vegetarian: false,\r\n            signature: false\r\n          },\r\n          {\r\n            id: 'bf-002',\r\n            name: 'Breakfast Burrito',\r\n            price: 'KES 380',\r\n            description: 'Flour tortilla filled with scrambled eggs, cheese, and your choice of meat',\r\n            category: 'Breakfast',\r\n            image: '/images/food/burger-king-breakfast-burrito.jpg',\r\n            isPromo: false,\r\n            calories: '280',\r\n            serves: '1 person',\r\n            allergens: ['Gluten', 'Dairy', 'Eggs'],\r\n            preparationTime: '5-8 min',\r\n            spiceLevel: 'None',\r\n            tags: ['Breakfast', 'Burrito', 'Egg & Cheese'],\r\n            vegetarian: false,\r\n            signature: false\r\n          }\r\n        ],\r\n        'Desserts': [\r\n          {\r\n            id: 'ds-001',\r\n            name: 'Oreo Shake',\r\n            price: 'KES 320',\r\n            description: 'Creamy vanilla shake blended with Oreo cookie pieces',\r\n            category: 'Desserts',\r\n            image: '/images/food/burger-king-oreo-shake.jpg',\r\n            isPromo: false,\r\n            calories: '580',\r\n            serves: '1 person',\r\n            allergens: ['Dairy', 'Oreo Cookies'],\r\n            preparationTime: '3-5 min',\r\n            spiceLevel: 'None',\r\n            tags: ['Shake', 'Oreo', 'Creamy'],\r\n            vegetarian: true,\r\n            signature: false\r\n          },\r\n          {\r\n            id: 'ds-002',\r\n            name: 'Chocolate Sundae',\r\n            price: 'KES 180',\r\n            description: 'Vanilla soft serve topped with rich chocolate sauce',\r\n            category: 'Desserts',\r\n            image: '/images/food/burger-king-chocolate-sundae.jpg',\r\n            isPromo: false,\r\n            calories: '280',\r\n            serves: '1 person',\r\n            allergens: ['Dairy', 'Chocolate'],\r\n            preparationTime: '2-3 min',\r\n            spiceLevel: 'None',\r\n            tags: ['Sundae', 'Chocolate', 'Soft Serve'],\r\n            vegetarian: true,\r\n            signature: false\r\n          }\r\n        ],\r\n        'Beverages': [\r\n          {\r\n            id: 'bv-001',\r\n            name: 'Coca Cola (Medium)',\r\n            price: 'KES 120',\r\n            description: 'Refreshing Coca Cola soft drink',\r\n            category: 'Beverages',\r\n            image: '/images/food/burger-king-coca-cola.jpg',\r\n            isPromo: false,\r\n            calories: '210',\r\n            serves: '1 person',\r\n            allergens: ['None'],\r\n            preparationTime: '1-2 min',\r\n            spiceLevel: 'None',\r\n            tags: ['Soft Drink', 'Refreshing', 'Classic'],\r\n            vegetarian: true,\r\n            signature: false\r\n          },\r\n          {\r\n            id: 'bv-002',\r\n            name: 'Sprite (Medium)',\r\n            price: 'KES 120',\r\n            description: 'Clear lemon-lime soft drink',\r\n            category: 'Beverages',\r\n            image: '/images/food/burger-king-sprite.jpg',\r\n            isPromo: false,\r\n            calories: '200',\r\n            serves: '1 person',\r\n            allergens: ['None'],\r\n            preparationTime: '1-2 min',\r\n            spiceLevel: 'None',\r\n            tags: ['Soft Drink', 'Lemon-Lime', 'Clear'],\r\n            vegetarian: true,\r\n            signature: false\r\n          },\r\n          {\r\n            id: 'bv-003',\r\n            name: 'Fanta Orange (Medium)',\r\n            price: 'KES 120',\r\n            description: 'Refreshing orange-flavored soft drink',\r\n            category: 'Beverages',\r\n            image: '/images/food/burger-king-fanta.jpg',\r\n            isPromo: false,\r\n            calories: '220',\r\n            serves: '1 person',\r\n            allergens: ['None'],\r\n            preparationTime: '1-2 min',\r\n            spiceLevel: 'None',\r\n            tags: ['Soft Drink', 'Orange', 'Fruity'],\r\n            vegetarian: true,\r\n            signature: false\r\n          }\r\n        ]\r\n      },\r\n      promotions: [\r\n        {\r\n          id: 'promo-001',\r\n          title: '2 for KES 1,000',\r\n          description: 'Get any 2 Whoppers for only KES 1,000 (Save up to KES 300)',\r\n          discount: 'Save up to KES 300',\r\n          validUntil: '2024-12-31',\r\n          code: '2FOR1000',\r\n          timing: 'Available Daily'\r\n        },\r\n        {\r\n          id: 'promo-002',\r\n          title: 'Value Menu Deal',\r\n          description: 'Cheeseburger + Fries + Drink for only KES 500',\r\n          discount: 'Save KES 150',\r\n          validUntil: '2024-12-31',\r\n          code: 'VALUEDEAL',\r\n          timing: 'Available Daily'\r\n        },\r\n        {\r\n          id: 'promo-003',\r\n          title: 'Breakfast Special',\r\n          description: 'Croissan\\'wich + Hash Browns + Coffee for only KES 600 (6 AM - 10 AM)',\r\n          discount: 'Save KES 200',\r\n          validUntil: '2024-12-31',\r\n          code: 'BREAKFASTSPECIAL',\r\n          timing: '6 AM - 10 AM Daily'\r\n        }\r\n      ],\r\n      deliveryInfo: {\r\n        available: true,\r\n        services: ['Jumia Food', 'Glovo', 'Uber Eats', 'Own Delivery'],\r\n        deliveryTime: '25-40 minutes',\r\n        deliveryFee: 'KES 150',\r\n        minimumOrder: 'KES 800',\r\n        freeDeliveryThreshold: 'KES 2,000'\r\n      },\r\n      locations: [\r\n        'Westlands',\r\n        'CBD',\r\n        'Kilimani',\r\n        'Lavington',\r\n        'Karen',\r\n        'Mombasa Road',\r\n        'Thika Road',\r\n        'Nakuru',\r\n        'Mombasa',\r\n        'Kisumu'\r\n      ],\r\n      deals: [\r\n        '2 for KES 1,000',\r\n        'Value Menu Deal',\r\n        'Breakfast Special',\r\n        'Student Discount',\r\n        'Happy Hour'\r\n      ],\r\n      rewards: {\r\n        available: true,\r\n        program: 'Burger King Rewards',\r\n        benefits: ['Points on every order', 'Free Whopper on birthday', 'Exclusive member deals', 'Early access to promotions']\r\n      },\r\n      customization: {\r\n        available: true,\r\n        options: {\r\n          patties: ['Single', 'Double', 'Triple'],\r\n          cheeses: ['American', 'Cheddar', 'Swiss', 'Pepper Jack'],\r\n          toppings: ['Lettuce', 'Tomatoes', 'Onions', 'Pickles', 'Bacon', 'Mushrooms', 'Jalapeños'],\r\n          sauces: ['Mayo', 'Ketchup', 'Mustard', 'BBQ', 'Ranch', 'Spicy Mayo', 'Honey Mustard']\r\n        }\r\n      }\r\n    };\r\n  },\r\n\r\n  // Helper functions\r\n  findBurgerKingId(searchData) {\r\n    // Logic to find Burger King's ID in search results\r\n    const burgerKing = searchData.restaurants?.find(r => \r\n      r.name.toLowerCase().includes('burger king') || r.name.toLowerCase().includes('bk')\r\n    );\r\n    return burgerKing?.id;\r\n  },\r\n\r\n  transformDirectMenuData(data) {\r\n    // Transform direct API data to our format\r\n    return {\r\n      restaurant: BURGER_KING_CONFIG,\r\n      categories: data.categories || {},\r\n      promotions: data.promotions || [],\r\n      deliveryInfo: data.delivery || {},\r\n      locations: data.locations || [],\r\n      deals: data.deals || [],\r\n      rewards: data.rewards || {},\r\n      customization: data.customization || {}\r\n    };\r\n  },\r\n\r\n  transformJumiaMenuData(data) {\r\n    // Transform Jumia Food data to our format\r\n    return {\r\n      restaurant: BURGER_KING_CONFIG,\r\n      categories: this.groupByCategory(data.menu || []),\r\n      promotions: data.promotions || [],\r\n      deliveryInfo: {\r\n        available: true,\r\n        services: ['Jumia Food'],\r\n        deliveryTime: data.deliveryTime || '25-40 minutes',\r\n        deliveryFee: data.deliveryFee || 'KES 150',\r\n        minimumOrder: data.minimumOrder || 'KES 800'\r\n      },\r\n      locations: data.locations || [],\r\n      deals: data.deals || [],\r\n      rewards: data.rewards || {},\r\n      customization: data.customization || {}\r\n    };\r\n  },\r\n\r\n  transformGlovoMenuData(data) {\r\n    // Transform Glovo data to our format\r\n    return {\r\n      restaurant: BURGER_KING_CONFIG,\r\n      categories: this.groupByCategory(data.menu || []),\r\n      promotions: data.promotions || [],\r\n      deliveryInfo: {\r\n        available: true,\r\n        services: ['Glovo'],\r\n        deliveryTime: data.deliveryTime || '25-40 minutes',\r\n        deliveryFee: data.deliveryFee || 'KES 150',\r\n        minimumOrder: data.minimumOrder || 'KES 800'\r\n      },\r\n      locations: data.locations || [],\r\n      deals: data.deals || [],\r\n      rewards: data.rewards || {},\r\n      customization: data.customization || {}\r\n    };\r\n  },\r\n\r\n  groupByCategory(menuItems) {\r\n    // Group menu items by category\r\n    const categories = {};\r\n    menuItems.forEach(item => {\r\n      if (!categories[item.category]) {\r\n        categories[item.category] = [];\r\n      }\r\n      categories[item.category].push(item);\r\n    });\r\n    return categories;\r\n  },\r\n\r\n  // Get restaurant information\r\n  getRestaurantInfo() {\r\n    return BURGER_KING_CONFIG;\r\n  },\r\n\r\n  // Get current promotions\r\n  async getPromotions() {\r\n    try {\r\n      const response = await fetch(`${BURGER_KING_DIRECT_API.baseURL}${BURGER_KING_DIRECT_API.endpoints.promotions}`);\r\n      if (response.ok) {\r\n        return await response.json();\r\n      }\r\n    } catch (error) {\r\n      console.log('Using mock promotions');\r\n    }\r\n    \r\n    return this.getEnhancedMockMenu().promotions;\r\n  },\r\n\r\n  // Check delivery availability\r\n  async checkDeliveryAvailability() {\r\n    try {\r\n      const response = await fetch(`${BURGER_KING_DIRECT_API.baseURL}${BURGER_KING_DIRECT_API.endpoints.delivery}`);\r\n      if (response.ok) {\r\n        return await response.json();\r\n      }\r\n    } catch (error) {\r\n      console.log('Using mock delivery info');\r\n    }\r\n    \r\n    return this.getEnhancedMockMenu().deliveryInfo;\r\n  },\r\n\r\n  // Get deals\r\n  async getDeals() {\r\n    try {\r\n      const response = await fetch(`${BURGER_KING_DIRECT_API.baseURL}${BURGER_KING_DIRECT_API.endpoints.deals}`);\r\n      if (response.ok) {\r\n        return await response.json();\r\n      }\r\n    } catch (error) {\r\n      console.log('Using mock deals');\r\n    }\r\n    \r\n    return this.getEnhancedMockMenu().deals;\r\n  },\r\n\r\n  // Get rewards info\r\n  async getRewards() {\r\n    try {\r\n      const response = await fetch(`${BURGER_KING_DIRECT_API.baseURL}${BURGER_KING_DIRECT_API.endpoints.rewards}`);\r\n      if (response.ok) {\r\n        return await response.json();\r\n      }\r\n    } catch (error) {\r\n      console.log('Using mock rewards info');\r\n    }\r\n    \r\n    return this.getEnhancedMockMenu().rewards;\r\n  },\r\n\r\n  // Get customization options\r\n  async getCustomization() {\r\n    try {\r\n      const response = await fetch(`${BURGER_KING_DIRECT_API.baseURL}${BURGER_KING_DIRECT_API.endpoints.customization}`);\r\n      if (response.ok) {\r\n        return await response.json();\r\n      }\r\n    } catch (error) {\r\n      console.log('Using mock customization info');\r\n    }\r\n    \r\n    return this.getEnhancedMockMenu().customization;\r\n  },\r\n\r\n  // Get all locations\r\n  async getLocations() {\r\n    try {\r\n      const response = await fetch(`${BURGER_KING_DIRECT_API.baseURL}${BURGER_KING_DIRECT_API.endpoints.locations}`);\r\n      if (response.ok) {\r\n        return await response.json();\r\n      }\r\n    } catch (error) {\r\n      console.log('Using mock locations');\r\n    }\r\n    \r\n    return this.getEnhancedMockMenu().locations;\r\n  }\r\n};\r\n\r\nexport default burgerKingAPI;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}