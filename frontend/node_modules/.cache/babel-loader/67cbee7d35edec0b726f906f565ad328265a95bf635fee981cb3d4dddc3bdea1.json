{"ast":null,"code":"// API configuration for restaurant services\n\n// Google Places API configuration\nconst GOOGLE_PLACES_API_KEY = process.env.REACT_APP_GOOGLE_PLACES_API_KEY || 'YOUR_GOOGLE_PLACES_API_KEY';\nconst NAIROBI_COORDINATES = {\n  lat: -1.2921,\n  lng: 36.8219\n};\n\n// Yelp API configuration (alternative to Google Places)\nconst YELP_API_KEY = process.env.REACT_APP_YELP_API_KEY || 'YOUR_YELP_API_KEY';\n\n// Google Places API - Search for restaurants in Nairobi\nexport const searchRestaurantsGooglePlaces = async (query = 'restaurants', location = NAIROBI_COORDINATES) => {\n  try {\n    const response = await fetch(`https://maps.googleapis.com/maps/api/place/textsearch/json?query=${query}%20in%20Nairobi&location=${location.lat},${location.lng}&radius=50000&type=restaurant&key=${GOOGLE_PLACES_API_KEY}`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch restaurants from Google Places API');\n    }\n    const data = await response.json();\n    return data.results || [];\n  } catch (error) {\n    console.error('Google Places API Error:', error);\n    throw error;\n  }\n};\n\n// Google Places API - Get restaurant details including photos\nexport const getRestaurantDetails = async placeId => {\n  try {\n    const response = await fetch(`https://maps.googleapis.com/maps/api/place/details/json?place_id=${placeId}&fields=name,formatted_address,rating,price_level,photos,formatted_phone_number,website,opening_hours,reviews&key=${GOOGLE_PLACES_API_KEY}`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch restaurant details');\n    }\n    const data = await response.json();\n    return data.result;\n  } catch (error) {\n    console.error('Restaurant Details API Error:', error);\n    throw error;\n  }\n};\n\n// Yelp Fusion API - Alternative restaurant search\nexport const searchRestaurantsYelp = async (location = 'Nairobi, Kenya', term = 'restaurants') => {\n  try {\n    const response = await fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?location=${encodeURIComponent(location)}&term=${encodeURIComponent(term)}&limit=20`, {\n      headers: {\n        'Authorization': `Bearer ${YELP_API_KEY}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch restaurants from Yelp API');\n    }\n    const data = await response.json();\n    return data.businesses || [];\n  } catch (error) {\n    console.error('Yelp API Error:', error);\n    throw error;\n  }\n};\n\n// Foursquare Places API - Another alternative\nexport const searchRestaurantsFoursquare = async (query = 'restaurants', near = 'Nairobi, Kenya') => {\n  try {\n    const FOURSQUARE_API_KEY = process.env.REACT_APP_FOURSQUARE_API_KEY || 'YOUR_FOURSQUARE_API_KEY';\n    const response = await fetch(`https://api.foursquare.com/v3/places/search?query=${encodeURIComponent(query)}&near=${encodeURIComponent(near)}&categories=13065&limit=20`, {\n      headers: {\n        'Authorization': FOURSQUARE_API_KEY,\n        'Accept': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch restaurants from Foursquare API');\n    }\n    const data = await response.json();\n    return data.results || [];\n  } catch (error) {\n    console.error('Foursquare API Error:', error);\n    throw error;\n  }\n};\n\n// Glovo API Integration for Nairobi restaurants\nexport const searchRestaurantsGlovo = async (location = 'Nairobi, Kenya', category = 'restaurants') => {\n  try {\n    // Note: This is a simulated Glovo API call\n    // In production, you would need to:\n    // 1. Get proper Glovo API credentials\n    // 2. Use their official Partner API endpoints\n    // 3. Handle authentication and rate limiting\n\n    const GLOVO_API_KEY = process.env.REACT_APP_GLOVO_API_KEY || 'YOUR_GLOVO_API_KEY';\n\n    // Simulated Glovo API response structure\n    const mockGlovoResponse = {\n      restaurants: [{\n        id: 'glovo_001',\n        name: 'KFC - Westlands',\n        category: 'Fast Food',\n        rating: 4.2,\n        delivery_time: '25-35 min',\n        minimum_order: 'KES 500',\n        delivery_fee: 'KES 100',\n        image: 'https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=400&h=300&fit=crop',\n        location: 'Westlands, Nairobi',\n        cuisine: 'Chicken, Fast Food',\n        open: true,\n        glovo_partner: true\n      }, {\n        id: 'glovo_002',\n        name: 'Pizza Hut - CBD',\n        category: 'Pizza',\n        rating: 4.4,\n        delivery_time: '30-45 min',\n        minimum_order: 'KES 800',\n        delivery_fee: 'KES 120',\n        image: 'https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=400&h=300&fit=crop',\n        location: 'CBD, Nairobi',\n        cuisine: 'Pizza, Italian',\n        open: true,\n        glovo_partner: true\n      }, {\n        id: 'glovo_003',\n        name: 'Java House - Kilimani',\n        category: 'Coffee & Food',\n        rating: 4.3,\n        delivery_time: '20-30 min',\n        minimum_order: 'KES 600',\n        delivery_fee: 'KES 80',\n        image: 'https://images.unsplash.com/photo-1555396273-367ea4eb4db5?w=400&h=300&fit=crop',\n        location: 'Kilimani, Nairobi',\n        cuisine: 'International, Coffee',\n        open: true,\n        glovo_partner: true\n      }]\n    };\n\n    // In real implementation, you would make an actual API call:\n    /*\r\n    const response = await fetch(\r\n      `https://api.glovoapp.com/v3/partners/restaurants?location=${encodeURIComponent(location)}&category=${encodeURIComponent(category)}`,\r\n      {\r\n        headers: {\r\n          'Authorization': `Bearer ${GLOVO_API_KEY}`,\r\n          'Content-Type': 'application/json',\r\n        },\r\n      }\r\n    );\r\n    \r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch restaurants from Glovo API');\r\n    }\r\n    \r\n    const data = await response.json();\r\n    return data.restaurants || [];\r\n    */\n\n    // For now, return mock data\n    console.log('Using mock Glovo data. Get real API credentials for production.');\n    return mockGlovoResponse.restaurants;\n  } catch (error) {\n    console.error('Glovo API Error:', error);\n    throw error;\n  }\n};\n\n// Get restaurant menu from Glovo\nexport const getGlovoRestaurantMenu = async restaurantId => {\n  try {\n    // Mock Glovo menu data\n    const glovoMenus = {\n      'glovo_001': [\n      // KFC\n      {\n        name: \"Original Recipe Chicken\",\n        price: \"KES 450\",\n        description: \"2 pieces of fried chicken\",\n        category: \"Main Course\",\n        available: true\n      }, {\n        name: \"Zinger Burger\",\n        price: \"KES 380\",\n        description: \"Spicy chicken burger with fries\",\n        category: \"Main Course\",\n        available: true\n      }, {\n        name: \"Chicken Wings\",\n        price: \"KES 320\",\n        description: \"6 pieces of spicy wings\",\n        category: \"Appetizer\",\n        available: true\n      }, {\n        name: \"French Fries\",\n        price: \"KES 180\",\n        description: \"Crispy golden fries\",\n        category: \"Side Dish\",\n        available: true\n      }, {\n        name: \"Coca Cola\",\n        price: \"KES 120\",\n        description: \"500ml soft drink\",\n        category: \"Beverage\",\n        available: true\n      }],\n      'glovo_002': [\n      // Pizza Hut\n      {\n        name: \"Margherita Pizza\",\n        price: \"KES 850\",\n        description: \"Classic tomato and mozzarella\",\n        category: \"Pizza\",\n        available: true\n      }, {\n        name: \"Pepperoni Pizza\",\n        price: \"KES 950\",\n        description: \"Spicy pepperoni with cheese\",\n        category: \"Pizza\",\n        available: true\n      }, {\n        name: \"Chicken Supreme\",\n        price: \"KES 1100\",\n        description: \"Chicken, mushrooms, peppers\",\n        category: \"Pizza\",\n        available: true\n      }, {\n        name: \"Garlic Bread\",\n        price: \"KES 200\",\n        description: \"Fresh baked garlic bread\",\n        category: \"Side Dish\",\n        available: true\n      }, {\n        name: \"Chocolate Fudge Cake\",\n        price: \"KES 350\",\n        description: \"Rich chocolate dessert\",\n        category: \"Dessert\",\n        available: true\n      }],\n      'glovo_003': [\n      // Java House\n      {\n        name: \"Chicken Burger\",\n        price: \"KES 650\",\n        description: \"Grilled chicken with fries\",\n        category: \"Main Course\",\n        available: true\n      }, {\n        name: \"Cappuccino\",\n        price: \"KES 250\",\n        description: \"Freshly brewed coffee\",\n        category: \"Beverage\",\n        available: true\n      }, {\n        name: \"Caesar Salad\",\n        price: \"KES 450\",\n        description: \"Fresh greens with dressing\",\n        category: \"Salad\",\n        available: true\n      }, {\n        name: \"Flat White\",\n        price: \"KES 280\",\n        description: \"Smooth coffee with milk\",\n        category: \"Beverage\",\n        available: true\n      }, {\n        name: \"Chicken Pasta\",\n        price: \"KES 550\",\n        description: \"Creamy pasta with chicken\",\n        category: \"Main Course\",\n        available: true\n      }]\n    };\n    return glovoMenus[restaurantId] || [];\n  } catch (error) {\n    console.error('Error fetching Glovo menu:', error);\n    return [];\n  }\n};\n\n// Transform Google Places data to our format\nexport const transformGooglePlacesData = places => {\n  return places.map(place => {\n    var _place$types, _place$photos, _place$photos$, _place$geometry, _place$opening_hours;\n    return {\n      id: place.place_id,\n      name: place.name,\n      location: place.formatted_address,\n      rating: place.rating || 0,\n      priceRange: place.price_level ? '$'.repeat(place.price_level) : 'N/A',\n      cuisine: ((_place$types = place.types) === null || _place$types === void 0 ? void 0 : _place$types.filter(type => ['restaurant', 'food', 'meal_takeaway', 'meal_delivery'].includes(type)).join(', ')) || 'Restaurant',\n      image: (_place$photos = place.photos) !== null && _place$photos !== void 0 && (_place$photos$ = _place$photos[0]) !== null && _place$photos$ !== void 0 && _place$photos$.photo_reference ? `https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&photoreference=${place.photos[0].photo_reference}&key=${GOOGLE_PLACES_API_KEY}` : 'https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=400&h=300&fit=crop',\n      placeId: place.place_id,\n      coordinates: (_place$geometry = place.geometry) === null || _place$geometry === void 0 ? void 0 : _place$geometry.location,\n      openNow: (_place$opening_hours = place.opening_hours) === null || _place$opening_hours === void 0 ? void 0 : _place$opening_hours.open_now,\n      userRatingsTotal: place.user_ratings_total || 0\n    };\n  });\n};\n\n// Transform Yelp data to our format\nexport const transformYelpData = businesses => {\n  return businesses.map(business => {\n    var _business$location, _business$location$di, _business$categories;\n    return {\n      id: business.id,\n      name: business.name,\n      location: ((_business$location = business.location) === null || _business$location === void 0 ? void 0 : (_business$location$di = _business$location.display_address) === null || _business$location$di === void 0 ? void 0 : _business$location$di.join(', ')) || 'Nairobi, Kenya',\n      rating: business.rating || 0,\n      priceRange: business.price || 'N/A',\n      cuisine: ((_business$categories = business.categories) === null || _business$categories === void 0 ? void 0 : _business$categories.map(cat => cat.title).join(', ')) || 'Restaurant',\n      image: business.image_url || 'https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=400&h=300&fit=crop',\n      coordinates: business.coordinates,\n      phone: business.phone,\n      url: business.url,\n      reviewCount: business.review_count || 0\n    };\n  });\n};\n\n// Get restaurant menu and food items (using Glovo, Google Places, or external menu APIs)\nexport const getRestaurantMenu = async (restaurantId, restaurantName) => {\n  try {\n    // First, try to get menu from Glovo if it's a Glovo restaurant\n    if (restaurantId && restaurantId.startsWith('glovo_')) {\n      try {\n        const glovoMenu = await getGlovoRestaurantMenu(restaurantId);\n        if (glovoMenu && glovoMenu.length > 0) {\n          return glovoMenu;\n        }\n      } catch (glovoError) {\n        console.log('Glovo menu fetch failed, using fallback...');\n      }\n    }\n\n    // Fallback to mock data based on restaurant type\n    const mockMenus = {\n      'Carnivore Restaurant': [{\n        name: \"Nyama Choma\",\n        price: \"KES 2,500\",\n        description: \"Grilled goat meat with ugali\",\n        category: \"Main Course\"\n      }, {\n        name: \"Beef Ribs\",\n        price: \"KES 3,200\",\n        description: \"Slow-cooked beef ribs\",\n        category: \"Main Course\"\n      }, {\n        name: \"Chicken Wings\",\n        price: \"KES 1,800\",\n        description: \"Spicy grilled wings\",\n        category: \"Appetizer\"\n      }, {\n        name: \"Ugali\",\n        price: \"KES 300\",\n        description: \"Traditional maize meal\",\n        category: \"Side Dish\"\n      }, {\n        name: \"Sukuma Wiki\",\n        price: \"KES 250\",\n        description: \"Collard greens\",\n        category: \"Side Dish\"\n      }],\n      'Java House': [{\n        name: \"Chicken Burger\",\n        price: \"KES 850\",\n        description: \"Grilled chicken with fries\",\n        category: \"Main Course\"\n      }, {\n        name: \"Cappuccino\",\n        price: \"KES 250\",\n        description: \"Freshly brewed coffee\",\n        category: \"Beverage\"\n      }, {\n        name: \"Caesar Salad\",\n        price: \"KES 650\",\n        description: \"Fresh greens with dressing\",\n        category: \"Salad\"\n      }, {\n        name: \"Flat White\",\n        price: \"KES 280\",\n        description: \"Smooth coffee with milk\",\n        category: \"Beverage\"\n      }, {\n        name: \"Chicken Pasta\",\n        price: \"KES 750\",\n        description: \"Creamy pasta with chicken\",\n        category: \"Main Course\"\n      }],\n      'Tamarind Restaurant': [{\n        name: \"Grilled Lobster\",\n        price: \"KES 4,500\",\n        description: \"Fresh lobster with garlic butter\",\n        category: \"Seafood\"\n      }, {\n        name: \"Fish Curry\",\n        price: \"KES 2,800\",\n        description: \"Spicy fish curry with rice\",\n        category: \"Main Course\"\n      }, {\n        name: \"Prawn Biryani\",\n        price: \"KES 3,200\",\n        description: \"Aromatic rice with prawns\",\n        category: \"Main Course\"\n      }, {\n        name: \"Coconut Rice\",\n        price: \"KES 450\",\n        description: \"Fragrant coconut rice\",\n        category: \"Side Dish\"\n      }, {\n        name: \"Mango Lassi\",\n        price: \"KES 350\",\n        description: \"Sweet mango yogurt drink\",\n        category: \"Beverage\"\n      }],\n      // Add menus for major chains\n      'KFC': [{\n        name: \"Original Recipe Chicken\",\n        price: \"KES 450\",\n        description: \"2 pieces of fried chicken\",\n        category: \"Main Course\"\n      }, {\n        name: \"Zinger Burger\",\n        price: \"KES 380\",\n        description: \"Spicy chicken burger with fries\",\n        category: \"Main Course\"\n      }, {\n        name: \"Chicken Wings\",\n        price: \"KES 320\",\n        description: \"6 pieces of spicy wings\",\n        category: \"Appetizer\"\n      }, {\n        name: \"French Fries\",\n        price: \"KES 180\",\n        description: \"Crispy golden fries\",\n        category: \"Side Dish\"\n      }, {\n        name: \"Coca Cola\",\n        price: \"KES 120\",\n        description: \"500ml soft drink\",\n        category: \"Beverage\"\n      }],\n      'Pizza Hut': [{\n        name: \"Margherita Pizza\",\n        price: \"KES 850\",\n        description: \"Classic tomato and mozzarella\",\n        category: \"Pizza\"\n      }, {\n        name: \"Pepperoni Pizza\",\n        price: \"KES 950\",\n        description: \"Spicy pepperoni with cheese\",\n        category: \"Pizza\"\n      }, {\n        name: \"Chicken Supreme\",\n        price: \"KES 1100\",\n        description: \"Chicken, mushrooms, peppers\",\n        category: \"Pizza\"\n      }, {\n        name: \"Garlic Bread\",\n        price: \"KES 200\",\n        description: \"Fresh baked garlic bread\",\n        category: \"Side Dish\"\n      }, {\n        name: \"Chocolate Fudge Cake\",\n        price: \"KES 350\",\n        description: \"Rich chocolate dessert\",\n        category: \"Dessert\"\n      }]\n    };\n\n    // Return mock menu if available, otherwise generic menu\n    if (mockMenus[restaurantName]) {\n      return mockMenus[restaurantName];\n    }\n\n    // Generic menu for unknown restaurants\n    return [{\n      name: \"Signature Dish\",\n      price: \"KES 1,500\",\n      description: \"Chef's special creation\",\n      category: \"Main Course\"\n    }, {\n      name: \"Local Special\",\n      price: \"KES 1,200\",\n      description: \"Traditional local cuisine\",\n      category: \"Main Course\"\n    }, {\n      name: \"Fresh Juice\",\n      price: \"KES 300\",\n      description: \"Seasonal fruit juice\",\n      category: \"Beverage\"\n    }];\n  } catch (error) {\n    console.error('Error fetching restaurant menu:', error);\n    return [];\n  }\n};\n\n// Main function to get restaurants with fallback options\nexport const getRestaurantsInNairobi = async (useMockData = false) => {\n  if (useMockData) {\n    // Return mock data for development/testing\n    return getMockRestaurants();\n  }\n  try {\n    // Try Glovo API first (best for Nairobi delivery)\n    try {\n      const glovoRestaurants = await searchRestaurantsGlovo();\n      if (glovoRestaurants && glovoRestaurants.length > 0) {\n        console.log('Using Glovo API data');\n        return glovoRestaurants;\n      }\n    } catch (glovoError) {\n      console.log('Glovo API failed, trying alternatives...');\n    }\n\n    // Try Google Places API\n    if (GOOGLE_PLACES_API_KEY && GOOGLE_PLACES_API_KEY !== 'YOUR_GOOGLE_PLACES_API_KEY') {\n      const places = await searchRestaurantsGooglePlaces();\n      return transformGooglePlacesData(places);\n    }\n\n    // Fallback to Yelp API\n    if (YELP_API_KEY && YELP_API_KEY !== 'YOUR_YELP_API_KEY') {\n      const businesses = await searchRestaurantsYelp();\n      return transformYelpData(businesses);\n    }\n\n    // If no API keys available, return mock data\n    console.warn('No API keys configured. Using mock data.');\n    return getMockRestaurants();\n  } catch (error) {\n    console.error('Error fetching restaurants:', error);\n    // Fallback to mock data on error\n    return getMockRestaurants();\n  }\n};\n\n// Mock data fallback\nconst getMockRestaurants = () => [\n// Local Nairobi Restaurants\n{\n  id: 1,\n  name: \"Carnivore Restaurant\",\n  location: \"Langata Road, Nairobi\",\n  rating: 4.5,\n  priceRange: \"$$$\",\n  cuisine: \"African, BBQ\",\n  image: \"https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=400&h=300&fit=crop\",\n  coordinates: {\n    lat: -1.2921,\n    lng: 36.8219\n  },\n  openNow: true,\n  userRatingsTotal: 1250,\n  type: \"local\"\n}, {\n  id: 2,\n  name: \"Java House\",\n  location: \"Westlands, Nairobi\",\n  rating: 4.3,\n  priceRange: \"$$\",\n  cuisine: \"International, Coffee\",\n  image: \"https://images.unsplash.com/photo-1555396273-367ea4eb4db5?w=400&h=300&fit=crop\",\n  coordinates: {\n    lat: -1.2921,\n    lng: 36.8219\n  },\n  openNow: true,\n  userRatingsTotal: 890,\n  type: \"local\"\n}, {\n  id: 3,\n  name: \"Tamarind Restaurant\",\n  location: \"Mombasa Road, Nairobi\",\n  rating: 4.7,\n  priceRange: \"$$$\",\n  cuisine: \"Seafood, International\",\n  image: \"https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=400&h=300&fit=crop\",\n  coordinates: {\n    lat: -1.2921,\n    lng: 36.8219\n  },\n  openNow: true,\n  userRatingsTotal: 567,\n  type: \"local\"\n}, {\n  id: 4,\n  name: \"Artcaffe\",\n  location: \"CBD, Nairobi\",\n  rating: 4.2,\n  priceRange: \"$$\",\n  cuisine: \"Cafe, International\",\n  image: \"https://images.unsplash.com/photo-1554118811-1e0d58224f24?w=400&h=300&fit=crop\",\n  coordinates: {\n    lat: -1.2921,\n    lng: 36.8219\n  },\n  openNow: true,\n  userRatingsTotal: 432,\n  type: \"local\"\n}, {\n  id: 5,\n  name: \"Nyama Mama\",\n  location: \"Kilimani, Nairobi\",\n  rating: 4.4,\n  priceRange: \"$$\",\n  cuisine: \"African, Fusion\",\n  image: \"https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=400&h=300&fit=crop\",\n  coordinates: {\n    lat: -1.2921,\n    lng: 36.8219\n  },\n  openNow: true,\n  userRatingsTotal: 678,\n  type: \"local\"\n},\n// International Chains in Nairobi\n{\n  id: 6,\n  name: \"KFC\",\n  location: \"Multiple locations in Nairobi\",\n  rating: 4.1,\n  priceRange: \"$$\",\n  cuisine: \"Fast Food, Chicken\",\n  image: \"https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=400&h=300&fit=crop\",\n  coordinates: {\n    lat: -1.2921,\n    lng: 36.8219\n  },\n  openNow: true,\n  userRatingsTotal: 2340,\n  type: \"chain\",\n  deliveryAvailable: true,\n  deliveryServices: [\"Jumia Food\", \"Glovo\"]\n}, {\n  id: 7,\n  name: \"Pizza Hut\",\n  location: \"Westlands, CBD, Kilimani\",\n  rating: 4.3,\n  priceRange: \"$$\",\n  cuisine: \"Pizza, Italian\",\n  image: \"https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=400&h=300&fit=crop\",\n  coordinates: {\n    lat: -1.2921,\n    lng: 36.8219\n  },\n  openNow: true,\n  userRatingsTotal: 1890,\n  type: \"chain\",\n  deliveryAvailable: true,\n  deliveryServices: [\"Jumia Food\", \"Glovo\"]\n}, {\n  id: 8,\n  name: \"Burger King\",\n  location: \"CBD, Westlands\",\n  rating: 4.0,\n  priceRange: \"$$\",\n  cuisine: \"Fast Food, Burgers\",\n  image: \"https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=400&h=300&fit=crop\",\n  coordinates: {\n    lat: -1.2921,\n    lng: 36.8219\n  },\n  openNow: true,\n  userRatingsTotal: 1560,\n  type: \"chain\",\n  deliveryAvailable: true,\n  deliveryServices: [\"Jumia Food\"]\n}, {\n  id: 9,\n  name: \"Subway\",\n  location: \"CBD, Westlands, Kilimani\",\n  rating: 4.2,\n  priceRange: \"$$\",\n  cuisine: \"Sandwiches, Healthy\",\n  image: \"https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=400&h=300&fit=crop\",\n  coordinates: {\n    lat: -1.2921,\n    lng: 36.8219\n  },\n  openNow: true,\n  userRatingsTotal: 980,\n  type: \"chain\",\n  deliveryAvailable: true,\n  deliveryServices: [\"Jumia Food\", \"Glovo\"]\n}, {\n  id: 10,\n  name: \"Domino's Pizza\",\n  location: \"Westlands, CBD\",\n  rating: 4.4,\n  priceRange: \"$$\",\n  cuisine: \"Pizza, Delivery\",\n  image: \"https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=400&h=300&fit=crop\",\n  coordinates: {\n    lat: -1.2921,\n    lng: 36.8219\n  },\n  openNow: true,\n  userRatingsTotal: 2100,\n  type: \"chain\",\n  deliveryAvailable: true,\n  deliveryServices: [\"Own Delivery\", \"Jumia Food\"]\n}];\nconst restaurantAPI = {\n  getRestaurantsInNairobi,\n  getRestaurantDetails,\n  getRestaurantMenu,\n  searchRestaurantsGooglePlaces,\n  searchRestaurantsYelp,\n  searchRestaurantsFoursquare,\n  searchRestaurantsGlovo,\n  getGlovoRestaurantMenu\n};\nexport default restaurantAPI;","map":{"version":3,"names":["GOOGLE_PLACES_API_KEY","process","env","REACT_APP_GOOGLE_PLACES_API_KEY","NAIROBI_COORDINATES","lat","lng","YELP_API_KEY","REACT_APP_YELP_API_KEY","searchRestaurantsGooglePlaces","query","location","response","fetch","ok","Error","data","json","results","error","console","getRestaurantDetails","placeId","result","searchRestaurantsYelp","term","encodeURIComponent","headers","businesses","searchRestaurantsFoursquare","near","FOURSQUARE_API_KEY","REACT_APP_FOURSQUARE_API_KEY","searchRestaurantsGlovo","category","GLOVO_API_KEY","REACT_APP_GLOVO_API_KEY","mockGlovoResponse","restaurants","id","name","rating","delivery_time","minimum_order","delivery_fee","image","cuisine","open","glovo_partner","log","getGlovoRestaurantMenu","restaurantId","glovoMenus","price","description","available","transformGooglePlacesData","places","map","place","_place$types","_place$photos","_place$photos$","_place$geometry","_place$opening_hours","place_id","formatted_address","priceRange","price_level","repeat","types","filter","type","includes","join","photos","photo_reference","coordinates","geometry","openNow","opening_hours","open_now","userRatingsTotal","user_ratings_total","transformYelpData","business","_business$location","_business$location$di","_business$categories","display_address","categories","cat","title","image_url","phone","url","reviewCount","review_count","getRestaurantMenu","restaurantName","startsWith","glovoMenu","length","glovoError","mockMenus","getRestaurantsInNairobi","useMockData","getMockRestaurants","glovoRestaurants","warn","deliveryAvailable","deliveryServices","restaurantAPI"],"sources":["C:/Projects/gawa/frontend/src/api/restaurants.js"],"sourcesContent":["// API configuration for restaurant services\r\n\r\n// Google Places API configuration\r\nconst GOOGLE_PLACES_API_KEY = process.env.REACT_APP_GOOGLE_PLACES_API_KEY || 'YOUR_GOOGLE_PLACES_API_KEY';\r\nconst NAIROBI_COORDINATES = { lat: -1.2921, lng: 36.8219 };\r\n\r\n// Yelp API configuration (alternative to Google Places)\r\nconst YELP_API_KEY = process.env.REACT_APP_YELP_API_KEY || 'YOUR_YELP_API_KEY';\r\n\r\n// Google Places API - Search for restaurants in Nairobi\r\nexport const searchRestaurantsGooglePlaces = async (query = 'restaurants', location = NAIROBI_COORDINATES) => {\r\n  try {\r\n    const response = await fetch(\r\n      `https://maps.googleapis.com/maps/api/place/textsearch/json?query=${query}%20in%20Nairobi&location=${location.lat},${location.lng}&radius=50000&type=restaurant&key=${GOOGLE_PLACES_API_KEY}`\r\n    );\r\n    \r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch restaurants from Google Places API');\r\n    }\r\n    \r\n    const data = await response.json();\r\n    return data.results || [];\r\n  } catch (error) {\r\n    console.error('Google Places API Error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Google Places API - Get restaurant details including photos\r\nexport const getRestaurantDetails = async (placeId) => {\r\n  try {\r\n    const response = await fetch(\r\n      `https://maps.googleapis.com/maps/api/place/details/json?place_id=${placeId}&fields=name,formatted_address,rating,price_level,photos,formatted_phone_number,website,opening_hours,reviews&key=${GOOGLE_PLACES_API_KEY}`\r\n    );\r\n    \r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch restaurant details');\r\n    }\r\n    \r\n    const data = await response.json();\r\n    return data.result;\r\n  } catch (error) {\r\n    console.error('Restaurant Details API Error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Yelp Fusion API - Alternative restaurant search\r\nexport const searchRestaurantsYelp = async (location = 'Nairobi, Kenya', term = 'restaurants') => {\r\n  try {\r\n    const response = await fetch(\r\n      `https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?location=${encodeURIComponent(location)}&term=${encodeURIComponent(term)}&limit=20`,\r\n      {\r\n        headers: {\r\n          'Authorization': `Bearer ${YELP_API_KEY}`,\r\n          'Content-Type': 'application/json',\r\n        },\r\n      }\r\n    );\r\n    \r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch restaurants from Yelp API');\r\n    }\r\n    \r\n    const data = await response.json();\r\n    return data.businesses || [];\r\n  } catch (error) {\r\n    console.error('Yelp API Error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Foursquare Places API - Another alternative\r\nexport const searchRestaurantsFoursquare = async (query = 'restaurants', near = 'Nairobi, Kenya') => {\r\n  try {\r\n    const FOURSQUARE_API_KEY = process.env.REACT_APP_FOURSQUARE_API_KEY || 'YOUR_FOURSQUARE_API_KEY';\r\n    \r\n    const response = await fetch(\r\n      `https://api.foursquare.com/v3/places/search?query=${encodeURIComponent(query)}&near=${encodeURIComponent(near)}&categories=13065&limit=20`,\r\n      {\r\n        headers: {\r\n          'Authorization': FOURSQUARE_API_KEY,\r\n          'Accept': 'application/json',\r\n        },\r\n      }\r\n    );\r\n    \r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch restaurants from Foursquare API');\r\n    }\r\n    \r\n    const data = await response.json();\r\n    return data.results || [];\r\n  } catch (error) {\r\n    console.error('Foursquare API Error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Glovo API Integration for Nairobi restaurants\r\nexport const searchRestaurantsGlovo = async (location = 'Nairobi, Kenya', category = 'restaurants') => {\r\n  try {\r\n    // Note: This is a simulated Glovo API call\r\n    // In production, you would need to:\r\n    // 1. Get proper Glovo API credentials\r\n    // 2. Use their official Partner API endpoints\r\n    // 3. Handle authentication and rate limiting\r\n    \r\n    const GLOVO_API_KEY = process.env.REACT_APP_GLOVO_API_KEY || 'YOUR_GLOVO_API_KEY';\r\n    \r\n    // Simulated Glovo API response structure\r\n    const mockGlovoResponse = {\r\n      restaurants: [\r\n        {\r\n          id: 'glovo_001',\r\n          name: 'KFC - Westlands',\r\n          category: 'Fast Food',\r\n          rating: 4.2,\r\n          delivery_time: '25-35 min',\r\n          minimum_order: 'KES 500',\r\n          delivery_fee: 'KES 100',\r\n          image: 'https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=400&h=300&fit=crop',\r\n          location: 'Westlands, Nairobi',\r\n          cuisine: 'Chicken, Fast Food',\r\n          open: true,\r\n          glovo_partner: true\r\n        },\r\n        {\r\n          id: 'glovo_002',\r\n          name: 'Pizza Hut - CBD',\r\n          category: 'Pizza',\r\n          rating: 4.4,\r\n          delivery_time: '30-45 min',\r\n          minimum_order: 'KES 800',\r\n          delivery_fee: 'KES 120',\r\n          image: 'https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=400&h=300&fit=crop',\r\n          location: 'CBD, Nairobi',\r\n          cuisine: 'Pizza, Italian',\r\n          open: true,\r\n          glovo_partner: true\r\n        },\r\n        {\r\n          id: 'glovo_003',\r\n          name: 'Java House - Kilimani',\r\n          category: 'Coffee & Food',\r\n          rating: 4.3,\r\n          delivery_time: '20-30 min',\r\n          minimum_order: 'KES 600',\r\n          delivery_fee: 'KES 80',\r\n          image: 'https://images.unsplash.com/photo-1555396273-367ea4eb4db5?w=400&h=300&fit=crop',\r\n          location: 'Kilimani, Nairobi',\r\n          cuisine: 'International, Coffee',\r\n          open: true,\r\n          glovo_partner: true\r\n        }\r\n      ]\r\n    };\r\n    \r\n    // In real implementation, you would make an actual API call:\r\n    /*\r\n    const response = await fetch(\r\n      `https://api.glovoapp.com/v3/partners/restaurants?location=${encodeURIComponent(location)}&category=${encodeURIComponent(category)}`,\r\n      {\r\n        headers: {\r\n          'Authorization': `Bearer ${GLOVO_API_KEY}`,\r\n          'Content-Type': 'application/json',\r\n        },\r\n      }\r\n    );\r\n    \r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch restaurants from Glovo API');\r\n    }\r\n    \r\n    const data = await response.json();\r\n    return data.restaurants || [];\r\n    */\r\n    \r\n    // For now, return mock data\r\n    console.log('Using mock Glovo data. Get real API credentials for production.');\r\n    return mockGlovoResponse.restaurants;\r\n    \r\n  } catch (error) {\r\n    console.error('Glovo API Error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get restaurant menu from Glovo\r\nexport const getGlovoRestaurantMenu = async (restaurantId) => {\r\n  try {\r\n    // Mock Glovo menu data\r\n    const glovoMenus = {\r\n      'glovo_001': [ // KFC\r\n        { name: \"Original Recipe Chicken\", price: \"KES 450\", description: \"2 pieces of fried chicken\", category: \"Main Course\", available: true },\r\n        { name: \"Zinger Burger\", price: \"KES 380\", description: \"Spicy chicken burger with fries\", category: \"Main Course\", available: true },\r\n        { name: \"Chicken Wings\", price: \"KES 320\", description: \"6 pieces of spicy wings\", category: \"Appetizer\", available: true },\r\n        { name: \"French Fries\", price: \"KES 180\", description: \"Crispy golden fries\", category: \"Side Dish\", available: true },\r\n        { name: \"Coca Cola\", price: \"KES 120\", description: \"500ml soft drink\", category: \"Beverage\", available: true }\r\n      ],\r\n      'glovo_002': [ // Pizza Hut\r\n        { name: \"Margherita Pizza\", price: \"KES 850\", description: \"Classic tomato and mozzarella\", category: \"Pizza\", available: true },\r\n        { name: \"Pepperoni Pizza\", price: \"KES 950\", description: \"Spicy pepperoni with cheese\", category: \"Pizza\", available: true },\r\n        { name: \"Chicken Supreme\", price: \"KES 1100\", description: \"Chicken, mushrooms, peppers\", category: \"Pizza\", available: true },\r\n        { name: \"Garlic Bread\", price: \"KES 200\", description: \"Fresh baked garlic bread\", category: \"Side Dish\", available: true },\r\n        { name: \"Chocolate Fudge Cake\", price: \"KES 350\", description: \"Rich chocolate dessert\", category: \"Dessert\", available: true }\r\n      ],\r\n      'glovo_003': [ // Java House\r\n        { name: \"Chicken Burger\", price: \"KES 650\", description: \"Grilled chicken with fries\", category: \"Main Course\", available: true },\r\n        { name: \"Cappuccino\", price: \"KES 250\", description: \"Freshly brewed coffee\", category: \"Beverage\", available: true },\r\n        { name: \"Caesar Salad\", price: \"KES 450\", description: \"Fresh greens with dressing\", category: \"Salad\", available: true },\r\n        { name: \"Flat White\", price: \"KES 280\", description: \"Smooth coffee with milk\", category: \"Beverage\", available: true },\r\n        { name: \"Chicken Pasta\", price: \"KES 550\", description: \"Creamy pasta with chicken\", category: \"Main Course\", available: true }\r\n      ]\r\n    };\r\n    \r\n    return glovoMenus[restaurantId] || [];\r\n    \r\n  } catch (error) {\r\n    console.error('Error fetching Glovo menu:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Transform Google Places data to our format\r\nexport const transformGooglePlacesData = (places) => {\r\n  return places.map(place => ({\r\n    id: place.place_id,\r\n    name: place.name,\r\n    location: place.formatted_address,\r\n    rating: place.rating || 0,\r\n    priceRange: place.price_level ? '$'.repeat(place.price_level) : 'N/A',\r\n    cuisine: place.types?.filter(type => \r\n      ['restaurant', 'food', 'meal_takeaway', 'meal_delivery'].includes(type)\r\n    ).join(', ') || 'Restaurant',\r\n    image: place.photos?.[0]?.photo_reference \r\n      ? `https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&photoreference=${place.photos[0].photo_reference}&key=${GOOGLE_PLACES_API_KEY}`\r\n      : 'https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=400&h=300&fit=crop',\r\n    placeId: place.place_id,\r\n    coordinates: place.geometry?.location,\r\n    openNow: place.opening_hours?.open_now,\r\n    userRatingsTotal: place.user_ratings_total || 0\r\n  }));\r\n};\r\n\r\n// Transform Yelp data to our format\r\nexport const transformYelpData = (businesses) => {\r\n  return businesses.map(business => ({\r\n    id: business.id,\r\n    name: business.name,\r\n    location: business.location?.display_address?.join(', ') || 'Nairobi, Kenya',\r\n    rating: business.rating || 0,\r\n    priceRange: business.price || 'N/A',\r\n    cuisine: business.categories?.map(cat => cat.title).join(', ') || 'Restaurant',\r\n    image: business.image_url || 'https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=400&h=300&fit=crop',\r\n    coordinates: business.coordinates,\r\n    phone: business.phone,\r\n    url: business.url,\r\n    reviewCount: business.review_count || 0\r\n  }));\r\n};\r\n\r\n// Get restaurant menu and food items (using Glovo, Google Places, or external menu APIs)\r\nexport const getRestaurantMenu = async (restaurantId, restaurantName) => {\r\n  try {\r\n    // First, try to get menu from Glovo if it's a Glovo restaurant\r\n    if (restaurantId && restaurantId.startsWith('glovo_')) {\r\n      try {\r\n        const glovoMenu = await getGlovoRestaurantMenu(restaurantId);\r\n        if (glovoMenu && glovoMenu.length > 0) {\r\n          return glovoMenu;\r\n        }\r\n      } catch (glovoError) {\r\n        console.log('Glovo menu fetch failed, using fallback...');\r\n      }\r\n    }\r\n    \r\n    // Fallback to mock data based on restaurant type\r\n    const mockMenus = {\r\n      'Carnivore Restaurant': [\r\n        { name: \"Nyama Choma\", price: \"KES 2,500\", description: \"Grilled goat meat with ugali\", category: \"Main Course\" },\r\n        { name: \"Beef Ribs\", price: \"KES 3,200\", description: \"Slow-cooked beef ribs\", category: \"Main Course\" },\r\n        { name: \"Chicken Wings\", price: \"KES 1,800\", description: \"Spicy grilled wings\", category: \"Appetizer\" },\r\n        { name: \"Ugali\", price: \"KES 300\", description: \"Traditional maize meal\", category: \"Side Dish\" },\r\n        { name: \"Sukuma Wiki\", price: \"KES 250\", description: \"Collard greens\", category: \"Side Dish\" }\r\n      ],\r\n      'Java House': [\r\n        { name: \"Chicken Burger\", price: \"KES 850\", description: \"Grilled chicken with fries\", category: \"Main Course\" },\r\n        { name: \"Cappuccino\", price: \"KES 250\", description: \"Freshly brewed coffee\", category: \"Beverage\" },\r\n        { name: \"Caesar Salad\", price: \"KES 650\", description: \"Fresh greens with dressing\", category: \"Salad\" },\r\n        { name: \"Flat White\", price: \"KES 280\", description: \"Smooth coffee with milk\", category: \"Beverage\" },\r\n        { name: \"Chicken Pasta\", price: \"KES 750\", description: \"Creamy pasta with chicken\", category: \"Main Course\" }\r\n      ],\r\n      'Tamarind Restaurant': [\r\n        { name: \"Grilled Lobster\", price: \"KES 4,500\", description: \"Fresh lobster with garlic butter\", category: \"Seafood\" },\r\n        { name: \"Fish Curry\", price: \"KES 2,800\", description: \"Spicy fish curry with rice\", category: \"Main Course\" },\r\n        { name: \"Prawn Biryani\", price: \"KES 3,200\", description: \"Aromatic rice with prawns\", category: \"Main Course\" },\r\n        { name: \"Coconut Rice\", price: \"KES 450\", description: \"Fragrant coconut rice\", category: \"Side Dish\" },\r\n        { name: \"Mango Lassi\", price: \"KES 350\", description: \"Sweet mango yogurt drink\", category: \"Beverage\" }\r\n      ],\r\n      // Add menus for major chains\r\n      'KFC': [\r\n        { name: \"Original Recipe Chicken\", price: \"KES 450\", description: \"2 pieces of fried chicken\", category: \"Main Course\" },\r\n        { name: \"Zinger Burger\", price: \"KES 380\", description: \"Spicy chicken burger with fries\", category: \"Main Course\" },\r\n        { name: \"Chicken Wings\", price: \"KES 320\", description: \"6 pieces of spicy wings\", category: \"Appetizer\" },\r\n        { name: \"French Fries\", price: \"KES 180\", description: \"Crispy golden fries\", category: \"Side Dish\" },\r\n        { name: \"Coca Cola\", price: \"KES 120\", description: \"500ml soft drink\", category: \"Beverage\" }\r\n      ],\r\n      'Pizza Hut': [\r\n        { name: \"Margherita Pizza\", price: \"KES 850\", description: \"Classic tomato and mozzarella\", category: \"Pizza\" },\r\n        { name: \"Pepperoni Pizza\", price: \"KES 950\", description: \"Spicy pepperoni with cheese\", category: \"Pizza\" },\r\n        { name: \"Chicken Supreme\", price: \"KES 1100\", description: \"Chicken, mushrooms, peppers\", category: \"Pizza\" },\r\n        { name: \"Garlic Bread\", price: \"KES 200\", description: \"Fresh baked garlic bread\", category: \"Side Dish\" },\r\n        { name: \"Chocolate Fudge Cake\", price: \"KES 350\", description: \"Rich chocolate dessert\", category: \"Dessert\" }\r\n      ]\r\n    };\r\n    \r\n    // Return mock menu if available, otherwise generic menu\r\n    if (mockMenus[restaurantName]) {\r\n      return mockMenus[restaurantName];\r\n    }\r\n    \r\n    // Generic menu for unknown restaurants\r\n    return [\r\n      { name: \"Signature Dish\", price: \"KES 1,500\", description: \"Chef's special creation\", category: \"Main Course\" },\r\n      { name: \"Local Special\", price: \"KES 1,200\", description: \"Traditional local cuisine\", category: \"Main Course\" },\r\n      { name: \"Fresh Juice\", price: \"KES 300\", description: \"Seasonal fruit juice\", category: \"Beverage\" }\r\n    ];\r\n  } catch (error) {\r\n    console.error('Error fetching restaurant menu:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Main function to get restaurants with fallback options\r\nexport const getRestaurantsInNairobi = async (useMockData = false) => {\r\n  if (useMockData) {\r\n    // Return mock data for development/testing\r\n    return getMockRestaurants();\r\n  }\r\n  \r\n  try {\r\n    // Try Glovo API first (best for Nairobi delivery)\r\n    try {\r\n      const glovoRestaurants = await searchRestaurantsGlovo();\r\n      if (glovoRestaurants && glovoRestaurants.length > 0) {\r\n        console.log('Using Glovo API data');\r\n        return glovoRestaurants;\r\n      }\r\n    } catch (glovoError) {\r\n      console.log('Glovo API failed, trying alternatives...');\r\n    }\r\n    \r\n    // Try Google Places API\r\n    if (GOOGLE_PLACES_API_KEY && GOOGLE_PLACES_API_KEY !== 'YOUR_GOOGLE_PLACES_API_KEY') {\r\n      const places = await searchRestaurantsGooglePlaces();\r\n      return transformGooglePlacesData(places);\r\n    }\r\n    \r\n    // Fallback to Yelp API\r\n    if (YELP_API_KEY && YELP_API_KEY !== 'YOUR_YELP_API_KEY') {\r\n      const businesses = await searchRestaurantsYelp();\r\n      return transformYelpData(businesses);\r\n    }\r\n    \r\n    // If no API keys available, return mock data\r\n    console.warn('No API keys configured. Using mock data.');\r\n    return getMockRestaurants();\r\n    \r\n  } catch (error) {\r\n    console.error('Error fetching restaurants:', error);\r\n    // Fallback to mock data on error\r\n    return getMockRestaurants();\r\n  }\r\n};\r\n\r\n// Mock data fallback\r\nconst getMockRestaurants = () => [\r\n  // Local Nairobi Restaurants\r\n  {\r\n    id: 1,\r\n    name: \"Carnivore Restaurant\",\r\n    location: \"Langata Road, Nairobi\",\r\n    rating: 4.5,\r\n    priceRange: \"$$$\",\r\n    cuisine: \"African, BBQ\",\r\n    image: \"https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=400&h=300&fit=crop\",\r\n    coordinates: { lat: -1.2921, lng: 36.8219 },\r\n    openNow: true,\r\n    userRatingsTotal: 1250,\r\n    type: \"local\"\r\n  },\r\n  {\r\n    id: 2,\r\n    name: \"Java House\",\r\n    location: \"Westlands, Nairobi\",\r\n    rating: 4.3,\r\n    priceRange: \"$$\",\r\n    cuisine: \"International, Coffee\",\r\n    image: \"https://images.unsplash.com/photo-1555396273-367ea4eb4db5?w=400&h=300&fit=crop\",\r\n    coordinates: { lat: -1.2921, lng: 36.8219 },\r\n    openNow: true,\r\n    userRatingsTotal: 890,\r\n    type: \"local\"\r\n  },\r\n  {\r\n    id: 3,\r\n    name: \"Tamarind Restaurant\",\r\n    location: \"Mombasa Road, Nairobi\",\r\n    rating: 4.7,\r\n    priceRange: \"$$$\",\r\n    cuisine: \"Seafood, International\",\r\n    image: \"https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=400&h=300&fit=crop\",\r\n    coordinates: { lat: -1.2921, lng: 36.8219 },\r\n    openNow: true,\r\n    userRatingsTotal: 567,\r\n    type: \"local\"\r\n  },\r\n  {\r\n    id: 4,\r\n    name: \"Artcaffe\",\r\n    location: \"CBD, Nairobi\",\r\n    rating: 4.2,\r\n    priceRange: \"$$\",\r\n    cuisine: \"Cafe, International\",\r\n    image: \"https://images.unsplash.com/photo-1554118811-1e0d58224f24?w=400&h=300&fit=crop\",\r\n    coordinates: { lat: -1.2921, lng: 36.8219 },\r\n    openNow: true,\r\n    userRatingsTotal: 432,\r\n    type: \"local\"\r\n  },\r\n  {\r\n    id: 5,\r\n    name: \"Nyama Mama\",\r\n    location: \"Kilimani, Nairobi\",\r\n    rating: 4.4,\r\n    priceRange: \"$$\",\r\n    cuisine: \"African, Fusion\",\r\n    image: \"https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=400&h=300&fit=crop\",\r\n    coordinates: { lat: -1.2921, lng: 36.8219 },\r\n    openNow: true,\r\n    userRatingsTotal: 678,\r\n    type: \"local\"\r\n  },\r\n  \r\n  // International Chains in Nairobi\r\n  {\r\n    id: 6,\r\n    name: \"KFC\",\r\n    location: \"Multiple locations in Nairobi\",\r\n    rating: 4.1,\r\n    priceRange: \"$$\",\r\n    cuisine: \"Fast Food, Chicken\",\r\n    image: \"https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=400&h=300&fit=crop\",\r\n    coordinates: { lat: -1.2921, lng: 36.8219 },\r\n    openNow: true,\r\n    userRatingsTotal: 2340,\r\n    type: \"chain\",\r\n    deliveryAvailable: true,\r\n    deliveryServices: [\"Jumia Food\", \"Glovo\"]\r\n  },\r\n  {\r\n    id: 7,\r\n    name: \"Pizza Hut\",\r\n    location: \"Westlands, CBD, Kilimani\",\r\n    rating: 4.3,\r\n    priceRange: \"$$\",\r\n    cuisine: \"Pizza, Italian\",\r\n    image: \"https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=400&h=300&fit=crop\",\r\n    coordinates: { lat: -1.2921, lng: 36.8219 },\r\n    openNow: true,\r\n    userRatingsTotal: 1890,\r\n    type: \"chain\",\r\n    deliveryAvailable: true,\r\n    deliveryServices: [\"Jumia Food\", \"Glovo\"]\r\n  },\r\n  {\r\n    id: 8,\r\n    name: \"Burger King\",\r\n    location: \"CBD, Westlands\",\r\n    rating: 4.0,\r\n    priceRange: \"$$\",\r\n    cuisine: \"Fast Food, Burgers\",\r\n    image: \"https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=400&h=300&fit=crop\",\r\n    coordinates: { lat: -1.2921, lng: 36.8219 },\r\n    openNow: true,\r\n    userRatingsTotal: 1560,\r\n    type: \"chain\",\r\n    deliveryAvailable: true,\r\n    deliveryServices: [\"Jumia Food\"]\r\n  },\r\n  {\r\n    id: 9,\r\n    name: \"Subway\",\r\n    location: \"CBD, Westlands, Kilimani\",\r\n    rating: 4.2,\r\n    priceRange: \"$$\",\r\n    cuisine: \"Sandwiches, Healthy\",\r\n    image: \"https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=400&h=300&fit=crop\",\r\n    coordinates: { lat: -1.2921, lng: 36.8219 },\r\n    openNow: true,\r\n    userRatingsTotal: 980,\r\n    type: \"chain\",\r\n    deliveryAvailable: true,\r\n    deliveryServices: [\"Jumia Food\", \"Glovo\"]\r\n  },\r\n  {\r\n    id: 10,\r\n    name: \"Domino's Pizza\",\r\n    location: \"Westlands, CBD\",\r\n    rating: 4.4,\r\n    priceRange: \"$$\",\r\n    cuisine: \"Pizza, Delivery\",\r\n    image: \"https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=400&h=300&fit=crop\",\r\n    coordinates: { lat: -1.2921, lng: 36.8219 },\r\n    openNow: true,\r\n    userRatingsTotal: 2100,\r\n    type: \"chain\",\r\n    deliveryAvailable: true,\r\n    deliveryServices: [\"Own Delivery\", \"Jumia Food\"]\r\n  }\r\n];\r\n\r\nconst restaurantAPI = {\r\n  getRestaurantsInNairobi,\r\n  getRestaurantDetails,\r\n  getRestaurantMenu,\r\n  searchRestaurantsGooglePlaces,\r\n  searchRestaurantsYelp,\r\n  searchRestaurantsFoursquare,\r\n  searchRestaurantsGlovo,\r\n  getGlovoRestaurantMenu\r\n};\r\n\r\nexport default restaurantAPI;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}