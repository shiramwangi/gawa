{"ast":null,"code":"// Chicken Inn API Integration Service\n// This service provides multiple ways to get Chicken Inn's menu data\n\n// Base configuration\nconst CHICKEN_INN_CONFIG = {\n  name: 'Chicken Inn',\n  location: 'Multiple locations across Kenya',\n  phone: '+254 20 777 9999',\n  website: 'https://www.chickeninn.co.ke',\n  coordinates: {\n    lat: -1.2921,\n    lng: 36.8219\n  },\n  // Nairobi location\n  description: 'Kenya\\'s Favorite Chicken! Serving delicious chicken meals, burgers, and fast food with quality ingredients',\n  founded: 1982,\n  branches: 30,\n  specialties: ['Fried Chicken', 'Chicken Burgers', 'Fast Food', 'Family Meals', 'Delivery', 'Takeaway']\n};\n\n// Option 1: Direct API endpoints (if Chicken Inn has them)\nconst CHICKEN_INN_DIRECT_API = {\n  baseURL: 'https://api.chickeninn.co.ke',\n  // Hypothetical API endpoint\n  endpoints: {\n    menu: '/api/v1/menu',\n    promotions: '/api/v1/promotions',\n    locations: '/api/v1/locations',\n    delivery: '/api/v1/delivery',\n    deals: '/api/v1/deals',\n    rewards: '/api/v1/rewards',\n    customization: '/api/v1/customization'\n  }\n};\n\n// Option 2: Jumia Food API integration\nconst JUMIA_FOOD_API = {\n  baseURL: 'https://food.jumia.co.ke/api',\n  endpoints: {\n    search: '/restaurants/search',\n    menu: '/restaurants/{id}/menu',\n    categories: '/categories'\n  },\n  headers: {\n    'Authorization': 'Bearer YOUR_JUMIA_API_KEY',\n    'Content-Type': 'application/json'\n  }\n};\n\n// Option 3: Glovo API integration\nconst GLOVO_API = {\n  baseURL: 'https://api.glovoapp.com',\n  endpoints: {\n    restaurants: '/v3/restaurants',\n    menu: '/v3/restaurants/{id}/menu',\n    categories: '/v3/categories'\n  },\n  headers: {\n    'Authorization': 'Bearer YOUR_GLOVO_API_KEY',\n    'Content-Type': 'application/json'\n  }\n};\n\n// Main API functions\nexport const chickenInnAPI = {\n  // Get full menu with real-time data\n  async getFullMenu() {\n    try {\n      // Try direct API first\n      const directMenu = await this.getDirectMenu();\n      if (directMenu) return directMenu;\n\n      // Try Jumia Food API\n      const jumiaMenu = await this.getJumiaMenu();\n      if (jumiaMenu) return jumiaMenu;\n\n      // Try Glovo API\n      const glovoMenu = await this.getGlovoMenu();\n      if (glovoMenu) return glovoMenu;\n\n      // Fallback to enhanced mock data\n      return this.getEnhancedMockMenu();\n    } catch (error) {\n      console.error('Error fetching Chicken Inn menu:', error);\n      return this.getEnhancedMockMenu();\n    }\n  },\n  // Try direct Chicken Inn API\n  async getDirectMenu() {\n    try {\n      const response = await fetch(`${CHICKEN_INN_DIRECT_API.baseURL}${CHICKEN_INN_DIRECT_API.endpoints.menu}`);\n      if (response.ok) {\n        const data = await response.json();\n        return this.transformDirectMenuData(data);\n      }\n    } catch (error) {\n      console.log('Direct API not available, trying alternatives...');\n    }\n    return null;\n  },\n  // Try Jumia Food API\n  async getJumiaMenu() {\n    try {\n      // Search for Chicken Inn on Jumia Food\n      const searchResponse = await fetch(`${JUMIA_FOOD_API.baseURL}${JUMIA_FOOD_API.endpoints.search}?q=chicken+inn`, {\n        headers: JUMIA_FOOD_API.headers\n      });\n      if (searchResponse.ok) {\n        const searchData = await searchResponse.json();\n        const chickenInnId = this.findChickenInnId(searchData);\n        if (chickenInnId) {\n          const menuResponse = await fetch(`${JUMIA_FOOD_API.baseURL}${JUMIA_FOOD_API.endpoints.menu.replace('{id}', chickenInnId)}`, {\n            headers: JUMIA_FOOD_API.headers\n          });\n          if (menuResponse.ok) {\n            const menuData = await menuResponse.json();\n            return this.transformJumiaMenuData(menuData);\n          }\n        }\n      }\n    } catch (error) {\n      console.log('Jumia Food API not available, trying alternatives...');\n    }\n    return null;\n  },\n  // Try Glovo API\n  async getGlovoMenu() {\n    try {\n      // Search for Chicken Inn on Glovo\n      const searchResponse = await fetch(`${GLOVO_API.baseURL}${GLOVO_API.endpoints.restaurants}?search=chicken+inn`, {\n        headers: GLOVO_API.headers\n      });\n      if (searchResponse.ok) {\n        const searchData = await searchResponse.json();\n        const chickenInnId = this.findChickenInnId(searchData);\n        if (chickenInnId) {\n          const menuResponse = await fetch(`${GLOVO_API.baseURL}${GLOVO_API.endpoints.menu.replace('{id}', chickenInnId)}`, {\n            headers: GLOVO_API.headers\n          });\n          if (menuResponse.ok) {\n            const menuData = await menuResponse.json();\n            return this.transformGlovoMenuData(menuData);\n          }\n        }\n      }\n    } catch (error) {\n      console.log('Glovo API not available, using fallback...');\n    }\n    return null;\n  },\n  // Enhanced mock menu with realistic Chicken Inn data\n  getEnhancedMockMenu() {\n    return {\n      restaurant: CHICKEN_INN_CONFIG,\n      categories: {\n        'Chicken Meals': [{\n          id: 'cm-001',\n          name: '2 Piece Chicken Meal',\n          price: 'KES 450',\n          description: '2 pieces of crispy fried chicken with chips and a drink',\n          category: 'Chicken Meals',\n          image: '/images/food/chicken-inn-2piece-meal.jpg',\n          isPromo: true,\n          promoText: 'Popular',\n          calories: '650',\n          serves: '1 person',\n          allergens: ['Chicken', 'Gluten', 'Potatoes'],\n          preparationTime: '8-12 min',\n          spiceLevel: 'Mild',\n          tags: ['Chicken', 'Meal', 'Popular'],\n          vegetarian: false,\n          signature: true,\n          mealType: 'Combo',\n          includes: ['2 Chicken Pieces', 'Chips', 'Drink']\n        }, {\n          id: 'cm-002',\n          name: '3 Piece Chicken Meal',\n          price: 'KES 550',\n          description: '3 pieces of crispy fried chicken with chips and a drink',\n          category: 'Chicken Meals',\n          image: '/images/food/chicken-inn-3piece-meal.jpg',\n          isPromo: false,\n          calories: '850',\n          serves: '1 person',\n          allergens: ['Chicken', 'Gluten', 'Potatoes'],\n          preparationTime: '8-12 min',\n          spiceLevel: 'Mild',\n          tags: ['Chicken', 'Meal', 'Value'],\n          vegetarian: false,\n          signature: false,\n          mealType: 'Combo',\n          includes: ['3 Chicken Pieces', 'Chips', 'Drink']\n        }, {\n          id: 'cm-003',\n          name: 'Family Bucket (8 Pieces)',\n          price: 'KES 1,200',\n          description: '8 pieces of crispy fried chicken with 2 large chips and 2 drinks',\n          category: 'Chicken Meals',\n          image: '/images/food/chicken-inn-family-bucket.jpg',\n          isPromo: false,\n          calories: '2,400',\n          serves: '3-4 people',\n          allergens: ['Chicken', 'Gluten', 'Potatoes'],\n          preparationTime: '15-20 min',\n          spiceLevel: 'Mild',\n          tags: ['Chicken', 'Family', 'Bucket'],\n          vegetarian: false,\n          signature: false,\n          mealType: 'Family Pack',\n          includes: ['8 Chicken Pieces', '2 Large Chips', '2 Drinks']\n        }],\n        'Chicken Burgers': [{\n          id: 'cb-001',\n          name: 'Chicken Burger',\n          price: 'KES 350',\n          description: 'Crispy chicken fillet with lettuce, tomato, and special sauce',\n          category: 'Chicken Burgers',\n          image: '/images/food/chicken-inn-chicken-burger.jpg',\n          isPromo: true,\n          promoText: 'Classic',\n          calories: '480',\n          serves: '1 person',\n          allergens: ['Chicken', 'Gluten', 'Dairy'],\n          preparationTime: '5-8 min',\n          spiceLevel: 'Mild',\n          tags: ['Burger', 'Chicken', 'Classic'],\n          vegetarian: false,\n          signature: true,\n          burgerType: 'Classic',\n          toppings: ['Lettuce', 'Tomato', 'Special Sauce']\n        }, {\n          id: 'cb-002',\n          name: 'Spicy Chicken Burger',\n          price: 'KES 380',\n          description: 'Spicy chicken fillet with jalapeños, lettuce, and hot sauce',\n          category: 'Chicken Burgers',\n          image: '/images/food/chicken-inn-spicy-burger.jpg',\n          isPromo: false,\n          calories: '520',\n          serves: '1 person',\n          allergens: ['Chicken', 'Gluten', 'Dairy'],\n          preparationTime: '5-8 min',\n          spiceLevel: 'Hot',\n          tags: ['Burger', 'Chicken', 'Spicy'],\n          vegetarian: false,\n          signature: false,\n          burgerType: 'Spicy',\n          toppings: ['Jalapeños', 'Lettuce', 'Hot Sauce']\n        }],\n        'Chicken Pieces': [{\n          id: 'cp-001',\n          name: 'Chicken Wings (6 Pcs)',\n          price: 'KES 280',\n          description: '6 crispy chicken wings with your choice of sauce',\n          category: 'Chicken Pieces',\n          image: '/images/food/chicken-inn-wings.jpg',\n          isPromo: false,\n          calories: '420',\n          serves: '1-2 people',\n          allergens: ['Chicken', 'Gluten'],\n          preparationTime: '8-12 min',\n          spiceLevel: 'Medium',\n          tags: ['Wings', 'Chicken', 'Crispy'],\n          vegetarian: false,\n          signature: false,\n          pieceType: 'Wings',\n          sauceOptions: ['BBQ', 'Hot', 'Honey Mustard']\n        }, {\n          id: 'cp-002',\n          name: 'Chicken Strips (5 Pcs)',\n          price: 'KES 320',\n          description: '5 breaded chicken strips served with dipping sauce',\n          category: 'Chicken Pieces',\n          image: '/images/food/chicken-inn-strips.jpg',\n          isPromo: false,\n          calories: '380',\n          serves: '1-2 people',\n          allergens: ['Chicken', 'Gluten', 'Eggs'],\n          preparationTime: '8-12 min',\n          spiceLevel: 'Mild',\n          tags: ['Strips', 'Chicken', 'Breaded'],\n          vegetarian: false,\n          signature: false,\n          pieceType: 'Strips',\n          sauceOptions: ['Ranch', 'BBQ', 'Honey Mustard']\n        }],\n        'Sides': [{\n          id: 'sd-001',\n          name: 'French Fries (Large)',\n          price: 'KES 180',\n          description: 'Large portion of crispy golden fries seasoned with salt',\n          category: 'Sides',\n          image: '/images/food/chicken-inn-fries.jpg',\n          isPromo: false,\n          calories: '450',\n          serves: '1-2 people',\n          allergens: ['Potatoes'],\n          preparationTime: '5-8 min',\n          spiceLevel: 'None',\n          tags: ['Fries', 'Crispy', 'Classic'],\n          vegetarian: true,\n          signature: false,\n          size: 'Large',\n          seasoning: 'Salt'\n        }, {\n          id: 'sd-002',\n          name: 'Coleslaw',\n          price: 'KES 120',\n          description: 'Fresh cabbage and carrot coleslaw with creamy dressing',\n          category: 'Sides',\n          image: '/images/food/chicken-inn-coleslaw.jpg',\n          isPromo: false,\n          calories: '180',\n          serves: '1 person',\n          allergens: ['Dairy', 'Eggs'],\n          preparationTime: '2-3 min',\n          spiceLevel: 'None',\n          tags: ['Coleslaw', 'Fresh', 'Creamy'],\n          vegetarian: true,\n          signature: false,\n          size: 'Regular',\n          ingredients: ['Cabbage', 'Carrots', 'Creamy Dressing']\n        }],\n        'Beverages': [{\n          id: 'bv-001',\n          name: 'Coca Cola (500ml)',\n          price: 'KES 80',\n          description: 'Refreshing Coca Cola soft drink',\n          category: 'Beverages',\n          image: '/images/food/chicken-inn-coca-cola.jpg',\n          isPromo: false,\n          calories: '210',\n          serves: '1 person',\n          allergens: ['None'],\n          preparationTime: '1-2 min',\n          spiceLevel: 'None',\n          tags: ['Soft Drink', 'Refreshing', 'Classic'],\n          vegetarian: true,\n          signature: false,\n          size: '500ml',\n          type: 'Carbonated'\n        }, {\n          id: 'bv-002',\n          name: 'Sprite (500ml)',\n          price: 'KES 80',\n          description: 'Clear lemon-lime soft drink',\n          category: 'Beverages',\n          image: '/images/food/chicken-inn-sprite.jpg',\n          isPromo: false,\n          calories: '200',\n          serves: '1 person',\n          allergens: ['None'],\n          preparationTime: '1-2 min',\n          spiceLevel: 'None',\n          tags: ['Soft Drink', 'Lemon-Lime', 'Refreshing'],\n          vegetarian: true,\n          signature: false,\n          size: '500ml',\n          type: 'Carbonated'\n        }],\n        'Desserts': [{\n          id: 'ds-001',\n          name: 'Ice Cream (Vanilla)',\n          price: 'KES 150',\n          description: 'Creamy vanilla ice cream in a cone',\n          category: 'Desserts',\n          image: '/images/food/chicken-inn-ice-cream.jpg',\n          isPromo: false,\n          calories: '280',\n          serves: '1 person',\n          allergens: ['Dairy'],\n          preparationTime: '2-3 min',\n          spiceLevel: 'None',\n          tags: ['Ice Cream', 'Vanilla', 'Sweet'],\n          vegetarian: true,\n          signature: false,\n          flavor: 'Vanilla',\n          type: 'Cone'\n        }]\n      },\n      promotions: [{\n        id: 'promo-001',\n        title: '2 for Tuesday',\n        description: 'Get any 2 chicken meals for only KES 750 (Save up to KES 250)',\n        discount: 'Save up to KES 250',\n        validUntil: '2024-12-31',\n        code: '2FORTUESDAY',\n        timing: 'Every Tuesday'\n      }, {\n        id: 'promo-002',\n        title: 'Family Deal',\n        description: 'Family bucket + 2 large chips + 2 drinks for only KES 1,500',\n        discount: 'Save KES 200',\n        validUntil: '2024-12-31',\n        code: 'FAMILYDEAL',\n        timing: 'Available Daily'\n      }, {\n        id: 'promo-003',\n        title: 'Student Discount',\n        description: '20% off all orders with valid student ID',\n        discount: 'Save 20%',\n        validUntil: '2024-12-31',\n        code: 'STUDENT20',\n        timing: 'Available Daily'\n      }],\n      deliveryInfo: {\n        available: true,\n        services: ['Jumia Food', 'Glovo', 'Uber Eats', 'Own Delivery'],\n        deliveryTime: '20-30 minutes',\n        deliveryFee: 'KES 100',\n        minimumOrder: 'KES 500',\n        freeDeliveryThreshold: 'KES 1,500',\n        guarantee: '30 minutes or free'\n      },\n      locations: ['Westlands', 'CBD', 'Kilimani', 'Lavington', 'Karen', 'Mombasa Road', 'Thika Road', 'Nakuru', 'Mombasa', 'Kisumu', 'Eldoret', 'Kakamega', 'Nyeri', 'Embu', 'Meru', 'Thika', 'Machakos'],\n      deals: ['2 for Tuesday', 'Family Deal', 'Student Discount', 'Lunch Special', 'Weekend Special', 'Happy Hour'],\n      rewards: {\n        available: true,\n        program: 'Chicken Inn Rewards',\n        benefits: ['Points on every order', 'Free meal on birthday', 'Exclusive member deals', 'Early access to promotions']\n      },\n      customization: {\n        available: true,\n        options: {\n          chickenTypes: ['Original', 'Spicy', 'Crispy', 'Grilled'],\n          sizes: ['Small', 'Medium', 'Large', 'Family'],\n          sauces: ['BBQ', 'Hot', 'Honey Mustard', 'Ranch', 'Sweet & Sour'],\n          sides: ['Chips', 'Coleslaw', 'Mashed Potatoes', 'Rice', 'Vegetables']\n        }\n      }\n    };\n  },\n  // Helper functions\n  findChickenInnId(searchData) {\n    var _searchData$restauran;\n    // Logic to find Chicken Inn ID in search results\n    const chickenInn = (_searchData$restauran = searchData.restaurants) === null || _searchData$restauran === void 0 ? void 0 : _searchData$restauran.find(r => r.name.toLowerCase().includes('chicken inn') || r.name.toLowerCase().includes('chickeninn'));\n    return chickenInn === null || chickenInn === void 0 ? void 0 : chickenInn.id;\n  },\n  transformDirectMenuData(data) {\n    // Transform direct API data to our format\n    return {\n      restaurant: CHICKEN_INN_CONFIG,\n      categories: data.categories || {},\n      promotions: data.promotions || [],\n      deliveryInfo: data.delivery || {},\n      locations: data.locations || [],\n      deals: data.deals || [],\n      rewards: data.rewards || {},\n      customization: data.customization || {}\n    };\n  },\n  transformJumiaMenuData(data) {\n    // Transform Jumia Food data to our format\n    return {\n      restaurant: CHICKEN_INN_CONFIG,\n      categories: this.groupByCategory(data.menu || []),\n      promotions: data.promotions || [],\n      deliveryInfo: {\n        available: true,\n        services: ['Jumia Food'],\n        deliveryTime: data.deliveryTime || '20-30 minutes',\n        deliveryFee: data.deliveryFee || 'KES 100',\n        minimumOrder: data.minimumOrder || 'KES 500'\n      },\n      locations: data.locations || [],\n      deals: data.deals || [],\n      rewards: data.rewards || {},\n      customization: data.customization || {}\n    };\n  },\n  transformGlovoMenuData(data) {\n    // Transform Glovo data to our format\n    return {\n      restaurant: CHICKEN_INN_CONFIG,\n      categories: this.groupByCategory(data.menu || []),\n      promotions: data.promotions || [],\n      deliveryInfo: {\n        available: true,\n        services: ['Glovo'],\n        deliveryTime: data.deliveryTime || '20-30 minutes',\n        deliveryFee: data.deliveryFee || 'KES 100',\n        minimumOrder: data.minimumOrder || 'KES 500'\n      },\n      locations: data.locations || [],\n      deals: data.deals || [],\n      rewards: data.rewards || {},\n      customization: data.customization || {}\n    };\n  },\n  groupByCategory(menuItems) {\n    // Group menu items by category\n    const categories = {};\n    menuItems.forEach(item => {\n      if (!categories[item.category]) {\n        categories[item.category] = [];\n      }\n      categories[item.category].push(item);\n    });\n    return categories;\n  },\n  // Get restaurant information\n  getRestaurantInfo() {\n    return CHICKEN_INN_CONFIG;\n  },\n  // Get current promotions\n  async getPromotions() {\n    try {\n      const response = await fetch(`${CHICKEN_INN_DIRECT_API.baseURL}${CHICKEN_INN_DIRECT_API.endpoints.promotions}`);\n      if (response.ok) {\n        return await response.json();\n      }\n    } catch (error) {\n      console.log('Using mock promotions');\n    }\n    return this.getEnhancedMockMenu().promotions;\n  },\n  // Check delivery availability\n  async checkDeliveryAvailability() {\n    try {\n      const response = await fetch(`${CHICKEN_INN_DIRECT_API.baseURL}${CHICKEN_INN_DIRECT_API.endpoints.delivery}`);\n      if (response.ok) {\n        return await response.json();\n      }\n    } catch (error) {\n      console.log('Using mock delivery info');\n    }\n    return this.getEnhancedMockMenu().deliveryInfo;\n  },\n  // Get deals\n  async getDeals() {\n    try {\n      const response = await fetch(`${CHICKEN_INN_DIRECT_API.baseURL}${CHICKEN_INN_DIRECT_API.endpoints.deals}`);\n      if (response.ok) {\n        return await response.json();\n      }\n    } catch (error) {\n      console.log('Using mock deals');\n    }\n    return this.getEnhancedMockMenu().deals;\n  },\n  // Get rewards info\n  async getRewards() {\n    try {\n      const response = await fetch(`${CHICKEN_INN_DIRECT_API.baseURL}${CHICKEN_INN_DIRECT_API.endpoints.rewards}`);\n      if (response.ok) {\n        return await response.json();\n      }\n    } catch (error) {\n      console.log('Using mock rewards info');\n    }\n    return this.getEnhancedMockMenu().rewards;\n  },\n  // Get customization options\n  async getCustomization() {\n    try {\n      const response = await fetch(`${CHICKEN_INN_DIRECT_API.baseURL}${CHICKEN_INN_DIRECT_API.endpoints.customization}`);\n      if (response.ok) {\n        return await response.json();\n      }\n    } catch (error) {\n      console.log('Using mock customization info');\n    }\n    return this.getEnhancedMockMenu().customization;\n  },\n  // Get all locations\n  async getLocations() {\n    try {\n      const response = await fetch(`${CHICKEN_INN_DIRECT_API.baseURL}${CHICKEN_INN_DIRECT_API.endpoints.locations}`);\n      if (response.ok) {\n        return await response.json();\n      }\n    } catch (error) {\n      console.log('Using mock locations');\n    }\n    return this.getEnhancedMockMenu().locations;\n  }\n};\nexport default chickenInnAPI;","map":{"version":3,"names":["CHICKEN_INN_CONFIG","name","location","phone","website","coordinates","lat","lng","description","founded","branches","specialties","CHICKEN_INN_DIRECT_API","baseURL","endpoints","menu","promotions","locations","delivery","deals","rewards","customization","JUMIA_FOOD_API","search","categories","headers","GLOVO_API","restaurants","chickenInnAPI","getFullMenu","directMenu","getDirectMenu","jumiaMenu","getJumiaMenu","glovoMenu","getGlovoMenu","getEnhancedMockMenu","error","console","response","fetch","ok","data","json","transformDirectMenuData","log","searchResponse","searchData","chickenInnId","findChickenInnId","menuResponse","replace","menuData","transformJumiaMenuData","transformGlovoMenuData","restaurant","id","price","category","image","isPromo","promoText","calories","serves","allergens","preparationTime","spiceLevel","tags","vegetarian","signature","mealType","includes","burgerType","toppings","pieceType","sauceOptions","size","seasoning","ingredients","type","flavor","title","discount","validUntil","code","timing","deliveryInfo","available","services","deliveryTime","deliveryFee","minimumOrder","freeDeliveryThreshold","guarantee","program","benefits","options","chickenTypes","sizes","sauces","sides","_searchData$restauran","chickenInn","find","r","toLowerCase","groupByCategory","menuItems","forEach","item","push","getRestaurantInfo","getPromotions","checkDeliveryAvailability","getDeals","getRewards","getCustomization","getLocations"],"sources":["C:/Projects/gawa/frontend/src/api/chickenInnAPI.js"],"sourcesContent":["// Chicken Inn API Integration Service\r\n// This service provides multiple ways to get Chicken Inn's menu data\r\n\r\n// Base configuration\r\nconst CHICKEN_INN_CONFIG = {\r\n  name: 'Chicken Inn',\r\n  location: 'Multiple locations across Kenya',\r\n  phone: '+254 20 777 9999',\r\n  website: 'https://www.chickeninn.co.ke',\r\n  coordinates: { lat: -1.2921, lng: 36.8219 }, // Nairobi location\r\n  description: 'Kenya\\'s Favorite Chicken! Serving delicious chicken meals, burgers, and fast food with quality ingredients',\r\n  founded: 1982,\r\n  branches: 30,\r\n  specialties: ['Fried Chicken', 'Chicken Burgers', 'Fast Food', 'Family Meals', 'Delivery', 'Takeaway']\r\n};\r\n\r\n// Option 1: Direct API endpoints (if Chicken Inn has them)\r\nconst CHICKEN_INN_DIRECT_API = {\r\n  baseURL: 'https://api.chickeninn.co.ke', // Hypothetical API endpoint\r\n  endpoints: {\r\n    menu: '/api/v1/menu',\r\n    promotions: '/api/v1/promotions',\r\n    locations: '/api/v1/locations',\r\n    delivery: '/api/v1/delivery',\r\n    deals: '/api/v1/deals',\r\n    rewards: '/api/v1/rewards',\r\n    customization: '/api/v1/customization'\r\n  }\r\n};\r\n\r\n// Option 2: Jumia Food API integration\r\nconst JUMIA_FOOD_API = {\r\n  baseURL: 'https://food.jumia.co.ke/api',\r\n  endpoints: {\r\n    search: '/restaurants/search',\r\n    menu: '/restaurants/{id}/menu',\r\n    categories: '/categories'\r\n  },\r\n  headers: {\r\n    'Authorization': 'Bearer YOUR_JUMIA_API_KEY',\r\n    'Content-Type': 'application/json'\r\n  }\r\n};\r\n\r\n// Option 3: Glovo API integration\r\nconst GLOVO_API = {\r\n  baseURL: 'https://api.glovoapp.com',\r\n  endpoints: {\r\n    restaurants: '/v3/restaurants',\r\n    menu: '/v3/restaurants/{id}/menu',\r\n    categories: '/v3/categories'\r\n  },\r\n  headers: {\r\n    'Authorization': 'Bearer YOUR_GLOVO_API_KEY',\r\n    'Content-Type': 'application/json'\r\n  }\r\n};\r\n\r\n// Main API functions\r\nexport const chickenInnAPI = {\r\n  // Get full menu with real-time data\r\n  async getFullMenu() {\r\n    try {\r\n      // Try direct API first\r\n      const directMenu = await this.getDirectMenu();\r\n      if (directMenu) return directMenu;\r\n\r\n      // Try Jumia Food API\r\n      const jumiaMenu = await this.getJumiaMenu();\r\n      if (jumiaMenu) return jumiaMenu;\r\n\r\n      // Try Glovo API\r\n      const glovoMenu = await this.getGlovoMenu();\r\n      if (glovoMenu) return glovoMenu;\r\n\r\n      // Fallback to enhanced mock data\r\n      return this.getEnhancedMockMenu();\r\n    } catch (error) {\r\n      console.error('Error fetching Chicken Inn menu:', error);\r\n      return this.getEnhancedMockMenu();\r\n    }\r\n  },\r\n\r\n  // Try direct Chicken Inn API\r\n  async getDirectMenu() {\r\n    try {\r\n      const response = await fetch(`${CHICKEN_INN_DIRECT_API.baseURL}${CHICKEN_INN_DIRECT_API.endpoints.menu}`);\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        return this.transformDirectMenuData(data);\r\n      }\r\n    } catch (error) {\r\n      console.log('Direct API not available, trying alternatives...');\r\n    }\r\n    return null;\r\n  },\r\n\r\n  // Try Jumia Food API\r\n  async getJumiaMenu() {\r\n    try {\r\n      // Search for Chicken Inn on Jumia Food\r\n      const searchResponse = await fetch(`${JUMIA_FOOD_API.baseURL}${JUMIA_FOOD_API.endpoints.search}?q=chicken+inn`, {\r\n        headers: JUMIA_FOOD_API.headers\r\n      });\r\n      \r\n      if (searchResponse.ok) {\r\n        const searchData = await searchResponse.json();\r\n        const chickenInnId = this.findChickenInnId(searchData);\r\n        \r\n        if (chickenInnId) {\r\n          const menuResponse = await fetch(`${JUMIA_FOOD_API.baseURL}${JUMIA_FOOD_API.endpoints.menu.replace('{id}', chickenInnId)}`, {\r\n            headers: JUMIA_FOOD_API.headers\r\n          });\r\n          \r\n          if (menuResponse.ok) {\r\n            const menuData = await menuResponse.json();\r\n            return this.transformJumiaMenuData(menuData);\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log('Jumia Food API not available, trying alternatives...');\r\n    }\r\n    return null;\r\n  },\r\n\r\n  // Try Glovo API\r\n  async getGlovoMenu() {\r\n    try {\r\n      // Search for Chicken Inn on Glovo\r\n      const searchResponse = await fetch(`${GLOVO_API.baseURL}${GLOVO_API.endpoints.restaurants}?search=chicken+inn`, {\r\n        headers: GLOVO_API.headers\r\n      });\r\n      \r\n      if (searchResponse.ok) {\r\n        const searchData = await searchResponse.json();\r\n        const chickenInnId = this.findChickenInnId(searchData);\r\n        \r\n        if (chickenInnId) {\r\n          const menuResponse = await fetch(`${GLOVO_API.baseURL}${GLOVO_API.endpoints.menu.replace('{id}', chickenInnId)}`, {\r\n            headers: GLOVO_API.headers\r\n          });\r\n          \r\n          if (menuResponse.ok) {\r\n            const menuData = await menuResponse.json();\r\n            return this.transformGlovoMenuData(menuData);\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log('Glovo API not available, using fallback...');\r\n    }\r\n    return null;\r\n  },\r\n\r\n  // Enhanced mock menu with realistic Chicken Inn data\r\n  getEnhancedMockMenu() {\r\n    return {\r\n      restaurant: CHICKEN_INN_CONFIG,\r\n      categories: {\r\n        'Chicken Meals': [\r\n          {\r\n            id: 'cm-001',\r\n            name: '2 Piece Chicken Meal',\r\n            price: 'KES 450',\r\n            description: '2 pieces of crispy fried chicken with chips and a drink',\r\n            category: 'Chicken Meals',\r\n            image: '/images/food/chicken-inn-2piece-meal.jpg',\r\n            isPromo: true,\r\n            promoText: 'Popular',\r\n            calories: '650',\r\n            serves: '1 person',\r\n            allergens: ['Chicken', 'Gluten', 'Potatoes'],\r\n            preparationTime: '8-12 min',\r\n            spiceLevel: 'Mild',\r\n            tags: ['Chicken', 'Meal', 'Popular'],\r\n            vegetarian: false,\r\n            signature: true,\r\n            mealType: 'Combo',\r\n            includes: ['2 Chicken Pieces', 'Chips', 'Drink']\r\n          },\r\n          {\r\n            id: 'cm-002',\r\n            name: '3 Piece Chicken Meal',\r\n            price: 'KES 550',\r\n            description: '3 pieces of crispy fried chicken with chips and a drink',\r\n            category: 'Chicken Meals',\r\n            image: '/images/food/chicken-inn-3piece-meal.jpg',\r\n            isPromo: false,\r\n            calories: '850',\r\n            serves: '1 person',\r\n            allergens: ['Chicken', 'Gluten', 'Potatoes'],\r\n            preparationTime: '8-12 min',\r\n            spiceLevel: 'Mild',\r\n            tags: ['Chicken', 'Meal', 'Value'],\r\n            vegetarian: false,\r\n            signature: false,\r\n            mealType: 'Combo',\r\n            includes: ['3 Chicken Pieces', 'Chips', 'Drink']\r\n          },\r\n          {\r\n            id: 'cm-003',\r\n            name: 'Family Bucket (8 Pieces)',\r\n            price: 'KES 1,200',\r\n            description: '8 pieces of crispy fried chicken with 2 large chips and 2 drinks',\r\n            category: 'Chicken Meals',\r\n            image: '/images/food/chicken-inn-family-bucket.jpg',\r\n            isPromo: false,\r\n            calories: '2,400',\r\n            serves: '3-4 people',\r\n            allergens: ['Chicken', 'Gluten', 'Potatoes'],\r\n            preparationTime: '15-20 min',\r\n            spiceLevel: 'Mild',\r\n            tags: ['Chicken', 'Family', 'Bucket'],\r\n            vegetarian: false,\r\n            signature: false,\r\n            mealType: 'Family Pack',\r\n            includes: ['8 Chicken Pieces', '2 Large Chips', '2 Drinks']\r\n          }\r\n        ],\r\n        'Chicken Burgers': [\r\n          {\r\n            id: 'cb-001',\r\n            name: 'Chicken Burger',\r\n            price: 'KES 350',\r\n            description: 'Crispy chicken fillet with lettuce, tomato, and special sauce',\r\n            category: 'Chicken Burgers',\r\n            image: '/images/food/chicken-inn-chicken-burger.jpg',\r\n            isPromo: true,\r\n            promoText: 'Classic',\r\n            calories: '480',\r\n            serves: '1 person',\r\n            allergens: ['Chicken', 'Gluten', 'Dairy'],\r\n            preparationTime: '5-8 min',\r\n            spiceLevel: 'Mild',\r\n            tags: ['Burger', 'Chicken', 'Classic'],\r\n            vegetarian: false,\r\n            signature: true,\r\n            burgerType: 'Classic',\r\n            toppings: ['Lettuce', 'Tomato', 'Special Sauce']\r\n          },\r\n          {\r\n            id: 'cb-002',\r\n            name: 'Spicy Chicken Burger',\r\n            price: 'KES 380',\r\n            description: 'Spicy chicken fillet with jalapeños, lettuce, and hot sauce',\r\n            category: 'Chicken Burgers',\r\n            image: '/images/food/chicken-inn-spicy-burger.jpg',\r\n            isPromo: false,\r\n            calories: '520',\r\n            serves: '1 person',\r\n            allergens: ['Chicken', 'Gluten', 'Dairy'],\r\n            preparationTime: '5-8 min',\r\n            spiceLevel: 'Hot',\r\n            tags: ['Burger', 'Chicken', 'Spicy'],\r\n            vegetarian: false,\r\n            signature: false,\r\n            burgerType: 'Spicy',\r\n            toppings: ['Jalapeños', 'Lettuce', 'Hot Sauce']\r\n          }\r\n        ],\r\n        'Chicken Pieces': [\r\n          {\r\n            id: 'cp-001',\r\n            name: 'Chicken Wings (6 Pcs)',\r\n            price: 'KES 280',\r\n            description: '6 crispy chicken wings with your choice of sauce',\r\n            category: 'Chicken Pieces',\r\n            image: '/images/food/chicken-inn-wings.jpg',\r\n            isPromo: false,\r\n            calories: '420',\r\n            serves: '1-2 people',\r\n            allergens: ['Chicken', 'Gluten'],\r\n            preparationTime: '8-12 min',\r\n            spiceLevel: 'Medium',\r\n            tags: ['Wings', 'Chicken', 'Crispy'],\r\n            vegetarian: false,\r\n            signature: false,\r\n            pieceType: 'Wings',\r\n            sauceOptions: ['BBQ', 'Hot', 'Honey Mustard']\r\n          },\r\n          {\r\n            id: 'cp-002',\r\n            name: 'Chicken Strips (5 Pcs)',\r\n            price: 'KES 320',\r\n            description: '5 breaded chicken strips served with dipping sauce',\r\n            category: 'Chicken Pieces',\r\n            image: '/images/food/chicken-inn-strips.jpg',\r\n            isPromo: false,\r\n            calories: '380',\r\n            serves: '1-2 people',\r\n            allergens: ['Chicken', 'Gluten', 'Eggs'],\r\n            preparationTime: '8-12 min',\r\n            spiceLevel: 'Mild',\r\n            tags: ['Strips', 'Chicken', 'Breaded'],\r\n            vegetarian: false,\r\n            signature: false,\r\n            pieceType: 'Strips',\r\n            sauceOptions: ['Ranch', 'BBQ', 'Honey Mustard']\r\n          }\r\n        ],\r\n        'Sides': [\r\n          {\r\n            id: 'sd-001',\r\n            name: 'French Fries (Large)',\r\n            price: 'KES 180',\r\n            description: 'Large portion of crispy golden fries seasoned with salt',\r\n            category: 'Sides',\r\n            image: '/images/food/chicken-inn-fries.jpg',\r\n            isPromo: false,\r\n            calories: '450',\r\n            serves: '1-2 people',\r\n            allergens: ['Potatoes'],\r\n            preparationTime: '5-8 min',\r\n            spiceLevel: 'None',\r\n            tags: ['Fries', 'Crispy', 'Classic'],\r\n            vegetarian: true,\r\n            signature: false,\r\n            size: 'Large',\r\n            seasoning: 'Salt'\r\n          },\r\n          {\r\n            id: 'sd-002',\r\n            name: 'Coleslaw',\r\n            price: 'KES 120',\r\n            description: 'Fresh cabbage and carrot coleslaw with creamy dressing',\r\n            category: 'Sides',\r\n            image: '/images/food/chicken-inn-coleslaw.jpg',\r\n            isPromo: false,\r\n            calories: '180',\r\n            serves: '1 person',\r\n            allergens: ['Dairy', 'Eggs'],\r\n            preparationTime: '2-3 min',\r\n            spiceLevel: 'None',\r\n            tags: ['Coleslaw', 'Fresh', 'Creamy'],\r\n            vegetarian: true,\r\n            signature: false,\r\n            size: 'Regular',\r\n            ingredients: ['Cabbage', 'Carrots', 'Creamy Dressing']\r\n          }\r\n        ],\r\n        'Beverages': [\r\n          {\r\n            id: 'bv-001',\r\n            name: 'Coca Cola (500ml)',\r\n            price: 'KES 80',\r\n            description: 'Refreshing Coca Cola soft drink',\r\n            category: 'Beverages',\r\n            image: '/images/food/chicken-inn-coca-cola.jpg',\r\n            isPromo: false,\r\n            calories: '210',\r\n            serves: '1 person',\r\n            allergens: ['None'],\r\n            preparationTime: '1-2 min',\r\n            spiceLevel: 'None',\r\n            tags: ['Soft Drink', 'Refreshing', 'Classic'],\r\n            vegetarian: true,\r\n            signature: false,\r\n            size: '500ml',\r\n            type: 'Carbonated'\r\n          },\r\n          {\r\n            id: 'bv-002',\r\n            name: 'Sprite (500ml)',\r\n            price: 'KES 80',\r\n            description: 'Clear lemon-lime soft drink',\r\n            category: 'Beverages',\r\n            image: '/images/food/chicken-inn-sprite.jpg',\r\n            isPromo: false,\r\n            calories: '200',\r\n            serves: '1 person',\r\n            allergens: ['None'],\r\n            preparationTime: '1-2 min',\r\n            spiceLevel: 'None',\r\n            tags: ['Soft Drink', 'Lemon-Lime', 'Refreshing'],\r\n            vegetarian: true,\r\n            signature: false,\r\n            size: '500ml',\r\n            type: 'Carbonated'\r\n          }\r\n        ],\r\n        'Desserts': [\r\n          {\r\n            id: 'ds-001',\r\n            name: 'Ice Cream (Vanilla)',\r\n            price: 'KES 150',\r\n            description: 'Creamy vanilla ice cream in a cone',\r\n            category: 'Desserts',\r\n            image: '/images/food/chicken-inn-ice-cream.jpg',\r\n            isPromo: false,\r\n            calories: '280',\r\n            serves: '1 person',\r\n            allergens: ['Dairy'],\r\n            preparationTime: '2-3 min',\r\n            spiceLevel: 'None',\r\n            tags: ['Ice Cream', 'Vanilla', 'Sweet'],\r\n            vegetarian: true,\r\n            signature: false,\r\n            flavor: 'Vanilla',\r\n            type: 'Cone'\r\n          }\r\n        ]\r\n      },\r\n      promotions: [\r\n        {\r\n          id: 'promo-001',\r\n          title: '2 for Tuesday',\r\n          description: 'Get any 2 chicken meals for only KES 750 (Save up to KES 250)',\r\n          discount: 'Save up to KES 250',\r\n          validUntil: '2024-12-31',\r\n          code: '2FORTUESDAY',\r\n          timing: 'Every Tuesday'\r\n        },\r\n        {\r\n          id: 'promo-002',\r\n          title: 'Family Deal',\r\n          description: 'Family bucket + 2 large chips + 2 drinks for only KES 1,500',\r\n          discount: 'Save KES 200',\r\n          validUntil: '2024-12-31',\r\n          code: 'FAMILYDEAL',\r\n          timing: 'Available Daily'\r\n        },\r\n        {\r\n          id: 'promo-003',\r\n          title: 'Student Discount',\r\n          description: '20% off all orders with valid student ID',\r\n          discount: 'Save 20%',\r\n          validUntil: '2024-12-31',\r\n          code: 'STUDENT20',\r\n          timing: 'Available Daily'\r\n        }\r\n      ],\r\n      deliveryInfo: {\r\n        available: true,\r\n        services: ['Jumia Food', 'Glovo', 'Uber Eats', 'Own Delivery'],\r\n        deliveryTime: '20-30 minutes',\r\n        deliveryFee: 'KES 100',\r\n        minimumOrder: 'KES 500',\r\n        freeDeliveryThreshold: 'KES 1,500',\r\n        guarantee: '30 minutes or free'\r\n      },\r\n      locations: [\r\n        'Westlands',\r\n        'CBD',\r\n        'Kilimani',\r\n        'Lavington',\r\n        'Karen',\r\n        'Mombasa Road',\r\n        'Thika Road',\r\n        'Nakuru',\r\n        'Mombasa',\r\n        'Kisumu',\r\n        'Eldoret',\r\n        'Kakamega',\r\n        'Nyeri',\r\n        'Embu',\r\n        'Meru',\r\n        'Thika',\r\n        'Machakos'\r\n      ],\r\n      deals: [\r\n        '2 for Tuesday',\r\n        'Family Deal',\r\n        'Student Discount',\r\n        'Lunch Special',\r\n        'Weekend Special',\r\n        'Happy Hour'\r\n      ],\r\n      rewards: {\r\n        available: true,\r\n        program: 'Chicken Inn Rewards',\r\n        benefits: ['Points on every order', 'Free meal on birthday', 'Exclusive member deals', 'Early access to promotions']\r\n      },\r\n      customization: {\r\n        available: true,\r\n        options: {\r\n          chickenTypes: ['Original', 'Spicy', 'Crispy', 'Grilled'],\r\n          sizes: ['Small', 'Medium', 'Large', 'Family'],\r\n          sauces: ['BBQ', 'Hot', 'Honey Mustard', 'Ranch', 'Sweet & Sour'],\r\n          sides: ['Chips', 'Coleslaw', 'Mashed Potatoes', 'Rice', 'Vegetables']\r\n        }\r\n      }\r\n    };\r\n  },\r\n\r\n  // Helper functions\r\n  findChickenInnId(searchData) {\r\n    // Logic to find Chicken Inn ID in search results\r\n    const chickenInn = searchData.restaurants?.find(r => \r\n      r.name.toLowerCase().includes('chicken inn') || r.name.toLowerCase().includes('chickeninn')\r\n    );\r\n    return chickenInn?.id;\r\n  },\r\n\r\n  transformDirectMenuData(data) {\r\n    // Transform direct API data to our format\r\n    return {\r\n      restaurant: CHICKEN_INN_CONFIG,\r\n      categories: data.categories || {},\r\n      promotions: data.promotions || [],\r\n      deliveryInfo: data.delivery || {},\r\n      locations: data.locations || [],\r\n      deals: data.deals || [],\r\n      rewards: data.rewards || {},\r\n      customization: data.customization || {}\r\n    };\r\n  },\r\n\r\n  transformJumiaMenuData(data) {\r\n    // Transform Jumia Food data to our format\r\n    return {\r\n      restaurant: CHICKEN_INN_CONFIG,\r\n      categories: this.groupByCategory(data.menu || []),\r\n      promotions: data.promotions || [],\r\n      deliveryInfo: {\r\n        available: true,\r\n        services: ['Jumia Food'],\r\n        deliveryTime: data.deliveryTime || '20-30 minutes',\r\n        deliveryFee: data.deliveryFee || 'KES 100',\r\n        minimumOrder: data.minimumOrder || 'KES 500'\r\n      },\r\n      locations: data.locations || [],\r\n      deals: data.deals || [],\r\n      rewards: data.rewards || {},\r\n      customization: data.customization || {}\r\n    };\r\n  },\r\n\r\n  transformGlovoMenuData(data) {\r\n    // Transform Glovo data to our format\r\n    return {\r\n      restaurant: CHICKEN_INN_CONFIG,\r\n      categories: this.groupByCategory(data.menu || []),\r\n      promotions: data.promotions || [],\r\n      deliveryInfo: {\r\n        available: true,\r\n        services: ['Glovo'],\r\n        deliveryTime: data.deliveryTime || '20-30 minutes',\r\n        deliveryFee: data.deliveryFee || 'KES 100',\r\n        minimumOrder: data.minimumOrder || 'KES 500'\r\n      },\r\n      locations: data.locations || [],\r\n      deals: data.deals || [],\r\n      rewards: data.rewards || {},\r\n      customization: data.customization || {}\r\n    };\r\n  },\r\n\r\n  groupByCategory(menuItems) {\r\n    // Group menu items by category\r\n    const categories = {};\r\n    menuItems.forEach(item => {\r\n      if (!categories[item.category]) {\r\n        categories[item.category] = [];\r\n      }\r\n      categories[item.category].push(item);\r\n    });\r\n    return categories;\r\n  },\r\n\r\n  // Get restaurant information\r\n  getRestaurantInfo() {\r\n    return CHICKEN_INN_CONFIG;\r\n  },\r\n\r\n  // Get current promotions\r\n  async getPromotions() {\r\n    try {\r\n      const response = await fetch(`${CHICKEN_INN_DIRECT_API.baseURL}${CHICKEN_INN_DIRECT_API.endpoints.promotions}`);\r\n      if (response.ok) {\r\n        return await response.json();\r\n      }\r\n    } catch (error) {\r\n      console.log('Using mock promotions');\r\n    }\r\n    \r\n    return this.getEnhancedMockMenu().promotions;\r\n  },\r\n\r\n  // Check delivery availability\r\n  async checkDeliveryAvailability() {\r\n    try {\r\n      const response = await fetch(`${CHICKEN_INN_DIRECT_API.baseURL}${CHICKEN_INN_DIRECT_API.endpoints.delivery}`);\r\n      if (response.ok) {\r\n        return await response.json();\r\n      }\r\n    } catch (error) {\r\n      console.log('Using mock delivery info');\r\n    }\r\n    \r\n    return this.getEnhancedMockMenu().deliveryInfo;\r\n  },\r\n\r\n  // Get deals\r\n  async getDeals() {\r\n    try {\r\n      const response = await fetch(`${CHICKEN_INN_DIRECT_API.baseURL}${CHICKEN_INN_DIRECT_API.endpoints.deals}`);\r\n      if (response.ok) {\r\n        return await response.json();\r\n      }\r\n    } catch (error) {\r\n      console.log('Using mock deals');\r\n    }\r\n    \r\n    return this.getEnhancedMockMenu().deals;\r\n  },\r\n\r\n  // Get rewards info\r\n  async getRewards() {\r\n    try {\r\n      const response = await fetch(`${CHICKEN_INN_DIRECT_API.baseURL}${CHICKEN_INN_DIRECT_API.endpoints.rewards}`);\r\n      if (response.ok) {\r\n        return await response.json();\r\n      }\r\n    } catch (error) {\r\n      console.log('Using mock rewards info');\r\n    }\r\n    \r\n    return this.getEnhancedMockMenu().rewards;\r\n  },\r\n\r\n  // Get customization options\r\n  async getCustomization() {\r\n    try {\r\n      const response = await fetch(`${CHICKEN_INN_DIRECT_API.baseURL}${CHICKEN_INN_DIRECT_API.endpoints.customization}`);\r\n      if (response.ok) {\r\n        return await response.json();\r\n      }\r\n    } catch (error) {\r\n      console.log('Using mock customization info');\r\n    }\r\n    \r\n    return this.getEnhancedMockMenu().customization;\r\n  },\r\n\r\n  // Get all locations\r\n  async getLocations() {\r\n    try {\r\n      const response = await fetch(`${CHICKEN_INN_DIRECT_API.baseURL}${CHICKEN_INN_DIRECT_API.endpoints.locations}`);\r\n      if (response.ok) {\r\n        return await response.json();\r\n      }\r\n    } catch (error) {\r\n      console.log('Using mock locations');\r\n    }\r\n    \r\n    return this.getEnhancedMockMenu().locations;\r\n  }\r\n};\r\n\r\nexport default chickenInnAPI;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}