{"ast":null,"code":"// Simple restaurant data service using mock data\n\n// Get restaurant menu and food items (using Glovo, Google Places, or external menu APIs)\nexport const getRestaurantMenu = async (restaurantId, restaurantName) => {\n  try {\n    // First, try to get menu from Glovo if it's a Glovo restaurant\n    if (restaurantId && restaurantId.startsWith('glovo_')) {\n      try {\n        const glovoMenu = await getGlovoRestaurantMenu(restaurantId);\n        if (glovoMenu && glovoMenu.length > 0) {\n          return glovoMenu;\n        }\n      } catch (glovoError) {\n        console.log('Glovo menu fetch failed, using fallback...');\n      }\n    }\n\n    // Fallback to mock data based on restaurant type\n    const mockMenus = {\n      'Carnivore Restaurant': [{\n        name: \"Nyama Choma\",\n        price: \"KES 2,500\",\n        description: \"Grilled goat meat with ugali\",\n        category: \"Main Course\"\n      }, {\n        name: \"Beef Ribs\",\n        price: \"KES 3,200\",\n        description: \"Slow-cooked beef ribs\",\n        category: \"Main Course\"\n      }, {\n        name: \"Chicken Wings\",\n        price: \"KES 1,800\",\n        description: \"Spicy grilled wings\",\n        category: \"Appetizer\"\n      }, {\n        name: \"Ugali\",\n        price: \"KES 300\",\n        description: \"Traditional maize meal\",\n        category: \"Side Dish\"\n      }, {\n        name: \"Sukuma Wiki\",\n        price: \"KES 250\",\n        description: \"Collard greens\",\n        category: \"Side Dish\"\n      }],\n      'Java House': [{\n        name: \"Chicken Burger\",\n        price: \"KES 850\",\n        description: \"Grilled chicken with fries\",\n        category: \"Main Course\"\n      }, {\n        name: \"Cappuccino\",\n        price: \"KES 250\",\n        description: \"Freshly brewed coffee\",\n        category: \"Beverage\"\n      }, {\n        name: \"Caesar Salad\",\n        price: \"KES 650\",\n        description: \"Fresh greens with dressing\",\n        category: \"Salad\"\n      }, {\n        name: \"Flat White\",\n        price: \"KES 280\",\n        description: \"Smooth coffee with milk\",\n        category: \"Beverage\"\n      }, {\n        name: \"Chicken Pasta\",\n        price: \"KES 750\",\n        description: \"Creamy pasta with chicken\",\n        category: \"Main Course\"\n      }],\n      'Tamarind Restaurant': [{\n        name: \"Grilled Lobster\",\n        price: \"KES 4,500\",\n        description: \"Fresh lobster with garlic butter\",\n        category: \"Seafood\"\n      }, {\n        name: \"Fish Curry\",\n        price: \"KES 2,800\",\n        description: \"Spicy fish curry with rice\",\n        category: \"Main Course\"\n      }, {\n        name: \"Prawn Biryani\",\n        price: \"KES 3,200\",\n        description: \"Aromatic rice with prawns\",\n        category: \"Main Course\"\n      }, {\n        name: \"Coconut Rice\",\n        price: \"KES 450\",\n        description: \"Fragrant coconut rice\",\n        category: \"Side Dish\"\n      }, {\n        name: \"Mango Lassi\",\n        price: \"KES 350\",\n        description: \"Sweet mango yogurt drink\",\n        category: \"Beverage\"\n      }],\n      // Add menus for major chains\n      'KFC': [{\n        name: \"Original Recipe Chicken\",\n        price: \"KES 450\",\n        description: \"2 pieces of fried chicken\",\n        category: \"Main Course\"\n      }, {\n        name: \"Zinger Burger\",\n        price: \"KES 380\",\n        description: \"Spicy chicken burger with fries\",\n        category: \"Main Course\"\n      }, {\n        name: \"Chicken Wings\",\n        price: \"KES 320\",\n        description: \"6 pieces of spicy wings\",\n        category: \"Appetizer\"\n      }, {\n        name: \"French Fries\",\n        price: \"KES 180\",\n        description: \"Crispy golden fries\",\n        category: \"Side Dish\"\n      }, {\n        name: \"Coca Cola\",\n        price: \"KES 120\",\n        description: \"500ml soft drink\",\n        category: \"Beverage\"\n      }],\n      'Pizza Hut': [{\n        name: \"Margherita Pizza\",\n        price: \"KES 850\",\n        description: \"Classic tomato and mozzarella\",\n        category: \"Pizza\"\n      }, {\n        name: \"Pepperoni Pizza\",\n        price: \"KES 950\",\n        description: \"Spicy pepperoni with cheese\",\n        category: \"Pizza\"\n      }, {\n        name: \"Chicken Supreme\",\n        price: \"KES 1100\",\n        description: \"Chicken, mushrooms, peppers\",\n        category: \"Pizza\"\n      }, {\n        name: \"Garlic Bread\",\n        price: \"KES 200\",\n        description: \"Fresh baked garlic bread\",\n        category: \"Side Dish\"\n      }, {\n        name: \"Chocolate Fudge Cake\",\n        price: \"KES 350\",\n        description: \"Rich chocolate dessert\",\n        category: \"Dessert\"\n      }]\n    };\n\n    // Return mock menu if available, otherwise generic menu\n    if (mockMenus[restaurantName]) {\n      return mockMenus[restaurantName];\n    }\n\n    // Generic menu for unknown restaurants\n    return [{\n      name: \"Signature Dish\",\n      price: \"KES 1,500\",\n      description: \"Chef's special creation\",\n      category: \"Main Course\"\n    }, {\n      name: \"Local Special\",\n      price: \"KES 1,200\",\n      description: \"Traditional local cuisine\",\n      category: \"Main Course\"\n    }, {\n      name: \"Fresh Juice\",\n      price: \"KES 300\",\n      description: \"Seasonal fruit juice\",\n      category: \"Beverage\"\n    }];\n  } catch (error) {\n    console.error('Error fetching restaurant menu:', error);\n    return [];\n  }\n};\n\n// Main function to get restaurants with fallback options\nexport const getRestaurantsInNairobi = async (useMockData = false) => {\n  if (useMockData) {\n    // Return mock data for development/testing\n    return getMockRestaurants();\n  }\n  try {\n    // Try Glovo API first (best for Nairobi delivery)\n    try {\n      const glovoRestaurants = await searchRestaurantsGlovo();\n      if (glovoRestaurants && glovoRestaurants.length > 0) {\n        console.log('Using Glovo API data');\n        return glovoRestaurants;\n      }\n    } catch (glovoError) {\n      console.log('Glovo API failed, trying alternatives...');\n    }\n\n    // Try Google Places API\n    if (GOOGLE_PLACES_API_KEY && GOOGLE_PLACES_API_KEY !== 'YOUR_GOOGLE_PLACES_API_KEY') {\n      const places = await searchRestaurantsGooglePlaces();\n      return transformGooglePlacesData(places);\n    }\n\n    // Fallback to Yelp API\n    if (YELP_API_KEY && YELP_API_KEY !== 'YOUR_YELP_API_KEY') {\n      const businesses = await searchRestaurantsYelp();\n      return transformYelpData(businesses);\n    }\n\n    // If no API keys available, return mock data\n    console.warn('No API keys configured. Using mock data.');\n    return getMockRestaurants();\n  } catch (error) {\n    console.error('Error fetching restaurants:', error);\n    // Fallback to mock data on error\n    return getMockRestaurants();\n  }\n};\n\n// Mock data fallback\nconst getMockRestaurants = () => [\n// Local Nairobi Restaurants\n{\n  id: 1,\n  name: \"Carnivore Restaurant\",\n  location: \"Langata Road, Nairobi\",\n  rating: 4.5,\n  priceRange: \"$$$\",\n  cuisine: \"African, BBQ\",\n  image: \"https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=400&h=300&fit=crop\",\n  coordinates: {\n    lat: -1.2921,\n    lng: 36.8219\n  },\n  openNow: true,\n  userRatingsTotal: 1250,\n  type: \"local\"\n}, {\n  id: 2,\n  name: \"Java House\",\n  location: \"Westlands, Nairobi\",\n  rating: 4.3,\n  priceRange: \"$$\",\n  cuisine: \"International, Coffee\",\n  image: \"https://images.unsplash.com/photo-1555396273-367ea4eb4db5?w=400&h=300&fit=crop\",\n  coordinates: {\n    lat: -1.2921,\n    lng: 36.8219\n  },\n  openNow: true,\n  userRatingsTotal: 890,\n  type: \"local\"\n}, {\n  id: 3,\n  name: \"Tamarind Restaurant\",\n  location: \"Mombasa Road, Nairobi\",\n  rating: 4.7,\n  priceRange: \"$$$\",\n  cuisine: \"Seafood, International\",\n  image: \"https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=400&h=300&fit=crop\",\n  coordinates: {\n    lat: -1.2921,\n    lng: 36.8219\n  },\n  openNow: true,\n  userRatingsTotal: 567,\n  type: \"local\"\n}, {\n  id: 4,\n  name: \"Artcaffe\",\n  location: \"CBD, Nairobi\",\n  rating: 4.2,\n  priceRange: \"$$\",\n  cuisine: \"Cafe, International\",\n  image: \"https://images.unsplash.com/photo-1554118811-1e0d58224f24?w=400&h=300&fit=crop\",\n  coordinates: {\n    lat: -1.2921,\n    lng: 36.8219\n  },\n  openNow: true,\n  userRatingsTotal: 432,\n  type: \"local\"\n}, {\n  id: 5,\n  name: \"Nyama Mama\",\n  location: \"Kilimani, Nairobi\",\n  rating: 4.4,\n  priceRange: \"$$\",\n  cuisine: \"African, Fusion\",\n  image: \"https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=400&h=300&fit=crop\",\n  coordinates: {\n    lat: -1.2921,\n    lng: 36.8219\n  },\n  openNow: true,\n  userRatingsTotal: 678,\n  type: \"local\"\n},\n// International Chains in Nairobi\n{\n  id: 6,\n  name: \"KFC\",\n  location: \"Multiple locations in Nairobi\",\n  rating: 4.1,\n  priceRange: \"$$\",\n  cuisine: \"Fast Food, Chicken\",\n  image: \"https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=400&h=300&fit=crop\",\n  coordinates: {\n    lat: -1.2921,\n    lng: 36.8219\n  },\n  openNow: true,\n  userRatingsTotal: 2340,\n  type: \"chain\",\n  deliveryAvailable: true,\n  deliveryServices: [\"Jumia Food\", \"Glovo\"]\n}, {\n  id: 7,\n  name: \"Pizza Hut\",\n  location: \"Westlands, CBD, Kilimani\",\n  rating: 4.3,\n  priceRange: \"$$\",\n  cuisine: \"Pizza, Italian\",\n  image: \"https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=400&h=300&fit=crop\",\n  coordinates: {\n    lat: -1.2921,\n    lng: 36.8219\n  },\n  openNow: true,\n  userRatingsTotal: 1890,\n  type: \"chain\",\n  deliveryAvailable: true,\n  deliveryServices: [\"Jumia Food\", \"Glovo\"]\n}, {\n  id: 8,\n  name: \"Burger King\",\n  location: \"CBD, Westlands\",\n  rating: 4.0,\n  priceRange: \"$$\",\n  cuisine: \"Fast Food, Burgers\",\n  image: \"https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=400&h=300&fit=crop\",\n  coordinates: {\n    lat: -1.2921,\n    lng: 36.8219\n  },\n  openNow: true,\n  userRatingsTotal: 1560,\n  type: \"chain\",\n  deliveryAvailable: true,\n  deliveryServices: [\"Jumia Food\"]\n}, {\n  id: 9,\n  name: \"Subway\",\n  location: \"CBD, Westlands, Kilimani\",\n  rating: 4.2,\n  priceRange: \"$$\",\n  cuisine: \"Sandwiches, Healthy\",\n  image: \"https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=400&h=300&fit=crop\",\n  coordinates: {\n    lat: -1.2921,\n    lng: 36.8219\n  },\n  openNow: true,\n  userRatingsTotal: 980,\n  type: \"chain\",\n  deliveryAvailable: true,\n  deliveryServices: [\"Jumia Food\", \"Glovo\"]\n}, {\n  id: 10,\n  name: \"Domino's Pizza\",\n  location: \"Westlands, CBD\",\n  rating: 4.4,\n  priceRange: \"$$\",\n  cuisine: \"Pizza, Delivery\",\n  image: \"https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=400&h=300&fit=crop\",\n  coordinates: {\n    lat: -1.2921,\n    lng: 36.8219\n  },\n  openNow: true,\n  userRatingsTotal: 2100,\n  type: \"chain\",\n  deliveryAvailable: true,\n  deliveryServices: [\"Own Delivery\", \"Jumia Food\"]\n}];\nconst restaurantAPI = {\n  getRestaurantsInNairobi,\n  getRestaurantDetails,\n  getRestaurantMenu,\n  searchRestaurantsGooglePlaces,\n  searchRestaurantsYelp,\n  searchRestaurantsFoursquare,\n  searchRestaurantsGlovo,\n  getGlovoRestaurantMenu\n};\nexport default restaurantAPI;","map":{"version":3,"names":["getRestaurantMenu","restaurantId","restaurantName","startsWith","glovoMenu","getGlovoRestaurantMenu","length","glovoError","console","log","mockMenus","name","price","description","category","error","getRestaurantsInNairobi","useMockData","getMockRestaurants","glovoRestaurants","searchRestaurantsGlovo","GOOGLE_PLACES_API_KEY","places","searchRestaurantsGooglePlaces","transformGooglePlacesData","YELP_API_KEY","businesses","searchRestaurantsYelp","transformYelpData","warn","id","location","rating","priceRange","cuisine","image","coordinates","lat","lng","openNow","userRatingsTotal","type","deliveryAvailable","deliveryServices","restaurantAPI","getRestaurantDetails","searchRestaurantsFoursquare"],"sources":["C:/Projects/gawa/frontend/src/api/restaurants.js"],"sourcesContent":["// Simple restaurant data service using mock data\r\n\r\n// Get restaurant menu and food items (using Glovo, Google Places, or external menu APIs)\r\nexport const getRestaurantMenu = async (restaurantId, restaurantName) => {\r\n  try {\r\n    // First, try to get menu from Glovo if it's a Glovo restaurant\r\n    if (restaurantId && restaurantId.startsWith('glovo_')) {\r\n      try {\r\n        const glovoMenu = await getGlovoRestaurantMenu(restaurantId);\r\n        if (glovoMenu && glovoMenu.length > 0) {\r\n          return glovoMenu;\r\n        }\r\n      } catch (glovoError) {\r\n        console.log('Glovo menu fetch failed, using fallback...');\r\n      }\r\n    }\r\n    \r\n    // Fallback to mock data based on restaurant type\r\n    const mockMenus = {\r\n      'Carnivore Restaurant': [\r\n        { name: \"Nyama Choma\", price: \"KES 2,500\", description: \"Grilled goat meat with ugali\", category: \"Main Course\" },\r\n        { name: \"Beef Ribs\", price: \"KES 3,200\", description: \"Slow-cooked beef ribs\", category: \"Main Course\" },\r\n        { name: \"Chicken Wings\", price: \"KES 1,800\", description: \"Spicy grilled wings\", category: \"Appetizer\" },\r\n        { name: \"Ugali\", price: \"KES 300\", description: \"Traditional maize meal\", category: \"Side Dish\" },\r\n        { name: \"Sukuma Wiki\", price: \"KES 250\", description: \"Collard greens\", category: \"Side Dish\" }\r\n      ],\r\n      'Java House': [\r\n        { name: \"Chicken Burger\", price: \"KES 850\", description: \"Grilled chicken with fries\", category: \"Main Course\" },\r\n        { name: \"Cappuccino\", price: \"KES 250\", description: \"Freshly brewed coffee\", category: \"Beverage\" },\r\n        { name: \"Caesar Salad\", price: \"KES 650\", description: \"Fresh greens with dressing\", category: \"Salad\" },\r\n        { name: \"Flat White\", price: \"KES 280\", description: \"Smooth coffee with milk\", category: \"Beverage\" },\r\n        { name: \"Chicken Pasta\", price: \"KES 750\", description: \"Creamy pasta with chicken\", category: \"Main Course\" }\r\n      ],\r\n      'Tamarind Restaurant': [\r\n        { name: \"Grilled Lobster\", price: \"KES 4,500\", description: \"Fresh lobster with garlic butter\", category: \"Seafood\" },\r\n        { name: \"Fish Curry\", price: \"KES 2,800\", description: \"Spicy fish curry with rice\", category: \"Main Course\" },\r\n        { name: \"Prawn Biryani\", price: \"KES 3,200\", description: \"Aromatic rice with prawns\", category: \"Main Course\" },\r\n        { name: \"Coconut Rice\", price: \"KES 450\", description: \"Fragrant coconut rice\", category: \"Side Dish\" },\r\n        { name: \"Mango Lassi\", price: \"KES 350\", description: \"Sweet mango yogurt drink\", category: \"Beverage\" }\r\n      ],\r\n      // Add menus for major chains\r\n      'KFC': [\r\n        { name: \"Original Recipe Chicken\", price: \"KES 450\", description: \"2 pieces of fried chicken\", category: \"Main Course\" },\r\n        { name: \"Zinger Burger\", price: \"KES 380\", description: \"Spicy chicken burger with fries\", category: \"Main Course\" },\r\n        { name: \"Chicken Wings\", price: \"KES 320\", description: \"6 pieces of spicy wings\", category: \"Appetizer\" },\r\n        { name: \"French Fries\", price: \"KES 180\", description: \"Crispy golden fries\", category: \"Side Dish\" },\r\n        { name: \"Coca Cola\", price: \"KES 120\", description: \"500ml soft drink\", category: \"Beverage\" }\r\n      ],\r\n      'Pizza Hut': [\r\n        { name: \"Margherita Pizza\", price: \"KES 850\", description: \"Classic tomato and mozzarella\", category: \"Pizza\" },\r\n        { name: \"Pepperoni Pizza\", price: \"KES 950\", description: \"Spicy pepperoni with cheese\", category: \"Pizza\" },\r\n        { name: \"Chicken Supreme\", price: \"KES 1100\", description: \"Chicken, mushrooms, peppers\", category: \"Pizza\" },\r\n        { name: \"Garlic Bread\", price: \"KES 200\", description: \"Fresh baked garlic bread\", category: \"Side Dish\" },\r\n        { name: \"Chocolate Fudge Cake\", price: \"KES 350\", description: \"Rich chocolate dessert\", category: \"Dessert\" }\r\n      ]\r\n    };\r\n    \r\n    // Return mock menu if available, otherwise generic menu\r\n    if (mockMenus[restaurantName]) {\r\n      return mockMenus[restaurantName];\r\n    }\r\n    \r\n    // Generic menu for unknown restaurants\r\n    return [\r\n      { name: \"Signature Dish\", price: \"KES 1,500\", description: \"Chef's special creation\", category: \"Main Course\" },\r\n      { name: \"Local Special\", price: \"KES 1,200\", description: \"Traditional local cuisine\", category: \"Main Course\" },\r\n      { name: \"Fresh Juice\", price: \"KES 300\", description: \"Seasonal fruit juice\", category: \"Beverage\" }\r\n    ];\r\n  } catch (error) {\r\n    console.error('Error fetching restaurant menu:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Main function to get restaurants with fallback options\r\nexport const getRestaurantsInNairobi = async (useMockData = false) => {\r\n  if (useMockData) {\r\n    // Return mock data for development/testing\r\n    return getMockRestaurants();\r\n  }\r\n  \r\n  try {\r\n    // Try Glovo API first (best for Nairobi delivery)\r\n    try {\r\n      const glovoRestaurants = await searchRestaurantsGlovo();\r\n      if (glovoRestaurants && glovoRestaurants.length > 0) {\r\n        console.log('Using Glovo API data');\r\n        return glovoRestaurants;\r\n      }\r\n    } catch (glovoError) {\r\n      console.log('Glovo API failed, trying alternatives...');\r\n    }\r\n    \r\n    // Try Google Places API\r\n    if (GOOGLE_PLACES_API_KEY && GOOGLE_PLACES_API_KEY !== 'YOUR_GOOGLE_PLACES_API_KEY') {\r\n      const places = await searchRestaurantsGooglePlaces();\r\n      return transformGooglePlacesData(places);\r\n    }\r\n    \r\n    // Fallback to Yelp API\r\n    if (YELP_API_KEY && YELP_API_KEY !== 'YOUR_YELP_API_KEY') {\r\n      const businesses = await searchRestaurantsYelp();\r\n      return transformYelpData(businesses);\r\n    }\r\n    \r\n    // If no API keys available, return mock data\r\n    console.warn('No API keys configured. Using mock data.');\r\n    return getMockRestaurants();\r\n    \r\n  } catch (error) {\r\n    console.error('Error fetching restaurants:', error);\r\n    // Fallback to mock data on error\r\n    return getMockRestaurants();\r\n  }\r\n};\r\n\r\n// Mock data fallback\r\nconst getMockRestaurants = () => [\r\n  // Local Nairobi Restaurants\r\n  {\r\n    id: 1,\r\n    name: \"Carnivore Restaurant\",\r\n    location: \"Langata Road, Nairobi\",\r\n    rating: 4.5,\r\n    priceRange: \"$$$\",\r\n    cuisine: \"African, BBQ\",\r\n    image: \"https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=400&h=300&fit=crop\",\r\n    coordinates: { lat: -1.2921, lng: 36.8219 },\r\n    openNow: true,\r\n    userRatingsTotal: 1250,\r\n    type: \"local\"\r\n  },\r\n  {\r\n    id: 2,\r\n    name: \"Java House\",\r\n    location: \"Westlands, Nairobi\",\r\n    rating: 4.3,\r\n    priceRange: \"$$\",\r\n    cuisine: \"International, Coffee\",\r\n    image: \"https://images.unsplash.com/photo-1555396273-367ea4eb4db5?w=400&h=300&fit=crop\",\r\n    coordinates: { lat: -1.2921, lng: 36.8219 },\r\n    openNow: true,\r\n    userRatingsTotal: 890,\r\n    type: \"local\"\r\n  },\r\n  {\r\n    id: 3,\r\n    name: \"Tamarind Restaurant\",\r\n    location: \"Mombasa Road, Nairobi\",\r\n    rating: 4.7,\r\n    priceRange: \"$$$\",\r\n    cuisine: \"Seafood, International\",\r\n    image: \"https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=400&h=300&fit=crop\",\r\n    coordinates: { lat: -1.2921, lng: 36.8219 },\r\n    openNow: true,\r\n    userRatingsTotal: 567,\r\n    type: \"local\"\r\n  },\r\n  {\r\n    id: 4,\r\n    name: \"Artcaffe\",\r\n    location: \"CBD, Nairobi\",\r\n    rating: 4.2,\r\n    priceRange: \"$$\",\r\n    cuisine: \"Cafe, International\",\r\n    image: \"https://images.unsplash.com/photo-1554118811-1e0d58224f24?w=400&h=300&fit=crop\",\r\n    coordinates: { lat: -1.2921, lng: 36.8219 },\r\n    openNow: true,\r\n    userRatingsTotal: 432,\r\n    type: \"local\"\r\n  },\r\n  {\r\n    id: 5,\r\n    name: \"Nyama Mama\",\r\n    location: \"Kilimani, Nairobi\",\r\n    rating: 4.4,\r\n    priceRange: \"$$\",\r\n    cuisine: \"African, Fusion\",\r\n    image: \"https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=400&h=300&fit=crop\",\r\n    coordinates: { lat: -1.2921, lng: 36.8219 },\r\n    openNow: true,\r\n    userRatingsTotal: 678,\r\n    type: \"local\"\r\n  },\r\n  \r\n  // International Chains in Nairobi\r\n  {\r\n    id: 6,\r\n    name: \"KFC\",\r\n    location: \"Multiple locations in Nairobi\",\r\n    rating: 4.1,\r\n    priceRange: \"$$\",\r\n    cuisine: \"Fast Food, Chicken\",\r\n    image: \"https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=400&h=300&fit=crop\",\r\n    coordinates: { lat: -1.2921, lng: 36.8219 },\r\n    openNow: true,\r\n    userRatingsTotal: 2340,\r\n    type: \"chain\",\r\n    deliveryAvailable: true,\r\n    deliveryServices: [\"Jumia Food\", \"Glovo\"]\r\n  },\r\n  {\r\n    id: 7,\r\n    name: \"Pizza Hut\",\r\n    location: \"Westlands, CBD, Kilimani\",\r\n    rating: 4.3,\r\n    priceRange: \"$$\",\r\n    cuisine: \"Pizza, Italian\",\r\n    image: \"https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=400&h=300&fit=crop\",\r\n    coordinates: { lat: -1.2921, lng: 36.8219 },\r\n    openNow: true,\r\n    userRatingsTotal: 1890,\r\n    type: \"chain\",\r\n    deliveryAvailable: true,\r\n    deliveryServices: [\"Jumia Food\", \"Glovo\"]\r\n  },\r\n  {\r\n    id: 8,\r\n    name: \"Burger King\",\r\n    location: \"CBD, Westlands\",\r\n    rating: 4.0,\r\n    priceRange: \"$$\",\r\n    cuisine: \"Fast Food, Burgers\",\r\n    image: \"https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=400&h=300&fit=crop\",\r\n    coordinates: { lat: -1.2921, lng: 36.8219 },\r\n    openNow: true,\r\n    userRatingsTotal: 1560,\r\n    type: \"chain\",\r\n    deliveryAvailable: true,\r\n    deliveryServices: [\"Jumia Food\"]\r\n  },\r\n  {\r\n    id: 9,\r\n    name: \"Subway\",\r\n    location: \"CBD, Westlands, Kilimani\",\r\n    rating: 4.2,\r\n    priceRange: \"$$\",\r\n    cuisine: \"Sandwiches, Healthy\",\r\n    image: \"https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=400&h=300&fit=crop\",\r\n    coordinates: { lat: -1.2921, lng: 36.8219 },\r\n    openNow: true,\r\n    userRatingsTotal: 980,\r\n    type: \"chain\",\r\n    deliveryAvailable: true,\r\n    deliveryServices: [\"Jumia Food\", \"Glovo\"]\r\n  },\r\n  {\r\n    id: 10,\r\n    name: \"Domino's Pizza\",\r\n    location: \"Westlands, CBD\",\r\n    rating: 4.4,\r\n    priceRange: \"$$\",\r\n    cuisine: \"Pizza, Delivery\",\r\n    image: \"https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=400&h=300&fit=crop\",\r\n    coordinates: { lat: -1.2921, lng: 36.8219 },\r\n    openNow: true,\r\n    userRatingsTotal: 2100,\r\n    type: \"chain\",\r\n    deliveryAvailable: true,\r\n    deliveryServices: [\"Own Delivery\", \"Jumia Food\"]\r\n  }\r\n];\r\n\r\nconst restaurantAPI = {\r\n  getRestaurantsInNairobi,\r\n  getRestaurantDetails,\r\n  getRestaurantMenu,\r\n  searchRestaurantsGooglePlaces,\r\n  searchRestaurantsYelp,\r\n  searchRestaurantsFoursquare,\r\n  searchRestaurantsGlovo,\r\n  getGlovoRestaurantMenu\r\n};\r\n\r\nexport default restaurantAPI;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}