{"ast":null,"code":"import apiClient from './apiClient';\n\n// Register user\nexport const registerUser = async userData => {\n  const response = await apiClient.post('/auth/register', userData);\n  const data = await response.json();\n  if (response.ok && data.access_token) {\n    // Store tokens\n    apiClient.setTokens(data.access_token, data.refresh_token);\n\n    // Store user data if provided\n    if (data.user) {\n      localStorage.setItem('user', JSON.stringify(data.user));\n    }\n  }\n  return data;\n};\n\n// Login user\nexport const loginUser = async credentials => {\n  const response = await apiClient.post('/auth/login', credentials);\n  const data = await response.json();\n  if (response.ok && data.access_token) {\n    // Store tokens\n    apiClient.setTokens(data.access_token, data.refresh_token);\n\n    // Store user data if provided\n    if (data.user) {\n      localStorage.setItem('user', JSON.stringify(data.user));\n    }\n  }\n  return data;\n};\n\n// Logout user\nexport const logoutUser = async () => {\n  try {\n    const response = await apiClient.post('/auth/logout');\n\n    // Clear tokens regardless of response\n    apiClient.clearTokens();\n    return response.json();\n  } catch (error) {\n    // Clear tokens even if logout fails\n    apiClient.clearTokens();\n    throw error;\n  }\n};\n\n// Refresh token (used internally by apiClient)\nexport const refreshToken = async () => {\n  const response = await apiClient.post('/auth/refresh', {\n    refresh_token: apiClient.getRefreshToken()\n  });\n  if (response.ok) {\n    const data = await response.json();\n    apiClient.setTokens(data.access_token, data.refresh_token);\n    return data.access_token;\n  }\n  throw new Error('Token refresh failed');\n};\n\n// Check if user is authenticated\nexport const isAuthenticated = () => {\n  return !!apiClient.getAccessToken();\n};\n\n// Get current user data\nexport const getCurrentUser = () => {\n  const userStr = localStorage.getItem('user');\n  return userStr ? JSON.parse(userStr) : null;\n};","map":{"version":3,"names":["apiClient","registerUser","userData","response","post","data","json","ok","access_token","setTokens","refresh_token","user","localStorage","setItem","JSON","stringify","loginUser","credentials","logoutUser","clearTokens","error","refreshToken","getRefreshToken","Error","isAuthenticated","getAccessToken","getCurrentUser","userStr","getItem","parse"],"sources":["C:/Projects/gawa/frontend/src/api/auth.js"],"sourcesContent":["import apiClient from './apiClient';\r\n\r\n// Register user\r\nexport const registerUser = async (userData) => {\r\n  const response = await apiClient.post('/auth/register', userData);\r\n  const data = await response.json();\r\n  \r\n  if (response.ok && data.access_token) {\r\n    // Store tokens\r\n    apiClient.setTokens(data.access_token, data.refresh_token);\r\n    \r\n    // Store user data if provided\r\n    if (data.user) {\r\n      localStorage.setItem('user', JSON.stringify(data.user));\r\n    }\r\n  }\r\n  \r\n  return data;\r\n};\r\n\r\n// Login user\r\nexport const loginUser = async (credentials) => {\r\n  const response = await apiClient.post('/auth/login', credentials);\r\n  const data = await response.json();\r\n  \r\n  if (response.ok && data.access_token) {\r\n    // Store tokens\r\n    apiClient.setTokens(data.access_token, data.refresh_token);\r\n    \r\n    // Store user data if provided\r\n    if (data.user) {\r\n      localStorage.setItem('user', JSON.stringify(data.user));\r\n    }\r\n  }\r\n  \r\n  return data;\r\n};\r\n\r\n// Logout user\r\nexport const logoutUser = async () => {\r\n  try {\r\n    const response = await apiClient.post('/auth/logout');\r\n    \r\n    // Clear tokens regardless of response\r\n    apiClient.clearTokens();\r\n    \r\n    return response.json();\r\n  } catch (error) {\r\n    // Clear tokens even if logout fails\r\n    apiClient.clearTokens();\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Refresh token (used internally by apiClient)\r\nexport const refreshToken = async () => {\r\n  const response = await apiClient.post('/auth/refresh', {\r\n    refresh_token: apiClient.getRefreshToken()\r\n  });\r\n  \r\n  if (response.ok) {\r\n    const data = await response.json();\r\n    apiClient.setTokens(data.access_token, data.refresh_token);\r\n    return data.access_token;\r\n  }\r\n  \r\n  throw new Error('Token refresh failed');\r\n};\r\n\r\n// Check if user is authenticated\r\nexport const isAuthenticated = () => {\r\n  return !!apiClient.getAccessToken();\r\n};\r\n\r\n// Get current user data\r\nexport const getCurrentUser = () => {\r\n  const userStr = localStorage.getItem('user');\r\n  return userStr ? JSON.parse(userStr) : null;\r\n};\r\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,aAAa;;AAEnC;AACA,OAAO,MAAMC,YAAY,GAAG,MAAOC,QAAQ,IAAK;EAC9C,MAAMC,QAAQ,GAAG,MAAMH,SAAS,CAACI,IAAI,CAAC,gBAAgB,EAAEF,QAAQ,CAAC;EACjE,MAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;EAElC,IAAIH,QAAQ,CAACI,EAAE,IAAIF,IAAI,CAACG,YAAY,EAAE;IACpC;IACAR,SAAS,CAACS,SAAS,CAACJ,IAAI,CAACG,YAAY,EAAEH,IAAI,CAACK,aAAa,CAAC;;IAE1D;IACA,IAAIL,IAAI,CAACM,IAAI,EAAE;MACbC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACV,IAAI,CAACM,IAAI,CAAC,CAAC;IACzD;EACF;EAEA,OAAON,IAAI;AACb,CAAC;;AAED;AACA,OAAO,MAAMW,SAAS,GAAG,MAAOC,WAAW,IAAK;EAC9C,MAAMd,QAAQ,GAAG,MAAMH,SAAS,CAACI,IAAI,CAAC,aAAa,EAAEa,WAAW,CAAC;EACjE,MAAMZ,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;EAElC,IAAIH,QAAQ,CAACI,EAAE,IAAIF,IAAI,CAACG,YAAY,EAAE;IACpC;IACAR,SAAS,CAACS,SAAS,CAACJ,IAAI,CAACG,YAAY,EAAEH,IAAI,CAACK,aAAa,CAAC;;IAE1D;IACA,IAAIL,IAAI,CAACM,IAAI,EAAE;MACbC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACV,IAAI,CAACM,IAAI,CAAC,CAAC;IACzD;EACF;EAEA,OAAON,IAAI;AACb,CAAC;;AAED;AACA,OAAO,MAAMa,UAAU,GAAG,MAAAA,CAAA,KAAY;EACpC,IAAI;IACF,MAAMf,QAAQ,GAAG,MAAMH,SAAS,CAACI,IAAI,CAAC,cAAc,CAAC;;IAErD;IACAJ,SAAS,CAACmB,WAAW,CAAC,CAAC;IAEvB,OAAOhB,QAAQ,CAACG,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOc,KAAK,EAAE;IACd;IACApB,SAAS,CAACmB,WAAW,CAAC,CAAC;IACvB,MAAMC,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;EACtC,MAAMlB,QAAQ,GAAG,MAAMH,SAAS,CAACI,IAAI,CAAC,eAAe,EAAE;IACrDM,aAAa,EAAEV,SAAS,CAACsB,eAAe,CAAC;EAC3C,CAAC,CAAC;EAEF,IAAInB,QAAQ,CAACI,EAAE,EAAE;IACf,MAAMF,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAClCN,SAAS,CAACS,SAAS,CAACJ,IAAI,CAACG,YAAY,EAAEH,IAAI,CAACK,aAAa,CAAC;IAC1D,OAAOL,IAAI,CAACG,YAAY;EAC1B;EAEA,MAAM,IAAIe,KAAK,CAAC,sBAAsB,CAAC;AACzC,CAAC;;AAED;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EACnC,OAAO,CAAC,CAACxB,SAAS,CAACyB,cAAc,CAAC,CAAC;AACrC,CAAC;;AAED;AACA,OAAO,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAClC,MAAMC,OAAO,GAAGf,YAAY,CAACgB,OAAO,CAAC,MAAM,CAAC;EAC5C,OAAOD,OAAO,GAAGb,IAAI,CAACe,KAAK,CAACF,OAAO,CAAC,GAAG,IAAI;AAC7C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}