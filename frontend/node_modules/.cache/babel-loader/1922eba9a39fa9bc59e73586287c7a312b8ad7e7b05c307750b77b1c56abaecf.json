{"ast":null,"code":"// Pizza Hut API Service\nclass PizzaHutAPI {\n  constructor() {\n    this.forkifyURL = 'https://forkify-api.herokuapp.com/api/v2';\n  }\n\n  // Get real pizza menu from Forkify API\n  async getRealPizzaMenu() {\n    try {\n      console.log('🍕 Fetching real pizza data from Forkify API...');\n      const response = await fetch(`${this.forkifyURL}/recipes?search=pizza`);\n      if (!response.ok) {\n        throw new Error(`Forkify API request failed: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('✅ Forkify API response:', data);\n      if (!data || !data.data || !data.data.recipes || !Array.isArray(data.data.recipes)) {\n        console.warn('⚠️ Forkify API returned invalid data structure');\n        return null;\n      }\n\n      // Transform pizza data to menu items\n      const transformedPizzas = data.data.recipes.map((pizza, index) => ({\n        id: pizza.id || `pizza-${index}`,\n        name: pizza.title,\n        description: `Delicious ${pizza.title} - a premium pizza from ${pizza.publisher}`,\n        price: this.generatePizzaPrice(),\n        category: 'Pizza',\n        image: pizza.image_url,\n        publisher: pizza.publisher,\n        customization: this.getPizzaCustomization(),\n        isAvailable: true,\n        preparationTime: '20-30 minutes',\n        allergens: ['Gluten', 'Dairy', 'Eggs'],\n        nutritionalInfo: {\n          calories: Math.floor(Math.random() * 400) + 200,\n          protein: Math.floor(Math.random() * 15) + 8,\n          carbs: Math.floor(Math.random() * 60) + 25,\n          fat: Math.floor(Math.random() * 25) + 12\n        }\n      }));\n      return transformedPizzas;\n    } catch (error) {\n      console.error('❌ Error fetching real pizza data:', error);\n      return null;\n    }\n  }\n\n  // Get full menu combining real pizza API with mock data for other categories\n  async getFullMenu() {\n    try {\n      console.log('🏪 Fetching Pizza Hut full menu...');\n\n      // Fetch real pizza data from Forkify API\n      const pizzaData = await this.getRealPizzaMenu();\n      console.log('🍕 Pizza data received:', pizzaData);\n\n      // Get mock data for other categories\n      const mockSides = this.getMockSides();\n      const mockBeverages = this.getMockBeverages();\n      const mockDesserts = this.getMockDesserts();\n\n      // Combine all data with validation\n      const allMenuItems = [...(pizzaData || []), ...mockSides, ...mockBeverages, ...mockDesserts];\n\n      // Validate each menu item\n      const validatedMenuItems = allMenuItems.filter(item => {\n        if (!item || !item.name || !item.description) {\n          console.warn('⚠️ Invalid menu item found:', item);\n          return false;\n        }\n        return true;\n      });\n      console.log('✅ Validated menu items:', validatedMenuItems.length);\n      console.log('✅ Sample validated item:', validatedMenuItems[0]);\n      const menuData = {\n        restaurant: {\n          name: 'Pizza Hut',\n          location: 'Westlands, Nairobi',\n          phone: '+254 20 123 4570',\n          website: 'https://pizzahut.co.ke',\n          rating: 4.6,\n          priceRange: '$$',\n          cuisine: 'Pizza & Italian',\n          hours: '11:00 AM - 11:00 PM',\n          delivery: true,\n          pickup: true,\n          dineIn: true\n        },\n        menu: validatedMenuItems,\n        categories: this.getCategories(validatedMenuItems),\n        promotions: this.getPromotions(),\n        deals: this.getDeals(),\n        rewards: this.getRewards(),\n        customization: this.getCustomization(),\n        locations: this.getLocations()\n      };\n      console.log('✅ Pizza Hut menu data prepared:', menuData);\n\n      // Ensure we have at least some valid data\n      if (validatedMenuItems.length === 0) {\n        console.warn('⚠️ No valid menu items found, using mock data fallback');\n        return this.getMockMenu();\n      }\n      return menuData;\n    } catch (error) {\n      console.error('❌ Error preparing Pizza Hut menu:', error);\n      // Return mock data as fallback\n      return this.getMockMenu();\n    }\n  }\n\n  // Helper methods for pricing\n  generatePizzaPrice() {\n    const basePrice = 1200;\n    const variation = Math.floor(Math.random() * 400) - 200;\n    return Math.max(800, basePrice + variation);\n  }\n\n  // Helper methods for customization\n  getPizzaCustomization() {\n    return {\n      available: true,\n      options: {\n        size: ['Small', 'Medium', 'Large', 'Extra Large'],\n        crust: ['Thin', 'Thick', 'Stuffed', 'Gluten-Free'],\n        toppings: ['Pepperoni', 'Mushrooms', 'Bell Peppers', 'Onions', 'Olives', 'Sausage', 'Ham', 'Pineapple'],\n        sauce: ['Tomato', 'BBQ', 'Alfredo', 'Pesto', 'Buffalo'],\n        cheese: ['Mozzarella', 'Cheddar', 'Parmesan', 'Feta', 'Vegan Cheese']\n      }\n    };\n  }\n\n  // Mock data for other categories\n  getMockSides() {\n    return [{\n      id: 'side-1',\n      name: 'Garlic Bread',\n      description: 'Fresh baked garlic bread with herbs and butter',\n      price: 250,\n      category: 'Sides',\n      image: 'https://images.unsplash.com/photo-1573140247632-f8fd74997d5c?w=400',\n      customization: {\n        available: false\n      },\n      isAvailable: true,\n      preparationTime: '5-8 minutes',\n      allergens: ['Gluten', 'Dairy'],\n      nutritionalInfo: {\n        calories: 180,\n        protein: 4,\n        carbs: 20,\n        fat: 10\n      }\n    }, {\n      id: 'side-2',\n      name: 'Chicken Wings',\n      description: 'Crispy chicken wings with your choice of sauce',\n      price: 450,\n      category: 'Sides',\n      image: 'https://images.unsplash.com/photo-1567620832904-9d5c8ca869a8?w=400',\n      customization: {\n        available: false\n      },\n      isAvailable: true,\n      preparationTime: '15-20 minutes',\n      allergens: ['Gluten', 'Eggs'],\n      nutritionalInfo: {\n        calories: 320,\n        protein: 25,\n        carbs: 8,\n        fat: 22\n      }\n    }];\n  }\n  getMockBeverages() {\n    return [{\n      id: 'beverage-1',\n      name: 'Soft Drinks',\n      description: 'Coca-Cola, Sprite, Fanta, or Pepsi',\n      price: 150,\n      category: 'Beverages',\n      image: 'https://images.unsplash.com/photo-1629203851122-3726ecdf080e?w=400',\n      customization: {\n        available: false\n      },\n      isAvailable: true,\n      preparationTime: '1-2 minutes',\n      allergens: [],\n      nutritionalInfo: {\n        calories: 140,\n        protein: 0,\n        carbs: 39,\n        fat: 0\n      }\n    }, {\n      id: 'beverage-2',\n      name: 'Fresh Juice',\n      description: 'Orange, mango, or pineapple juice',\n      price: 200,\n      category: 'Beverages',\n      image: 'https://images.unsplash.com/photo-1621506289937-a8e4df240d0b?w=400',\n      customization: {\n        available: false\n      },\n      isAvailable: true,\n      preparationTime: '3-5 minutes',\n      allergens: [],\n      nutritionalInfo: {\n        calories: 110,\n        protein: 2,\n        carbs: 26,\n        fat: 0\n      }\n    }];\n  }\n  getMockDesserts() {\n    return [{\n      id: 'dessert-1',\n      name: 'Chocolate Brownie',\n      description: 'Warm chocolate brownie with vanilla ice cream',\n      price: 300,\n      category: 'Desserts',\n      image: 'https://images.unsplash.com/photo-1606313564200-e75d5e30476c?w=400',\n      customization: {\n        available: false\n      },\n      isAvailable: true,\n      preparationTime: '5-8 minutes',\n      allergens: ['Gluten', 'Dairy', 'Eggs'],\n      nutritionalInfo: {\n        calories: 280,\n        protein: 4,\n        carbs: 35,\n        fat: 15\n      }\n    }];\n  }\n\n  // Helper methods for other data\n  getCategories(allMenuItems) {\n    const categories = ['all'];\n    allMenuItems.forEach(item => {\n      if (!categories.includes(item.category)) {\n        categories.push(item.category);\n      }\n    });\n    return categories;\n  }\n  getPromotions() {\n    return ['Buy 2 pizzas, get 1 free', '20% off all orders over KES 2000', 'Student discount: 15% off with valid ID'];\n  }\n  getDeals() {\n    return ['Happy Hour: 2-for-1 on all pizzas (2-5 PM)', 'Weekend Special: Free garlic bread with any pizza', 'Family Bundle: 2 large pizzas + sides + drinks for KES 2500'];\n  }\n  getRewards() {\n    return {\n      program: 'Hut Rewards',\n      available: true,\n      benefits: ['Earn 1 point per KES 10 spent', 'Free pizza after 15 points', 'Birthday month: 50% off any pizza', 'Exclusive member-only promotions']\n    };\n  }\n  getCustomization() {\n    return {\n      available: true,\n      options: {\n        pizza: ['Size', 'Crust type', 'Toppings', 'Sauce', 'Cheese'],\n        sides: ['Sauce options', 'Portion size'],\n        dietary: ['Gluten-free', 'Dairy-free', 'Vegan', 'Halal']\n      }\n    };\n  }\n  getLocations() {\n    return ['Westlands, Nairobi', 'Kilimani, Nairobi', 'Lavington, Nairobi', 'Karen, Nairobi', 'Mombasa Road, Nairobi'];\n  }\n\n  // Fallback mock menu\n  getMockMenu() {\n    return {\n      restaurant: {\n        name: 'Pizza Hut',\n        location: 'Westlands, Nairobi',\n        phone: '+254 20 123 4570',\n        website: 'https://pizzahut.co.ke',\n        rating: 4.6,\n        priceRange: '$$',\n        cuisine: 'Pizza & Italian',\n        hours: '11:00 AM - 11:00 PM',\n        delivery: true,\n        pickup: true,\n        dineIn: true\n      },\n      menu: [{\n        id: 'mock-1',\n        name: 'Pepperoni Pizza',\n        description: 'Classic pepperoni pizza with mozzarella cheese',\n        price: 1200,\n        category: 'Pizza',\n        image: 'https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=400',\n        customization: {\n          available: true\n        },\n        isAvailable: true,\n        preparationTime: '20-30 minutes',\n        allergens: ['Gluten', 'Dairy'],\n        nutritionalInfo: {\n          calories: 280,\n          protein: 12,\n          carbs: 35,\n          fat: 12\n        }\n      }],\n      categories: ['all', 'Pizza'],\n      promotions: ['Buy 2 pizzas, get 1 free'],\n      deals: ['Happy Hour: 2-for-1 on all pizzas (2-5 PM)'],\n      rewards: {\n        program: 'Hut Rewards',\n        available: true,\n        benefits: ['Earn points on every purchase']\n      },\n      customization: {\n        available: true,\n        options: {\n          pizza: ['Size', 'Crust type', 'Toppings']\n        }\n      },\n      locations: ['Westlands, Nairobi']\n    };\n  }\n}\nconst pizzaHutAPI = new PizzaHutAPI();\nexport default pizzaHutAPI;","map":{"version":3,"names":["PizzaHutAPI","constructor","forkifyURL","getRealPizzaMenu","console","log","response","fetch","ok","Error","status","data","json","recipes","Array","isArray","warn","transformedPizzas","map","pizza","index","id","name","title","description","publisher","price","generatePizzaPrice","category","image","image_url","customization","getPizzaCustomization","isAvailable","preparationTime","allergens","nutritionalInfo","calories","Math","floor","random","protein","carbs","fat","error","getFullMenu","pizzaData","mockSides","getMockSides","mockBeverages","getMockBeverages","mockDesserts","getMockDesserts","allMenuItems","validatedMenuItems","filter","item","length","menuData","restaurant","location","phone","website","rating","priceRange","cuisine","hours","delivery","pickup","dineIn","menu","categories","getCategories","promotions","getPromotions","deals","getDeals","rewards","getRewards","getCustomization","locations","getLocations","getMockMenu","basePrice","variation","max","available","options","size","crust","toppings","sauce","cheese","forEach","includes","push","program","benefits","sides","dietary","pizzaHutAPI"],"sources":["C:/Projects/gawa/frontend/src/api/pizzaHutAPI.js"],"sourcesContent":["// Pizza Hut API Service\r\nclass PizzaHutAPI {\r\n  constructor() {\r\n    this.forkifyURL = 'https://forkify-api.herokuapp.com/api/v2';\r\n  }\r\n\r\n  // Get real pizza menu from Forkify API\r\n  async getRealPizzaMenu() {\r\n    try {\r\n      console.log('🍕 Fetching real pizza data from Forkify API...');\r\n      const response = await fetch(`${this.forkifyURL}/recipes?search=pizza`);\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`Forkify API request failed: ${response.status}`);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      console.log('✅ Forkify API response:', data);\r\n      \r\n      if (!data || !data.data || !data.data.recipes || !Array.isArray(data.data.recipes)) {\r\n        console.warn('⚠️ Forkify API returned invalid data structure');\r\n        return null;\r\n      }\r\n\r\n      // Transform pizza data to menu items\r\n      const transformedPizzas = data.data.recipes.map((pizza, index) => ({\r\n        id: pizza.id || `pizza-${index}`,\r\n        name: pizza.title,\r\n        description: `Delicious ${pizza.title} - a premium pizza from ${pizza.publisher}`,\r\n        price: this.generatePizzaPrice(),\r\n        category: 'Pizza',\r\n        image: pizza.image_url,\r\n        publisher: pizza.publisher,\r\n        customization: this.getPizzaCustomization(),\r\n        isAvailable: true,\r\n        preparationTime: '20-30 minutes',\r\n        allergens: ['Gluten', 'Dairy', 'Eggs'],\r\n        nutritionalInfo: {\r\n          calories: Math.floor(Math.random() * 400) + 200,\r\n          protein: Math.floor(Math.random() * 15) + 8,\r\n          carbs: Math.floor(Math.random() * 60) + 25,\r\n          fat: Math.floor(Math.random() * 25) + 12\r\n        }\r\n      }));\r\n\r\n      return transformedPizzas;\r\n    } catch (error) {\r\n      console.error('❌ Error fetching real pizza data:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // Get full menu combining real pizza API with mock data for other categories\r\n  async getFullMenu() {\r\n    try {\r\n      console.log('🏪 Fetching Pizza Hut full menu...');\r\n      \r\n      // Fetch real pizza data from Forkify API\r\n      const pizzaData = await this.getRealPizzaMenu();\r\n      console.log('🍕 Pizza data received:', pizzaData);\r\n\r\n      // Get mock data for other categories\r\n      const mockSides = this.getMockSides();\r\n      const mockBeverages = this.getMockBeverages();\r\n      const mockDesserts = this.getMockDesserts();\r\n\r\n      // Combine all data with validation\r\n      const allMenuItems = [\r\n        ...(pizzaData || []),\r\n        ...mockSides,\r\n        ...mockBeverages,\r\n        ...mockDesserts\r\n      ];\r\n\r\n      // Validate each menu item\r\n      const validatedMenuItems = allMenuItems.filter(item => {\r\n        if (!item || !item.name || !item.description) {\r\n          console.warn('⚠️ Invalid menu item found:', item);\r\n          return false;\r\n        }\r\n        return true;\r\n      });\r\n\r\n      console.log('✅ Validated menu items:', validatedMenuItems.length);\r\n      console.log('✅ Sample validated item:', validatedMenuItems[0]);\r\n\r\n      const menuData = {\r\n        restaurant: {\r\n          name: 'Pizza Hut',\r\n          location: 'Westlands, Nairobi',\r\n          phone: '+254 20 123 4570',\r\n          website: 'https://pizzahut.co.ke',\r\n          rating: 4.6,\r\n          priceRange: '$$',\r\n          cuisine: 'Pizza & Italian',\r\n          hours: '11:00 AM - 11:00 PM',\r\n          delivery: true,\r\n          pickup: true,\r\n          dineIn: true\r\n        },\r\n        menu: validatedMenuItems,\r\n        categories: this.getCategories(validatedMenuItems),\r\n        promotions: this.getPromotions(),\r\n        deals: this.getDeals(),\r\n        rewards: this.getRewards(),\r\n        customization: this.getCustomization(),\r\n        locations: this.getLocations()\r\n      };\r\n\r\n      console.log('✅ Pizza Hut menu data prepared:', menuData);\r\n      \r\n      // Ensure we have at least some valid data\r\n      if (validatedMenuItems.length === 0) {\r\n        console.warn('⚠️ No valid menu items found, using mock data fallback');\r\n        return this.getMockMenu();\r\n      }\r\n      \r\n      return menuData;\r\n    } catch (error) {\r\n      console.error('❌ Error preparing Pizza Hut menu:', error);\r\n      // Return mock data as fallback\r\n      return this.getMockMenu();\r\n    }\r\n  }\r\n\r\n  // Helper methods for pricing\r\n  generatePizzaPrice() {\r\n    const basePrice = 1200;\r\n    const variation = Math.floor(Math.random() * 400) - 200;\r\n    return Math.max(800, basePrice + variation);\r\n  }\r\n\r\n  // Helper methods for customization\r\n  getPizzaCustomization() {\r\n    return {\r\n      available: true,\r\n      options: {\r\n        size: ['Small', 'Medium', 'Large', 'Extra Large'],\r\n        crust: ['Thin', 'Thick', 'Stuffed', 'Gluten-Free'],\r\n        toppings: ['Pepperoni', 'Mushrooms', 'Bell Peppers', 'Onions', 'Olives', 'Sausage', 'Ham', 'Pineapple'],\r\n        sauce: ['Tomato', 'BBQ', 'Alfredo', 'Pesto', 'Buffalo'],\r\n        cheese: ['Mozzarella', 'Cheddar', 'Parmesan', 'Feta', 'Vegan Cheese']\r\n      }\r\n    };\r\n  }\r\n\r\n  // Mock data for other categories\r\n  getMockSides() {\r\n    return [\r\n      {\r\n        id: 'side-1',\r\n        name: 'Garlic Bread',\r\n        description: 'Fresh baked garlic bread with herbs and butter',\r\n        price: 250,\r\n        category: 'Sides',\r\n        image: 'https://images.unsplash.com/photo-1573140247632-f8fd74997d5c?w=400',\r\n        customization: { available: false },\r\n        isAvailable: true,\r\n        preparationTime: '5-8 minutes',\r\n        allergens: ['Gluten', 'Dairy'],\r\n        nutritionalInfo: { calories: 180, protein: 4, carbs: 20, fat: 10 }\r\n      },\r\n      {\r\n        id: 'side-2',\r\n        name: 'Chicken Wings',\r\n        description: 'Crispy chicken wings with your choice of sauce',\r\n        price: 450,\r\n        category: 'Sides',\r\n        image: 'https://images.unsplash.com/photo-1567620832904-9d5c8ca869a8?w=400',\r\n        customization: { available: false },\r\n        isAvailable: true,\r\n        preparationTime: '15-20 minutes',\r\n        allergens: ['Gluten', 'Eggs'],\r\n        nutritionalInfo: { calories: 320, protein: 25, carbs: 8, fat: 22 }\r\n      }\r\n    ];\r\n  }\r\n\r\n  getMockBeverages() {\r\n    return [\r\n      {\r\n        id: 'beverage-1',\r\n        name: 'Soft Drinks',\r\n        description: 'Coca-Cola, Sprite, Fanta, or Pepsi',\r\n        price: 150,\r\n        category: 'Beverages',\r\n        image: 'https://images.unsplash.com/photo-1629203851122-3726ecdf080e?w=400',\r\n        customization: { available: false },\r\n        isAvailable: true,\r\n        preparationTime: '1-2 minutes',\r\n        allergens: [],\r\n        nutritionalInfo: { calories: 140, protein: 0, carbs: 39, fat: 0 }\r\n      },\r\n      {\r\n        id: 'beverage-2',\r\n        name: 'Fresh Juice',\r\n        description: 'Orange, mango, or pineapple juice',\r\n        price: 200,\r\n        category: 'Beverages',\r\n        image: 'https://images.unsplash.com/photo-1621506289937-a8e4df240d0b?w=400',\r\n        customization: { available: false },\r\n        isAvailable: true,\r\n        preparationTime: '3-5 minutes',\r\n        allergens: [],\r\n        nutritionalInfo: { calories: 110, protein: 2, carbs: 26, fat: 0 }\r\n      }\r\n    ];\r\n  }\r\n\r\n  getMockDesserts() {\r\n    return [\r\n      {\r\n        id: 'dessert-1',\r\n        name: 'Chocolate Brownie',\r\n        description: 'Warm chocolate brownie with vanilla ice cream',\r\n        price: 300,\r\n        category: 'Desserts',\r\n        image: 'https://images.unsplash.com/photo-1606313564200-e75d5e30476c?w=400',\r\n        customization: { available: false },\r\n        isAvailable: true,\r\n        preparationTime: '5-8 minutes',\r\n        allergens: ['Gluten', 'Dairy', 'Eggs'],\r\n        nutritionalInfo: { calories: 280, protein: 4, carbs: 35, fat: 15 }\r\n      }\r\n    ];\r\n  }\r\n\r\n  // Helper methods for other data\r\n  getCategories(allMenuItems) {\r\n    const categories = ['all'];\r\n    allMenuItems.forEach(item => {\r\n      if (!categories.includes(item.category)) {\r\n        categories.push(item.category);\r\n      }\r\n    });\r\n    return categories;\r\n  }\r\n\r\n  getPromotions() {\r\n    return [\r\n      'Buy 2 pizzas, get 1 free',\r\n      '20% off all orders over KES 2000',\r\n      'Student discount: 15% off with valid ID'\r\n    ];\r\n  }\r\n\r\n  getDeals() {\r\n    return [\r\n      'Happy Hour: 2-for-1 on all pizzas (2-5 PM)',\r\n      'Weekend Special: Free garlic bread with any pizza',\r\n      'Family Bundle: 2 large pizzas + sides + drinks for KES 2500'\r\n    ];\r\n  }\r\n\r\n  getRewards() {\r\n    return {\r\n      program: 'Hut Rewards',\r\n      available: true,\r\n      benefits: [\r\n        'Earn 1 point per KES 10 spent',\r\n        'Free pizza after 15 points',\r\n        'Birthday month: 50% off any pizza',\r\n        'Exclusive member-only promotions'\r\n      ]\r\n    };\r\n  }\r\n\r\n  getCustomization() {\r\n    return {\r\n      available: true,\r\n      options: {\r\n        pizza: ['Size', 'Crust type', 'Toppings', 'Sauce', 'Cheese'],\r\n        sides: ['Sauce options', 'Portion size'],\r\n        dietary: ['Gluten-free', 'Dairy-free', 'Vegan', 'Halal']\r\n      }\r\n    };\r\n  }\r\n\r\n  getLocations() {\r\n    return [\r\n      'Westlands, Nairobi',\r\n      'Kilimani, Nairobi',\r\n      'Lavington, Nairobi',\r\n      'Karen, Nairobi',\r\n      'Mombasa Road, Nairobi'\r\n    ];\r\n  }\r\n\r\n  // Fallback mock menu\r\n  getMockMenu() {\r\n    return {\r\n      restaurant: {\r\n        name: 'Pizza Hut',\r\n        location: 'Westlands, Nairobi',\r\n        phone: '+254 20 123 4570',\r\n        website: 'https://pizzahut.co.ke',\r\n        rating: 4.6,\r\n        priceRange: '$$',\r\n        cuisine: 'Pizza & Italian',\r\n        hours: '11:00 AM - 11:00 PM',\r\n        delivery: true,\r\n        pickup: true,\r\n        dineIn: true\r\n      },\r\n      menu: [\r\n        {\r\n          id: 'mock-1',\r\n          name: 'Pepperoni Pizza',\r\n          description: 'Classic pepperoni pizza with mozzarella cheese',\r\n          price: 1200,\r\n          category: 'Pizza',\r\n          image: 'https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=400',\r\n          customization: { available: true },\r\n          isAvailable: true,\r\n          preparationTime: '20-30 minutes',\r\n          allergens: ['Gluten', 'Dairy'],\r\n          nutritionalInfo: { calories: 280, protein: 12, carbs: 35, fat: 12 }\r\n        }\r\n      ],\r\n      categories: ['all', 'Pizza'],\r\n      promotions: ['Buy 2 pizzas, get 1 free'],\r\n      deals: ['Happy Hour: 2-for-1 on all pizzas (2-5 PM)'],\r\n      rewards: { program: 'Hut Rewards', available: true, benefits: ['Earn points on every purchase'] },\r\n      customization: { available: true, options: { pizza: ['Size', 'Crust type', 'Toppings'] } },\r\n      locations: ['Westlands, Nairobi']\r\n    };\r\n  }\r\n}\r\n\r\nconst pizzaHutAPI = new PizzaHutAPI();\r\nexport default pizzaHutAPI;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}