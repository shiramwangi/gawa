{"ast":null,"code":"// Carnivore Restaurant API Integration Service\n// This service provides multiple ways to get Carnivore's menu data\n\n// Base configuration\nconst CARNIVORE_CONFIG = {\n  name: 'Carnivore Restaurant',\n  location: 'Langata Road, Nairobi',\n  phone: '+254 20 600 5923',\n  website: 'https://www.tamarind.co.ke/carnivore',\n  coordinates: {\n    lat: -1.3182,\n    lng: 36.8172\n  }\n};\n\n// Option 1: Direct API endpoints (if Carnivore has them)\nconst CARNIVORE_DIRECT_API = {\n  baseURL: 'https://api.carnivore.co.ke',\n  // Hypothetical API endpoint\n  endpoints: {\n    menu: '/api/v1/menu',\n    promotions: '/api/v1/promotions',\n    reservations: '/api/v1/reservations',\n    delivery: '/api/v1/delivery'\n  }\n};\n\n// Option 2: Jumia Food API integration\nconst JUMIA_FOOD_API = {\n  baseURL: 'https://food.jumia.co.ke/api',\n  endpoints: {\n    search: '/restaurants/search',\n    menu: '/restaurants/{id}/menu',\n    categories: '/categories'\n  },\n  headers: {\n    'Authorization': 'Bearer YOUR_JUMIA_API_KEY',\n    'Content-Type': 'application/json'\n  }\n};\n\n// Option 3: Glovo API integration\nconst GLOVO_API = {\n  baseURL: 'https://api.glovoapp.com',\n  endpoints: {\n    restaurants: '/v3/restaurants',\n    menu: '/v3/restaurants/{id}/menu',\n    categories: '/v3/categories'\n  },\n  headers: {\n    'Authorization': 'Bearer YOUR_GLOVO_API_KEY',\n    'Content-Type': 'application/json'\n  }\n};\n\n// Option 4: Web scraping fallback (as last resort)\nconst WEB_SCRAPING_CONFIG = {\n  targetURL: 'https://www.tamarind.co.ke/carnivore',\n  selectors: {\n    menuItems: '.menu-item',\n    prices: '.price',\n    descriptions: '.description',\n    categories: '.category'\n  }\n};\n\n// Main API functions\nexport const carnivoreAPI = {\n  // Get full menu with real-time data\n  async getFullMenu() {\n    try {\n      // Try direct API first\n      const directMenu = await this.getDirectMenu();\n      if (directMenu) return directMenu;\n\n      // Try Jumia Food API\n      const jumiaMenu = await this.getJumiaMenu();\n      if (jumiaMenu) return jumiaMenu;\n\n      // Try Glovo API\n      const glovoMenu = await this.getGlovoMenu();\n      if (glovoMenu) return glovoMenu;\n\n      // Fallback to enhanced mock data\n      return this.getEnhancedMockMenu();\n    } catch (error) {\n      console.error('Error fetching Carnivore menu:', error);\n      return this.getEnhancedMockMenu();\n    }\n  },\n  // Try direct Carnivore API\n  async getDirectMenu() {\n    try {\n      const response = await fetch(`${CARNIVORE_DIRECT_API.baseURL}${CARNIVORE_DIRECT_API.endpoints.menu}`);\n      if (response.ok) {\n        const data = await response.json();\n        return this.transformDirectMenuData(data);\n      }\n    } catch (error) {\n      console.log('Direct API not available, trying alternatives...');\n    }\n    return null;\n  },\n  // Try Jumia Food API\n  async getJumiaMenu() {\n    try {\n      // Search for Carnivore on Jumia Food\n      const searchResponse = await fetch(`${JUMIA_FOOD_API.baseURL}${JUMIA_FOOD_API.endpoints.search}?q=carnivore`, {\n        headers: JUMIA_FOOD_API.headers\n      });\n      if (searchResponse.ok) {\n        const searchData = await searchResponse.json();\n        const carnivoreId = this.findCarnivoreId(searchData);\n        if (carnivoreId) {\n          const menuResponse = await fetch(`${JUMIA_FOOD_API.baseURL}${JUMIA_FOOD_API.endpoints.menu.replace('{id}', carnivoreId)}`, {\n            headers: JUMIA_FOOD_API.headers\n          });\n          if (menuResponse.ok) {\n            const menuData = await menuResponse.json();\n            return this.transformJumiaMenuData(menuData);\n          }\n        }\n      }\n    } catch (error) {\n      console.log('Jumia Food API not available, trying alternatives...');\n    }\n    return null;\n  },\n  // Try Glovo API\n  async getGlovoMenu() {\n    try {\n      // Search for Carnivore on Glovo\n      const searchResponse = await fetch(`${GLOVO_API.baseURL}${GLOVO_API.endpoints.restaurants}?search=carnivore`, {\n        headers: GLOVO_API.headers\n      });\n      if (searchResponse.ok) {\n        const searchData = await searchResponse.json();\n        const carnivoreId = this.findCarnivoreId(searchData);\n        if (carnivoreId) {\n          const menuResponse = await fetch(`${GLOVO_API.baseURL}${GLOVO_API.endpoints.menu.replace('{id}', carnivoreId)}`, {\n            headers: GLOVO_API.headers\n          });\n          if (menuResponse.ok) {\n            const menuData = await menuResponse.json();\n            return this.transformGlovoMenuData(menuData);\n          }\n        }\n      }\n    } catch (error) {\n      console.log('Glovo API not available, using fallback...');\n    }\n    return null;\n  },\n  // Enhanced mock menu with realistic data\n  getEnhancedMockMenu() {\n    return {\n      restaurant: CARNIVORE_CONFIG,\n      categories: {\n        'Beast of a Feast': [{\n          id: 'bf-001',\n          name: 'Nyama Choma Platter',\n          price: 'KES 3,500',\n          originalPrice: 'KES 4,200',\n          description: 'Mixed grilled meats: beef, lamb, chicken, pork with unlimited sides',\n          category: 'Beast of a Feast',\n          image: '/images/food/nyama-choma.jpg',\n          isPromo: true,\n          promoText: 'Most Popular! -20% OFF',\n          calories: '1200-1500',\n          serves: '2-3 people',\n          allergens: ['None'],\n          preparationTime: '15-20 min',\n          spiceLevel: 'Medium',\n          tags: ['Popular', 'Best Seller', 'Shareable']\n        }, {\n          id: 'bf-002',\n          name: 'Carnivore Special',\n          price: 'KES 4,200',\n          description: 'Premium selection: ostrich, crocodile, beef, lamb with unlimited sides',\n          category: 'Beast of a Feast',\n          image: '/images/food/carnivore-special.jpg',\n          isPromo: true,\n          promoText: 'Chef\\'s Choice',\n          calories: '1500-2000',\n          serves: '3-4 people',\n          allergens: ['None'],\n          preparationTime: '20-25 min',\n          spiceLevel: 'Medium',\n          tags: ['Premium', 'Exotic', 'Chef Special']\n        }],\n        'Grilled Meats': [{\n          id: 'gm-001',\n          name: 'Beef Ribs',\n          price: 'KES 2,800',\n          description: 'Slow-cooked beef ribs with BBQ sauce',\n          category: 'Grilled Meats',\n          image: '/images/food/beef-ribs.jpg',\n          calories: '800',\n          serves: '1 person',\n          allergens: ['None'],\n          preparationTime: '10-15 min',\n          spiceLevel: 'Mild',\n          tags: ['BBQ', 'Slow Cooked', 'Tender']\n        }, {\n          id: 'gm-002',\n          name: 'Lamb Chops',\n          price: 'KES 2,500',\n          description: 'Grilled lamb chops with rosemary',\n          category: 'Grilled Meats',\n          image: '/images/food/lamb-chops.jpg',\n          calories: '650',\n          serves: '1 person',\n          allergens: ['None'],\n          preparationTime: '12-18 min',\n          spiceLevel: 'Mild',\n          tags: ['Herb Crusted', 'Premium', 'Tender']\n        }],\n        'Game Meats': [{\n          id: 'gm-003',\n          name: 'Ostrich Fillet',\n          price: 'KES 3,200',\n          description: 'Lean ostrich meat grilled to perfection',\n          category: 'Game Meats',\n          image: '/images/food/ostrich-fillet.jpg',\n          calories: '400',\n          serves: '1 person',\n          allergens: ['None'],\n          preparationTime: '8-12 min',\n          spiceLevel: 'Mild',\n          tags: ['Exotic', 'Lean', 'Healthy']\n        }]\n      },\n      promotions: [{\n        id: 'promo-001',\n        title: 'Beast of a Feast Special',\n        description: 'Get 20% off on all Beast of a Feast platters',\n        discount: '20%',\n        validUntil: '2024-12-31',\n        code: 'BEAST20'\n      }, {\n        id: 'promo-002',\n        title: 'Weekday Lunch Special',\n        description: '50% off on selected grilled meats (Mon-Fri, 12-3 PM)',\n        discount: '50%',\n        validUntil: '2024-12-31',\n        code: 'LUNCH50'\n      }],\n      deliveryInfo: {\n        available: true,\n        services: ['Jumia Food', 'Glovo', 'Uber Eats'],\n        deliveryTime: '30-45 minutes',\n        deliveryFee: 'KES 200',\n        minimumOrder: 'KES 1,500'\n      }\n    };\n  },\n  // Helper functions\n  findCarnivoreId(searchData) {\n    var _searchData$restauran;\n    // Logic to find Carnivore's ID in search results\n    const carnivore = (_searchData$restauran = searchData.restaurants) === null || _searchData$restauran === void 0 ? void 0 : _searchData$restauran.find(r => r.name.toLowerCase().includes('carnivore'));\n    return carnivore === null || carnivore === void 0 ? void 0 : carnivore.id;\n  },\n  transformDirectMenuData(data) {\n    // Transform direct API data to our format\n    return {\n      restaurant: CARNIVORE_CONFIG,\n      categories: data.categories || {},\n      promotions: data.promotions || [],\n      deliveryInfo: data.delivery || {}\n    };\n  },\n  transformJumiaMenuData(data) {\n    // Transform Jumia Food data to our format\n    return {\n      restaurant: CARNIVORE_CONFIG,\n      categories: this.groupByCategory(data.menu || []),\n      promotions: data.promotions || [],\n      deliveryInfo: {\n        available: true,\n        services: ['Jumia Food'],\n        deliveryTime: data.deliveryTime || '30-45 minutes',\n        deliveryFee: data.deliveryFee || 'KES 200',\n        minimumOrder: data.minimumOrder || 'KES 1,500'\n      }\n    };\n  },\n  transformGlovoMenuData(data) {\n    // Transform Glovo data to our format\n    return {\n      restaurant: CARNIVORE_CONFIG,\n      categories: this.groupByCategory(data.menu || []),\n      promotions: data.promotions || [],\n      deliveryInfo: {\n        available: true,\n        services: ['Glovo'],\n        deliveryTime: data.deliveryTime || '30-45 minutes',\n        deliveryFee: data.deliveryFee || 'KES 200',\n        minimumOrder: data.minimumOrder || 'KES 1,500'\n      }\n    };\n  },\n  groupByCategory(menuItems) {\n    // Group menu items by category\n    const categories = {};\n    menuItems.forEach(item => {\n      if (!categories[item.category]) {\n        categories[item.category] = [];\n      }\n      categories[item.category].push(item);\n    });\n    return categories;\n  },\n  // Get restaurant information\n  getRestaurantInfo() {\n    return CARNIVORE_CONFIG;\n  },\n  // Get current promotions\n  async getPromotions() {\n    try {\n      const response = await fetch(`${CARNIVORE_DIRECT_API.baseURL}${CARNIVORE_DIRECT_API.endpoints.promotions}`);\n      if (response.ok) {\n        return await response.json();\n      }\n    } catch (error) {\n      console.log('Using mock promotions');\n    }\n    return this.getEnhancedMockMenu().promotions;\n  },\n  // Check delivery availability\n  async checkDeliveryAvailability() {\n    try {\n      const response = await fetch(`${CARNIVORE_DIRECT_API.baseURL}${CARNIVORE_DIRECT_API.endpoints.delivery}`);\n      if (response.ok) {\n        return await response.json();\n      }\n    } catch (error) {\n      console.log('Using mock delivery info');\n    }\n    return this.getEnhancedMockMenu().deliveryInfo;\n  }\n};\nexport default carnivoreAPI;","map":{"version":3,"names":["CARNIVORE_CONFIG","name","location","phone","website","coordinates","lat","lng","CARNIVORE_DIRECT_API","baseURL","endpoints","menu","promotions","reservations","delivery","JUMIA_FOOD_API","search","categories","headers","GLOVO_API","restaurants","WEB_SCRAPING_CONFIG","targetURL","selectors","menuItems","prices","descriptions","carnivoreAPI","getFullMenu","directMenu","getDirectMenu","jumiaMenu","getJumiaMenu","glovoMenu","getGlovoMenu","getEnhancedMockMenu","error","console","response","fetch","ok","data","json","transformDirectMenuData","log","searchResponse","searchData","carnivoreId","findCarnivoreId","menuResponse","replace","menuData","transformJumiaMenuData","transformGlovoMenuData","restaurant","id","price","originalPrice","description","category","image","isPromo","promoText","calories","serves","allergens","preparationTime","spiceLevel","tags","title","discount","validUntil","code","deliveryInfo","available","services","deliveryTime","deliveryFee","minimumOrder","_searchData$restauran","carnivore","find","r","toLowerCase","includes","groupByCategory","forEach","item","push","getRestaurantInfo","getPromotions","checkDeliveryAvailability"],"sources":["C:/Projects/gawa/frontend/src/api/carnivoreAPI.js"],"sourcesContent":["// Carnivore Restaurant API Integration Service\r\n// This service provides multiple ways to get Carnivore's menu data\r\n\r\n// Base configuration\r\nconst CARNIVORE_CONFIG = {\r\n  name: 'Carnivore Restaurant',\r\n  location: 'Langata Road, Nairobi',\r\n  phone: '+254 20 600 5923',\r\n  website: 'https://www.tamarind.co.ke/carnivore',\r\n  coordinates: { lat: -1.3182, lng: 36.8172 }\r\n};\r\n\r\n// Option 1: Direct API endpoints (if Carnivore has them)\r\nconst CARNIVORE_DIRECT_API = {\r\n  baseURL: 'https://api.carnivore.co.ke', // Hypothetical API endpoint\r\n  endpoints: {\r\n    menu: '/api/v1/menu',\r\n    promotions: '/api/v1/promotions',\r\n    reservations: '/api/v1/reservations',\r\n    delivery: '/api/v1/delivery'\r\n  }\r\n};\r\n\r\n// Option 2: Jumia Food API integration\r\nconst JUMIA_FOOD_API = {\r\n  baseURL: 'https://food.jumia.co.ke/api',\r\n  endpoints: {\r\n    search: '/restaurants/search',\r\n    menu: '/restaurants/{id}/menu',\r\n    categories: '/categories'\r\n  },\r\n  headers: {\r\n    'Authorization': 'Bearer YOUR_JUMIA_API_KEY',\r\n    'Content-Type': 'application/json'\r\n  }\r\n};\r\n\r\n// Option 3: Glovo API integration\r\nconst GLOVO_API = {\r\n  baseURL: 'https://api.glovoapp.com',\r\n  endpoints: {\r\n    restaurants: '/v3/restaurants',\r\n    menu: '/v3/restaurants/{id}/menu',\r\n    categories: '/v3/categories'\r\n  },\r\n  headers: {\r\n    'Authorization': 'Bearer YOUR_GLOVO_API_KEY',\r\n    'Content-Type': 'application/json'\r\n  }\r\n};\r\n\r\n// Option 4: Web scraping fallback (as last resort)\r\nconst WEB_SCRAPING_CONFIG = {\r\n  targetURL: 'https://www.tamarind.co.ke/carnivore',\r\n  selectors: {\r\n    menuItems: '.menu-item',\r\n    prices: '.price',\r\n    descriptions: '.description',\r\n    categories: '.category'\r\n  }\r\n};\r\n\r\n// Main API functions\r\nexport const carnivoreAPI = {\r\n  // Get full menu with real-time data\r\n  async getFullMenu() {\r\n    try {\r\n      // Try direct API first\r\n      const directMenu = await this.getDirectMenu();\r\n      if (directMenu) return directMenu;\r\n\r\n      // Try Jumia Food API\r\n      const jumiaMenu = await this.getJumiaMenu();\r\n      if (jumiaMenu) return jumiaMenu;\r\n\r\n      // Try Glovo API\r\n      const glovoMenu = await this.getGlovoMenu();\r\n      if (glovoMenu) return glovoMenu;\r\n\r\n      // Fallback to enhanced mock data\r\n      return this.getEnhancedMockMenu();\r\n    } catch (error) {\r\n      console.error('Error fetching Carnivore menu:', error);\r\n      return this.getEnhancedMockMenu();\r\n    }\r\n  },\r\n\r\n  // Try direct Carnivore API\r\n  async getDirectMenu() {\r\n    try {\r\n      const response = await fetch(`${CARNIVORE_DIRECT_API.baseURL}${CARNIVORE_DIRECT_API.endpoints.menu}`);\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        return this.transformDirectMenuData(data);\r\n      }\r\n    } catch (error) {\r\n      console.log('Direct API not available, trying alternatives...');\r\n    }\r\n    return null;\r\n  },\r\n\r\n  // Try Jumia Food API\r\n  async getJumiaMenu() {\r\n    try {\r\n      // Search for Carnivore on Jumia Food\r\n      const searchResponse = await fetch(`${JUMIA_FOOD_API.baseURL}${JUMIA_FOOD_API.endpoints.search}?q=carnivore`, {\r\n        headers: JUMIA_FOOD_API.headers\r\n      });\r\n      \r\n      if (searchResponse.ok) {\r\n        const searchData = await searchResponse.json();\r\n        const carnivoreId = this.findCarnivoreId(searchData);\r\n        \r\n        if (carnivoreId) {\r\n          const menuResponse = await fetch(`${JUMIA_FOOD_API.baseURL}${JUMIA_FOOD_API.endpoints.menu.replace('{id}', carnivoreId)}`, {\r\n            headers: JUMIA_FOOD_API.headers\r\n          });\r\n          \r\n          if (menuResponse.ok) {\r\n            const menuData = await menuResponse.json();\r\n            return this.transformJumiaMenuData(menuData);\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log('Jumia Food API not available, trying alternatives...');\r\n    }\r\n    return null;\r\n  },\r\n\r\n  // Try Glovo API\r\n  async getGlovoMenu() {\r\n    try {\r\n      // Search for Carnivore on Glovo\r\n      const searchResponse = await fetch(`${GLOVO_API.baseURL}${GLOVO_API.endpoints.restaurants}?search=carnivore`, {\r\n        headers: GLOVO_API.headers\r\n      });\r\n      \r\n      if (searchResponse.ok) {\r\n        const searchData = await searchResponse.json();\r\n        const carnivoreId = this.findCarnivoreId(searchData);\r\n        \r\n        if (carnivoreId) {\r\n          const menuResponse = await fetch(`${GLOVO_API.baseURL}${GLOVO_API.endpoints.menu.replace('{id}', carnivoreId)}`, {\r\n            headers: GLOVO_API.headers\r\n          });\r\n          \r\n          if (menuResponse.ok) {\r\n            const menuData = await menuResponse.json();\r\n            return this.transformGlovoMenuData(menuData);\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log('Glovo API not available, using fallback...');\r\n    }\r\n    return null;\r\n  },\r\n\r\n  // Enhanced mock menu with realistic data\r\n  getEnhancedMockMenu() {\r\n    return {\r\n      restaurant: CARNIVORE_CONFIG,\r\n      categories: {\r\n        'Beast of a Feast': [\r\n          {\r\n            id: 'bf-001',\r\n            name: 'Nyama Choma Platter',\r\n            price: 'KES 3,500',\r\n            originalPrice: 'KES 4,200',\r\n            description: 'Mixed grilled meats: beef, lamb, chicken, pork with unlimited sides',\r\n            category: 'Beast of a Feast',\r\n            image: '/images/food/nyama-choma.jpg',\r\n            isPromo: true,\r\n            promoText: 'Most Popular! -20% OFF',\r\n            calories: '1200-1500',\r\n            serves: '2-3 people',\r\n            allergens: ['None'],\r\n            preparationTime: '15-20 min',\r\n            spiceLevel: 'Medium',\r\n            tags: ['Popular', 'Best Seller', 'Shareable']\r\n          },\r\n          {\r\n            id: 'bf-002',\r\n            name: 'Carnivore Special',\r\n            price: 'KES 4,200',\r\n            description: 'Premium selection: ostrich, crocodile, beef, lamb with unlimited sides',\r\n            category: 'Beast of a Feast',\r\n            image: '/images/food/carnivore-special.jpg',\r\n            isPromo: true,\r\n            promoText: 'Chef\\'s Choice',\r\n            calories: '1500-2000',\r\n            serves: '3-4 people',\r\n            allergens: ['None'],\r\n            preparationTime: '20-25 min',\r\n            spiceLevel: 'Medium',\r\n            tags: ['Premium', 'Exotic', 'Chef Special']\r\n          }\r\n        ],\r\n        'Grilled Meats': [\r\n          {\r\n            id: 'gm-001',\r\n            name: 'Beef Ribs',\r\n            price: 'KES 2,800',\r\n            description: 'Slow-cooked beef ribs with BBQ sauce',\r\n            category: 'Grilled Meats',\r\n            image: '/images/food/beef-ribs.jpg',\r\n            calories: '800',\r\n            serves: '1 person',\r\n            allergens: ['None'],\r\n            preparationTime: '10-15 min',\r\n            spiceLevel: 'Mild',\r\n            tags: ['BBQ', 'Slow Cooked', 'Tender']\r\n          },\r\n          {\r\n            id: 'gm-002',\r\n            name: 'Lamb Chops',\r\n            price: 'KES 2,500',\r\n            description: 'Grilled lamb chops with rosemary',\r\n            category: 'Grilled Meats',\r\n            image: '/images/food/lamb-chops.jpg',\r\n            calories: '650',\r\n            serves: '1 person',\r\n            allergens: ['None'],\r\n            preparationTime: '12-18 min',\r\n            spiceLevel: 'Mild',\r\n            tags: ['Herb Crusted', 'Premium', 'Tender']\r\n          }\r\n        ],\r\n        'Game Meats': [\r\n          {\r\n            id: 'gm-003',\r\n            name: 'Ostrich Fillet',\r\n            price: 'KES 3,200',\r\n            description: 'Lean ostrich meat grilled to perfection',\r\n            category: 'Game Meats',\r\n            image: '/images/food/ostrich-fillet.jpg',\r\n            calories: '400',\r\n            serves: '1 person',\r\n            allergens: ['None'],\r\n            preparationTime: '8-12 min',\r\n            spiceLevel: 'Mild',\r\n            tags: ['Exotic', 'Lean', 'Healthy']\r\n          }\r\n        ]\r\n      },\r\n      promotions: [\r\n        {\r\n          id: 'promo-001',\r\n          title: 'Beast of a Feast Special',\r\n          description: 'Get 20% off on all Beast of a Feast platters',\r\n          discount: '20%',\r\n          validUntil: '2024-12-31',\r\n          code: 'BEAST20'\r\n        },\r\n        {\r\n          id: 'promo-002',\r\n          title: 'Weekday Lunch Special',\r\n          description: '50% off on selected grilled meats (Mon-Fri, 12-3 PM)',\r\n          discount: '50%',\r\n          validUntil: '2024-12-31',\r\n          code: 'LUNCH50'\r\n        }\r\n      ],\r\n      deliveryInfo: {\r\n        available: true,\r\n        services: ['Jumia Food', 'Glovo', 'Uber Eats'],\r\n        deliveryTime: '30-45 minutes',\r\n        deliveryFee: 'KES 200',\r\n        minimumOrder: 'KES 1,500'\r\n      }\r\n    };\r\n  },\r\n\r\n  // Helper functions\r\n  findCarnivoreId(searchData) {\r\n    // Logic to find Carnivore's ID in search results\r\n    const carnivore = searchData.restaurants?.find(r => \r\n      r.name.toLowerCase().includes('carnivore')\r\n    );\r\n    return carnivore?.id;\r\n  },\r\n\r\n  transformDirectMenuData(data) {\r\n    // Transform direct API data to our format\r\n    return {\r\n      restaurant: CARNIVORE_CONFIG,\r\n      categories: data.categories || {},\r\n      promotions: data.promotions || [],\r\n      deliveryInfo: data.delivery || {}\r\n    };\r\n  },\r\n\r\n  transformJumiaMenuData(data) {\r\n    // Transform Jumia Food data to our format\r\n    return {\r\n      restaurant: CARNIVORE_CONFIG,\r\n      categories: this.groupByCategory(data.menu || []),\r\n      promotions: data.promotions || [],\r\n      deliveryInfo: {\r\n        available: true,\r\n        services: ['Jumia Food'],\r\n        deliveryTime: data.deliveryTime || '30-45 minutes',\r\n        deliveryFee: data.deliveryFee || 'KES 200',\r\n        minimumOrder: data.minimumOrder || 'KES 1,500'\r\n      }\r\n    };\r\n  },\r\n\r\n  transformGlovoMenuData(data) {\r\n    // Transform Glovo data to our format\r\n    return {\r\n      restaurant: CARNIVORE_CONFIG,\r\n      categories: this.groupByCategory(data.menu || []),\r\n      promotions: data.promotions || [],\r\n      deliveryInfo: {\r\n        available: true,\r\n        services: ['Glovo'],\r\n        deliveryTime: data.deliveryTime || '30-45 minutes',\r\n        deliveryFee: data.deliveryFee || 'KES 200',\r\n        minimumOrder: data.minimumOrder || 'KES 1,500'\r\n      }\r\n    };\r\n  },\r\n\r\n  groupByCategory(menuItems) {\r\n    // Group menu items by category\r\n    const categories = {};\r\n    menuItems.forEach(item => {\r\n      if (!categories[item.category]) {\r\n        categories[item.category] = [];\r\n      }\r\n      categories[item.category].push(item);\r\n    });\r\n    return categories;\r\n  },\r\n\r\n  // Get restaurant information\r\n  getRestaurantInfo() {\r\n    return CARNIVORE_CONFIG;\r\n  },\r\n\r\n  // Get current promotions\r\n  async getPromotions() {\r\n    try {\r\n      const response = await fetch(`${CARNIVORE_DIRECT_API.baseURL}${CARNIVORE_DIRECT_API.endpoints.promotions}`);\r\n      if (response.ok) {\r\n        return await response.json();\r\n      }\r\n    } catch (error) {\r\n      console.log('Using mock promotions');\r\n    }\r\n    \r\n    return this.getEnhancedMockMenu().promotions;\r\n  },\r\n\r\n  // Check delivery availability\r\n  async checkDeliveryAvailability() {\r\n    try {\r\n      const response = await fetch(`${CARNIVORE_DIRECT_API.baseURL}${CARNIVORE_DIRECT_API.endpoints.delivery}`);\r\n      if (response.ok) {\r\n        return await response.json();\r\n      }\r\n    } catch (error) {\r\n      console.log('Using mock delivery info');\r\n    }\r\n    \r\n    return this.getEnhancedMockMenu().deliveryInfo;\r\n  }\r\n};\r\n\r\nexport default carnivoreAPI;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}