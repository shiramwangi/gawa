{"ast":null,"code":"import { refreshToken } from './auth';\nclass ApiClient {\n  constructor() {\n    this.baseURL = 'http://localhost:8000';\n    this.isRefreshing = false;\n    this.failedQueue = [];\n  }\n\n  // Process the queue of failed requests\n  processQueue(error, token = null) {\n    this.failedQueue.forEach(({\n      resolve,\n      reject\n    }) => {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(token);\n      }\n    });\n    this.failedQueue = [];\n  }\n\n  // Get access token from localStorage\n  getAccessToken() {\n    return localStorage.getItem('access_token');\n  }\n\n  // Get refresh token from localStorage\n  getRefreshToken() {\n    return localStorage.getItem('refresh_token');\n  }\n\n  // Set tokens in localStorage\n  setTokens(accessToken, refreshToken) {\n    if (accessToken) {\n      localStorage.setItem('access_token', accessToken);\n    }\n    if (refreshToken) {\n      localStorage.setItem('refresh_token', refreshToken);\n    }\n  }\n\n  // Clear all tokens and user data\n  clearTokens() {\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('refresh_token');\n    localStorage.removeItem('user');\n  }\n\n  // Handle token refresh\n  async handleTokenRefresh() {\n    try {\n      const refreshTokenValue = this.getRefreshToken();\n      if (!refreshTokenValue) {\n        throw new Error('No refresh token available');\n      }\n      const response = await fetch(`${this.baseURL}/auth/refresh`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          refresh_token: refreshTokenValue\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Token refresh failed');\n      }\n      const data = await response.json();\n\n      // Update tokens\n      this.setTokens(data.access_token, data.refresh_token);\n      return data.access_token;\n    } catch (error) {\n      // Clear tokens and redirect to login\n      this.clearTokens();\n      window.location.href = '/login';\n      throw error;\n    }\n  }\n\n  // Make API request with automatic token refresh\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n\n    // Add authorization header if token exists\n    const accessToken = this.getAccessToken();\n    if (accessToken) {\n      options.headers = {\n        ...options.headers,\n        'Authorization': `Bearer ${accessToken}`\n      };\n    }\n    try {\n      const response = await fetch(url, options);\n\n      // If unauthorized, try to refresh token\n      if (response.status === 401 && this.getRefreshToken()) {\n        if (this.isRefreshing) {\n          // If already refreshing, queue this request\n          return new Promise((resolve, reject) => {\n            this.failedQueue.push({\n              resolve,\n              reject\n            });\n          }).then(token => {\n            options.headers = {\n              ...options.headers,\n              'Authorization': `Bearer ${token}`\n            };\n            return fetch(url, options);\n          });\n        }\n        this.isRefreshing = true;\n        try {\n          const newToken = await this.handleTokenRefresh();\n          this.processQueue(null, newToken);\n\n          // Retry the original request with new token\n          options.headers = {\n            ...options.headers,\n            'Authorization': `Bearer ${newToken}`\n          };\n          const retryResponse = await fetch(url, options);\n          return retryResponse;\n        } catch (error) {\n          this.processQueue(error, null);\n          throw error;\n        } finally {\n          this.isRefreshing = false;\n        }\n      }\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // GET request\n  async get(endpoint, options = {}) {\n    return this.request(endpoint, {\n      ...options,\n      method: 'GET'\n    });\n  }\n\n  // POST request\n  async post(endpoint, data, options = {}) {\n    return this.request(endpoint, {\n      ...options,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      },\n      body: JSON.stringify(data)\n    });\n  }\n\n  // PUT request\n  async put(endpoint, data, options = {}) {\n    return this.request(endpoint, {\n      ...options,\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      },\n      body: JSON.stringify(data)\n    });\n  }\n\n  // DELETE request\n  async delete(endpoint, options = {}) {\n    return this.request(endpoint, {\n      ...options,\n      method: 'DELETE'\n    });\n  }\n}\n\n// Create and export a single instance\nconst apiClient = new ApiClient();\nexport default apiClient;","map":{"version":3,"names":["refreshToken","ApiClient","constructor","baseURL","isRefreshing","failedQueue","processQueue","error","token","forEach","resolve","reject","getAccessToken","localStorage","getItem","getRefreshToken","setTokens","accessToken","setItem","clearTokens","removeItem","handleTokenRefresh","refreshTokenValue","Error","response","fetch","method","headers","body","JSON","stringify","refresh_token","ok","data","json","access_token","window","location","href","request","endpoint","options","url","status","Promise","push","then","newToken","retryResponse","get","post","put","delete","apiClient"],"sources":["C:/Projects/gawa/frontend/src/api/apiClient.js"],"sourcesContent":["import { refreshToken } from './auth';\r\n\r\nclass ApiClient {\r\n  constructor() {\r\n    this.baseURL = 'http://localhost:8000';\r\n    this.isRefreshing = false;\r\n    this.failedQueue = [];\r\n  }\r\n\r\n  // Process the queue of failed requests\r\n  processQueue(error, token = null) {\r\n    this.failedQueue.forEach(({ resolve, reject }) => {\r\n      if (error) {\r\n        reject(error);\r\n      } else {\r\n        resolve(token);\r\n      }\r\n    });\r\n    this.failedQueue = [];\r\n  }\r\n\r\n  // Get access token from localStorage\r\n  getAccessToken() {\r\n    return localStorage.getItem('access_token');\r\n  }\r\n\r\n  // Get refresh token from localStorage\r\n  getRefreshToken() {\r\n    return localStorage.getItem('refresh_token');\r\n  }\r\n\r\n  // Set tokens in localStorage\r\n  setTokens(accessToken, refreshToken) {\r\n    if (accessToken) {\r\n      localStorage.setItem('access_token', accessToken);\r\n    }\r\n    if (refreshToken) {\r\n      localStorage.setItem('refresh_token', refreshToken);\r\n    }\r\n  }\r\n\r\n  // Clear all tokens and user data\r\n  clearTokens() {\r\n    localStorage.removeItem('access_token');\r\n    localStorage.removeItem('refresh_token');\r\n    localStorage.removeItem('user');\r\n  }\r\n\r\n  // Handle token refresh\r\n  async handleTokenRefresh() {\r\n    try {\r\n      const refreshTokenValue = this.getRefreshToken();\r\n      \r\n      if (!refreshTokenValue) {\r\n        throw new Error('No refresh token available');\r\n      }\r\n\r\n      const response = await fetch(`${this.baseURL}/auth/refresh`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          refresh_token: refreshTokenValue\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Token refresh failed');\r\n      }\r\n\r\n      const data = await response.json();\r\n      \r\n      // Update tokens\r\n      this.setTokens(data.access_token, data.refresh_token);\r\n      \r\n      return data.access_token;\r\n    } catch (error) {\r\n      // Clear tokens and redirect to login\r\n      this.clearTokens();\r\n      window.location.href = '/login';\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Make API request with automatic token refresh\r\n  async request(endpoint, options = {}) {\r\n    const url = `${this.baseURL}${endpoint}`;\r\n    \r\n    // Add authorization header if token exists\r\n    const accessToken = this.getAccessToken();\r\n    if (accessToken) {\r\n      options.headers = {\r\n        ...options.headers,\r\n        'Authorization': `Bearer ${accessToken}`\r\n      };\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(url, options);\r\n      \r\n      // If unauthorized, try to refresh token\r\n      if (response.status === 401 && this.getRefreshToken()) {\r\n        if (this.isRefreshing) {\r\n          // If already refreshing, queue this request\r\n          return new Promise((resolve, reject) => {\r\n            this.failedQueue.push({ resolve, reject });\r\n          }).then(token => {\r\n            options.headers = {\r\n              ...options.headers,\r\n              'Authorization': `Bearer ${token}`\r\n            };\r\n            return fetch(url, options);\r\n          });\r\n        }\r\n\r\n        this.isRefreshing = true;\r\n\r\n        try {\r\n          const newToken = await this.handleTokenRefresh();\r\n          this.processQueue(null, newToken);\r\n          \r\n          // Retry the original request with new token\r\n          options.headers = {\r\n            ...options.headers,\r\n            'Authorization': `Bearer ${newToken}`\r\n          };\r\n          \r\n          const retryResponse = await fetch(url, options);\r\n          return retryResponse;\r\n        } catch (error) {\r\n          this.processQueue(error, null);\r\n          throw error;\r\n        } finally {\r\n          this.isRefreshing = false;\r\n        }\r\n      }\r\n\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // GET request\r\n  async get(endpoint, options = {}) {\r\n    return this.request(endpoint, { ...options, method: 'GET' });\r\n  }\r\n\r\n  // POST request\r\n  async post(endpoint, data, options = {}) {\r\n    return this.request(endpoint, {\r\n      ...options,\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...options.headers,\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n  }\r\n\r\n  // PUT request\r\n  async put(endpoint, data, options = {}) {\r\n    return this.request(endpoint, {\r\n      ...options,\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...options.headers,\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n  }\r\n\r\n  // DELETE request\r\n  async delete(endpoint, options = {}) {\r\n    return this.request(endpoint, { ...options, method: 'DELETE' });\r\n  }\r\n}\r\n\r\n// Create and export a single instance\r\nconst apiClient = new ApiClient();\r\nexport default apiClient;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}