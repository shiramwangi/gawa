{"ast":null,"code":"import apiClient from './apiClient';\n\n// Register user\nexport const registerUser = async userData => {\n  const response = await apiClient.post('/auth/register', userData);\n  const data = await response.json();\n  if (response.ok) {\n    // Store user data if needed\n    if (data.id) {\n      localStorage.setItem('user', JSON.stringify(data));\n    }\n  }\n  return data;\n};\n\n// Login user\nexport const loginUser = async credentials => {\n  const response = await apiClient.post('/auth/login', credentials);\n  const data = await response.json();\n  if (response.ok && data.access_token) {\n    // Store tokens\n    apiClient.setTokens(data.access_token, data.refresh_token);\n\n    // Get user data using the /me endpoint\n    try {\n      const userResponse = await apiClient.get('/auth/me');\n      if (userResponse.ok) {\n        const userData = await userResponse.json();\n        localStorage.setItem('user', JSON.stringify(userData));\n      }\n    } catch (error) {\n      console.log('Could not fetch user data:', error);\n    }\n  }\n  return data;\n};\n\n// Logout user\nexport const logoutUser = async () => {\n  try {\n    const response = await apiClient.post('/auth/logout');\n\n    // Clear tokens regardless of response\n    apiClient.clearTokens();\n    localStorage.removeItem('user');\n    return response.json();\n  } catch (error) {\n    // Clear tokens even if logout fails\n    apiClient.clearTokens();\n    localStorage.removeItem('user');\n    throw error;\n  }\n};\n\n// Refresh token (used internally by apiClient)\nexport const refreshToken = async () => {\n  const response = await apiClient.post('/auth/refresh', {\n    refresh_token: apiClient.getRefreshToken()\n  });\n  if (response.ok) {\n    const data = await response.json();\n    apiClient.setTokens(data.access_token, data.refresh_token);\n    return data.access_token;\n  }\n  throw new Error('Token refresh failed');\n};\n\n// Check if user is authenticated\nexport const isAuthenticated = () => {\n  return !!apiClient.getAccessToken();\n};\n\n// Get current user data\nexport const getCurrentUser = () => {\n  const userStr = localStorage.getItem('user');\n  return userStr ? JSON.parse(userStr) : null;\n};","map":{"version":3,"names":["apiClient","registerUser","userData","response","post","data","json","ok","id","localStorage","setItem","JSON","stringify","loginUser","credentials","access_token","setTokens","refresh_token","userResponse","get","error","console","log","logoutUser","clearTokens","removeItem","refreshToken","getRefreshToken","Error","isAuthenticated","getAccessToken","getCurrentUser","userStr","getItem","parse"],"sources":["C:/Projects/gawa/frontend/src/api/auth.js"],"sourcesContent":["import apiClient from './apiClient';\r\n\r\n// Register user\r\nexport const registerUser = async (userData) => {\r\n  const response = await apiClient.post('/auth/register', userData);\r\n  const data = await response.json();\r\n  \r\n  if (response.ok) {\r\n    // Store user data if needed\r\n    if (data.id) {\r\n      localStorage.setItem('user', JSON.stringify(data));\r\n    }\r\n  }\r\n  \r\n  return data;\r\n};\r\n\r\n// Login user\r\nexport const loginUser = async (credentials) => {\r\n  const response = await apiClient.post('/auth/login', credentials);\r\n  const data = await response.json();\r\n  \r\n  if (response.ok && data.access_token) {\r\n    // Store tokens\r\n    apiClient.setTokens(data.access_token, data.refresh_token);\r\n    \r\n    // Get user data using the /me endpoint\r\n    try {\r\n      const userResponse = await apiClient.get('/auth/me');\r\n      if (userResponse.ok) {\r\n        const userData = await userResponse.json();\r\n        localStorage.setItem('user', JSON.stringify(userData));\r\n      }\r\n    } catch (error) {\r\n      console.log('Could not fetch user data:', error);\r\n    }\r\n  }\r\n  \r\n  return data;\r\n};\r\n\r\n// Logout user\r\nexport const logoutUser = async () => {\r\n  try {\r\n    const response = await apiClient.post('/auth/logout');\r\n    \r\n    // Clear tokens regardless of response\r\n    apiClient.clearTokens();\r\n    localStorage.removeItem('user');\r\n    \r\n    return response.json();\r\n  } catch (error) {\r\n    // Clear tokens even if logout fails\r\n    apiClient.clearTokens();\r\n    localStorage.removeItem('user');\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Refresh token (used internally by apiClient)\r\nexport const refreshToken = async () => {\r\n  const response = await apiClient.post('/auth/refresh', {\r\n    refresh_token: apiClient.getRefreshToken()\r\n  });\r\n  \r\n  if (response.ok) {\r\n    const data = await response.json();\r\n    apiClient.setTokens(data.access_token, data.refresh_token);\r\n    return data.access_token;\r\n  }\r\n  \r\n  throw new Error('Token refresh failed');\r\n};\r\n\r\n// Check if user is authenticated\r\nexport const isAuthenticated = () => {\r\n  return !!apiClient.getAccessToken();\r\n};\r\n\r\n// Get current user data\r\nexport const getCurrentUser = () => {\r\n  const userStr = localStorage.getItem('user');\r\n  return userStr ? JSON.parse(userStr) : null;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}