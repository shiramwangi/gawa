{"ast":null,"code":"import apiClient from './apiClient';\n\n// Get current user profile from API\nexport const fetchCurrentUser = async () => {\n  const response = await apiClient.get('/users/me');\n  return response.json();\n};\n\n// Update current user profile\nexport const updateCurrentUser = async userData => {\n  var _currentUser$user;\n  // First get the current user to get their ID\n  const currentUserResponse = await apiClient.get('/users/me');\n  const currentUser = await currentUserResponse.json();\n  console.log('Current user response:', currentUser);\n  console.log('User object:', currentUser.user);\n  console.log('User ID:', (_currentUser$user = currentUser.user) === null || _currentUser$user === void 0 ? void 0 : _currentUser$user.id);\n  if (!currentUser.user || !currentUser.user.id) {\n    console.error('Missing user data:', currentUser);\n    throw new Error('Could not get current user ID');\n  }\n\n  // Then update using the user ID\n  const response = await apiClient.put(`/users/${currentUser.user.id}`, userData);\n  return response.json();\n};\n\n// Get user by ID (admin only)\nexport const getUserById = async userId => {\n  const response = await apiClient.get(`/users/${userId}`);\n  return response.json();\n};\n\n// Get all users (admin only)\nexport const getAllUsers = async () => {\n  const response = await apiClient.get('/users');\n  return response.json();\n};\n\n// Delete current user account\nexport const deleteCurrentUser = async () => {\n  // First get the current user to get their ID\n  const currentUserResponse = await apiClient.get('/users/me');\n  const currentUser = await currentUserResponse.json();\n  if (!currentUser.user || !currentUser.user.id) {\n    throw new Error('Could not get current user ID');\n  }\n\n  // Then delete using the user ID\n  const response = await apiClient.delete(`/users/${currentUser.user.id}`);\n  return response.json();\n};","map":{"version":3,"names":["apiClient","fetchCurrentUser","response","get","json","updateCurrentUser","userData","_currentUser$user","currentUserResponse","currentUser","console","log","user","id","error","Error","put","getUserById","userId","getAllUsers","deleteCurrentUser","delete"],"sources":["C:/Projects/gawa/frontend/src/api/users.js"],"sourcesContent":["import apiClient from './apiClient';\r\n\r\n// Get current user profile from API\r\nexport const fetchCurrentUser = async () => {\r\n  const response = await apiClient.get('/users/me');\r\n  return response.json();\r\n};\r\n\r\n// Update current user profile\r\nexport const updateCurrentUser = async (userData) => {\r\n  // First get the current user to get their ID\r\n  const currentUserResponse = await apiClient.get('/users/me');\r\n  const currentUser = await currentUserResponse.json();\r\n  \r\n  console.log('Current user response:', currentUser);\r\n  console.log('User object:', currentUser.user);\r\n  console.log('User ID:', currentUser.user?.id);\r\n  \r\n  if (!currentUser.user || !currentUser.user.id) {\r\n    console.error('Missing user data:', currentUser);\r\n    throw new Error('Could not get current user ID');\r\n  }\r\n  \r\n  // Then update using the user ID\r\n  const response = await apiClient.put(`/users/${currentUser.user.id}`, userData);\r\n  return response.json();\r\n};\r\n\r\n// Get user by ID (admin only)\r\nexport const getUserById = async (userId) => {\r\n  const response = await apiClient.get(`/users/${userId}`);\r\n  return response.json();\r\n};\r\n\r\n// Get all users (admin only)\r\nexport const getAllUsers = async () => {\r\n  const response = await apiClient.get('/users');\r\n  return response.json();\r\n};\r\n\r\n// Delete current user account\r\nexport const deleteCurrentUser = async () => {\r\n  // First get the current user to get their ID\r\n  const currentUserResponse = await apiClient.get('/users/me');\r\n  const currentUser = await currentUserResponse.json();\r\n  \r\n  if (!currentUser.user || !currentUser.user.id) {\r\n    throw new Error('Could not get current user ID');\r\n  }\r\n  \r\n  // Then delete using the user ID\r\n  const response = await apiClient.delete(`/users/${currentUser.user.id}`);\r\n  return response.json();\r\n};\r\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,aAAa;;AAEnC;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAAA,CAAA,KAAY;EAC1C,MAAMC,QAAQ,GAAG,MAAMF,SAAS,CAACG,GAAG,CAAC,WAAW,CAAC;EACjD,OAAOD,QAAQ,CAACE,IAAI,CAAC,CAAC;AACxB,CAAC;;AAED;AACA,OAAO,MAAMC,iBAAiB,GAAG,MAAOC,QAAQ,IAAK;EAAA,IAAAC,iBAAA;EACnD;EACA,MAAMC,mBAAmB,GAAG,MAAMR,SAAS,CAACG,GAAG,CAAC,WAAW,CAAC;EAC5D,MAAMM,WAAW,GAAG,MAAMD,mBAAmB,CAACJ,IAAI,CAAC,CAAC;EAEpDM,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEF,WAAW,CAAC;EAClDC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEF,WAAW,CAACG,IAAI,CAAC;EAC7CF,OAAO,CAACC,GAAG,CAAC,UAAU,GAAAJ,iBAAA,GAAEE,WAAW,CAACG,IAAI,cAAAL,iBAAA,uBAAhBA,iBAAA,CAAkBM,EAAE,CAAC;EAE7C,IAAI,CAACJ,WAAW,CAACG,IAAI,IAAI,CAACH,WAAW,CAACG,IAAI,CAACC,EAAE,EAAE;IAC7CH,OAAO,CAACI,KAAK,CAAC,oBAAoB,EAAEL,WAAW,CAAC;IAChD,MAAM,IAAIM,KAAK,CAAC,+BAA+B,CAAC;EAClD;;EAEA;EACA,MAAMb,QAAQ,GAAG,MAAMF,SAAS,CAACgB,GAAG,CAAC,UAAUP,WAAW,CAACG,IAAI,CAACC,EAAE,EAAE,EAAEP,QAAQ,CAAC;EAC/E,OAAOJ,QAAQ,CAACE,IAAI,CAAC,CAAC;AACxB,CAAC;;AAED;AACA,OAAO,MAAMa,WAAW,GAAG,MAAOC,MAAM,IAAK;EAC3C,MAAMhB,QAAQ,GAAG,MAAMF,SAAS,CAACG,GAAG,CAAC,UAAUe,MAAM,EAAE,CAAC;EACxD,OAAOhB,QAAQ,CAACE,IAAI,CAAC,CAAC;AACxB,CAAC;;AAED;AACA,OAAO,MAAMe,WAAW,GAAG,MAAAA,CAAA,KAAY;EACrC,MAAMjB,QAAQ,GAAG,MAAMF,SAAS,CAACG,GAAG,CAAC,QAAQ,CAAC;EAC9C,OAAOD,QAAQ,CAACE,IAAI,CAAC,CAAC;AACxB,CAAC;;AAED;AACA,OAAO,MAAMgB,iBAAiB,GAAG,MAAAA,CAAA,KAAY;EAC3C;EACA,MAAMZ,mBAAmB,GAAG,MAAMR,SAAS,CAACG,GAAG,CAAC,WAAW,CAAC;EAC5D,MAAMM,WAAW,GAAG,MAAMD,mBAAmB,CAACJ,IAAI,CAAC,CAAC;EAEpD,IAAI,CAACK,WAAW,CAACG,IAAI,IAAI,CAACH,WAAW,CAACG,IAAI,CAACC,EAAE,EAAE;IAC7C,MAAM,IAAIE,KAAK,CAAC,+BAA+B,CAAC;EAClD;;EAEA;EACA,MAAMb,QAAQ,GAAG,MAAMF,SAAS,CAACqB,MAAM,CAAC,UAAUZ,WAAW,CAACG,IAAI,CAACC,EAAE,EAAE,CAAC;EACxE,OAAOX,QAAQ,CAACE,IAAI,CAAC,CAAC;AACxB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}