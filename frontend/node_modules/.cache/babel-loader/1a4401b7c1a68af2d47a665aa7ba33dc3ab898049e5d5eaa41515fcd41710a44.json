{"ast":null,"code":"// Subway Restaurant API Integration Service\n// This service provides multiple ways to get Subway's menu data\n\n// Base configuration\nconst SUBWAY_CONFIG = {\n  name: 'Subway',\n  location: 'Multiple locations across Kenya',\n  phone: '+254 20 777 9999',\n  website: 'https://www.subway.co.ke',\n  coordinates: {\n    lat: -1.2921,\n    lng: 36.8219\n  },\n  // Nairobi location\n  description: 'Eat Fresh! Serving made-to-order sandwiches, wraps, and salads with fresh ingredients and healthy options',\n  founded: 1965,\n  branches: 12,\n  specialties: ['Fresh Sandwiches', 'Wraps', 'Salads', 'Healthy Options', 'Customizable', 'Delivery']\n};\n\n// Option 1: Direct API endpoints (if Subway has them)\nconst SUBWAY_DIRECT_API = {\n  baseURL: 'https://api.subway.co.ke',\n  // Hypothetical API endpoint\n  endpoints: {\n    menu: '/api/v1/menu',\n    promotions: '/api/v1/promotions',\n    locations: '/api/v1/locations',\n    delivery: '/api/v1/delivery',\n    deals: '/api/v1/deals',\n    rewards: '/api/v1/rewards',\n    customization: '/api/v1/customization'\n  }\n};\n\n// Option 2: Jumia Food API integration\nconst JUMIA_FOOD_API = {\n  baseURL: 'https://food.jumia.co.ke/api',\n  endpoints: {\n    search: '/restaurants/search',\n    menu: '/restaurants/{id}/menu',\n    categories: '/categories'\n  },\n  headers: {\n    'Authorization': 'Bearer YOUR_JUMIA_API_KEY',\n    'Content-Type': 'application/json'\n  }\n};\n\n// Option 3: Glovo API integration\nconst GLOVO_API = {\n  baseURL: 'https://api.glovoapp.com',\n  endpoints: {\n    restaurants: '/v3/restaurants',\n    menu: '/v3/restaurants/{id}/menu',\n    categories: '/v3/categories'\n  },\n  headers: {\n    'Authorization': 'Bearer YOUR_GLOVO_API_KEY',\n    'Content-Type': 'application/json'\n  }\n};\n\n// Main API functions\nexport const subwayAPI = {\n  // Get full menu with real-time data\n  async getFullMenu() {\n    try {\n      // Try direct API first\n      const directMenu = await this.getDirectMenu();\n      if (directMenu) return directMenu;\n\n      // Try Jumia Food API\n      const jumiaMenu = await this.getJumiaMenu();\n      if (jumiaMenu) return jumiaMenu;\n\n      // Try Glovo API\n      const glovoMenu = await this.getGlovoMenu();\n      if (glovoMenu) return glovoMenu;\n\n      // Fallback to enhanced mock data\n      return this.getEnhancedMockMenu();\n    } catch (error) {\n      console.error('Error fetching Subway menu:', error);\n      return this.getEnhancedMockMenu();\n    }\n  },\n  // Try direct Subway API\n  async getDirectMenu() {\n    try {\n      const response = await fetch(`${SUBWAY_DIRECT_API.baseURL}${SUBWAY_DIRECT_API.endpoints.menu}`);\n      if (response.ok) {\n        const data = await response.json();\n        return this.transformDirectMenuData(data);\n      }\n    } catch (error) {\n      console.log('Direct API not available, trying alternatives...');\n    }\n    return null;\n  },\n  // Try Jumia Food API\n  async getJumiaMenu() {\n    try {\n      // Search for Subway on Jumia Food\n      const searchResponse = await fetch(`${JUMIA_FOOD_API.baseURL}${JUMIA_FOOD_API.endpoints.search}?q=subway`, {\n        headers: JUMIA_FOOD_API.headers\n      });\n      if (searchResponse.ok) {\n        const searchData = await searchResponse.json();\n        const subwayId = this.findSubwayId(searchData);\n        if (subwayId) {\n          const menuResponse = await fetch(`${JUMIA_FOOD_API.baseURL}${JUMIA_FOOD_API.endpoints.menu.replace('{id}', subwayId)}`, {\n            headers: JUMIA_FOOD_API.headers\n          });\n          if (menuResponse.ok) {\n            const menuData = await menuResponse.json();\n            return this.transformJumiaMenuData(menuData);\n          }\n        }\n      }\n    } catch (error) {\n      console.log('Jumia Food API not available, trying alternatives...');\n    }\n    return null;\n  },\n  // Try Glovo API\n  async getGlovoMenu() {\n    try {\n      // Search for Subway on Glovo\n      const searchResponse = await fetch(`${GLOVO_API.baseURL}${GLOVO_API.endpoints.restaurants}?search=subway`, {\n        headers: GLOVO_API.headers\n      });\n      if (searchResponse.ok) {\n        const searchData = await searchResponse.json();\n        const subwayId = this.findSubwayId(searchData);\n        if (subwayId) {\n          const menuResponse = await fetch(`${GLOVO_API.baseURL}${GLOVO_API.endpoints.menu.replace('{id}', subwayId)}`, {\n            headers: GLOVO_API.headers\n          });\n          if (menuResponse.ok) {\n            const menuData = await menuResponse.json();\n            return this.transformGlovoMenuData(menuData);\n          }\n        }\n      }\n    } catch (error) {\n      console.log('Glovo API not available, using fallback...');\n    }\n    return null;\n  },\n  // Enhanced mock menu with realistic Subway data\n  getEnhancedMockMenu() {\n    return {\n      restaurant: SUBWAY_CONFIG,\n      categories: {\n        'Classic Sandwiches': [{\n          id: 'cs-001',\n          name: 'BMT (Biggest, Meatiest, Tastiest)',\n          price: 'KES 450',\n          description: 'Salami, pepperoni, and ham with your choice of fresh vegetables and condiments',\n          category: 'Classic Sandwiches',\n          image: '/images/food/subway-bmt.jpg',\n          isPromo: true,\n          promoText: 'Popular',\n          calories: '380',\n          serves: '1 person',\n          allergens: ['Gluten', 'Pork', 'Beef'],\n          preparationTime: '5-8 min',\n          spiceLevel: 'Mild',\n          tags: ['Classic', 'Meat', 'Popular'],\n          vegetarian: false,\n          signature: true,\n          size: '6-inch',\n          bread: 'Italian'\n        }, {\n          id: 'cs-002',\n          name: 'Chicken Teriyaki',\n          price: 'KES 420',\n          description: 'Grilled chicken with teriyaki sauce, fresh vegetables, and your choice of condiments',\n          category: 'Classic Sandwiches',\n          image: '/images/food/subway-chicken-teriyaki.jpg',\n          isPromo: false,\n          calories: '320',\n          serves: '1 person',\n          allergens: ['Gluten', 'Chicken', 'Soy'],\n          preparationTime: '5-8 min',\n          spiceLevel: 'Mild',\n          tags: ['Classic', 'Chicken', 'Teriyaki'],\n          vegetarian: false,\n          signature: false,\n          size: '6-inch',\n          bread: 'Italian'\n        }, {\n          id: 'cs-003',\n          name: 'Veggie Delite',\n          price: 'KES 350',\n          description: 'Fresh lettuce, tomatoes, cucumbers, green peppers, and onions with your choice of condiments',\n          category: 'Classic Sandwiches',\n          image: '/images/food/subway-veggie-delite.jpg',\n          isPromo: false,\n          calories: '200',\n          serves: '1 person',\n          allergens: ['Gluten'],\n          preparationTime: '5-8 min',\n          spiceLevel: 'None',\n          tags: ['Classic', 'Vegetarian', 'Fresh'],\n          vegetarian: true,\n          signature: false,\n          size: '6-inch',\n          bread: 'Italian'\n        }],\n        'Premium Sandwiches': [{\n          id: 'ps-001',\n          name: 'Steak & Cheese',\n          price: 'KES 480',\n          description: 'Tender steak strips with melted cheese, fresh vegetables, and your choice of condiments',\n          category: 'Premium Sandwiches',\n          image: '/images/food/subway-steak-cheese.jpg',\n          isPromo: false,\n          calories: '420',\n          serves: '1 person',\n          allergens: ['Gluten', 'Beef', 'Dairy'],\n          preparationTime: '6-10 min',\n          spiceLevel: 'Mild',\n          tags: ['Premium', 'Steak', 'Cheese'],\n          vegetarian: false,\n          signature: false,\n          size: '6-inch',\n          bread: 'Italian'\n        }, {\n          id: 'ps-002',\n          name: 'Turkey Breast',\n          price: 'KES 400',\n          description: 'Sliced turkey breast with fresh vegetables and your choice of condiments',\n          category: 'Premium Sandwiches',\n          image: '/images/food/subway-turkey-breast.jpg',\n          isPromo: false,\n          calories: '280',\n          serves: '1 person',\n          allergens: ['Gluten', 'Turkey'],\n          preparationTime: '5-8 min',\n          spiceLevel: 'None',\n          tags: ['Premium', 'Turkey', 'Lean'],\n          vegetarian: false,\n          signature: false,\n          size: '6-inch',\n          bread: 'Italian'\n        }],\n        'Wraps': [{\n          id: 'wr-001',\n          name: 'Chicken Caesar Wrap',\n          price: 'KES 450',\n          description: 'Grilled chicken with Caesar dressing, lettuce, and parmesan cheese wrapped in a tortilla',\n          category: 'Wraps',\n          image: '/images/food/subway-chicken-caesar-wrap.jpg',\n          isPromo: false,\n          calories: '380',\n          serves: '1 person',\n          allergens: ['Gluten', 'Chicken', 'Dairy'],\n          preparationTime: '5-8 min',\n          spiceLevel: 'Mild',\n          tags: ['Wrap', 'Chicken', 'Caesar'],\n          vegetarian: false,\n          signature: false,\n          size: 'Regular',\n          bread: 'Tortilla'\n        }, {\n          id: 'wr-002',\n          name: 'Veggie Wrap',\n          price: 'KES 380',\n          description: 'Fresh vegetables with hummus and your choice of condiments wrapped in a tortilla',\n          category: 'Wraps',\n          image: '/images/food/subway-veggie-wrap.jpg',\n          isPromo: false,\n          calories: '250',\n          serves: '1 person',\n          allergens: ['Gluten', 'Chickpeas'],\n          preparationTime: '5-8 min',\n          spiceLevel: 'None',\n          tags: ['Wrap', 'Vegetarian', 'Hummus'],\n          vegetarian: true,\n          signature: false,\n          size: 'Regular',\n          bread: 'Tortilla'\n        }],\n        'Salads': [{\n          id: 'sl-001',\n          name: 'Chicken Caesar Salad',\n          price: 'KES 420',\n          description: 'Fresh lettuce with grilled chicken, Caesar dressing, and parmesan cheese',\n          category: 'Salads',\n          image: '/images/food/subway-chicken-caesar-salad.jpg',\n          isPromo: false,\n          calories: '280',\n          serves: '1 person',\n          allergens: ['Chicken', 'Dairy', 'Eggs'],\n          preparationTime: '5-8 min',\n          spiceLevel: 'None',\n          tags: ['Salad', 'Chicken', 'Caesar'],\n          vegetarian: false,\n          signature: false\n        }, {\n          id: 'sl-002',\n          name: 'Veggie Delite Salad',\n          price: 'KES 320',\n          description: 'Fresh lettuce, tomatoes, cucumbers, green peppers, and onions with your choice of dressing',\n          category: 'Salads',\n          image: '/images/food/subway-veggie-salad.jpg',\n          isPromo: false,\n          calories: '120',\n          serves: '1 person',\n          allergens: ['None'],\n          preparationTime: '5-8 min',\n          spiceLevel: 'None',\n          tags: ['Salad', 'Vegetarian', 'Fresh'],\n          vegetarian: true,\n          signature: false\n        }],\n        'Sides & Snacks': [{\n          id: 'ss-001',\n          name: 'Cookies (2 Pcs)',\n          price: 'KES 120',\n          description: 'Freshly baked chocolate chip cookies',\n          category: 'Sides & Snacks',\n          image: '/images/food/subway-cookies.jpg',\n          isPromo: false,\n          calories: '200',\n          serves: '1 person',\n          allergens: ['Gluten', 'Dairy', 'Chocolate'],\n          preparationTime: '1-2 min',\n          spiceLevel: 'None',\n          tags: ['Cookies', 'Sweet', 'Baked'],\n          vegetarian: true,\n          signature: false\n        }, {\n          id: 'ss-002',\n          name: 'Chips',\n          price: 'KES 80',\n          description: 'Assorted potato chips and snacks',\n          category: 'Sides & Snacks',\n          image: '/images/food/subway-chips.jpg',\n          isPromo: false,\n          calories: '150',\n          serves: '1 person',\n          allergens: ['Potatoes'],\n          preparationTime: '1 min',\n          spiceLevel: 'None',\n          tags: ['Chips', 'Snack', 'Crunchy'],\n          vegetarian: true,\n          signature: false\n        }],\n        'Beverages': [{\n          id: 'bv-001',\n          name: 'Coca Cola (Medium)',\n          price: 'KES 100',\n          description: 'Refreshing Coca Cola soft drink',\n          category: 'Beverages',\n          image: '/images/food/subway-coca-cola.jpg',\n          isPromo: false,\n          calories: '210',\n          serves: '1 person',\n          allergens: ['None'],\n          preparationTime: '1-2 min',\n          spiceLevel: 'None',\n          tags: ['Soft Drink', 'Refreshing', 'Classic'],\n          vegetarian: true,\n          signature: false\n        }, {\n          id: 'bv-002',\n          name: 'Sprite (Medium)',\n          price: 'KES 100',\n          description: 'Clear lemon-lime soft drink',\n          category: 'Beverages',\n          image: '/images/food/subway-sprite.jpg',\n          isPromo: false,\n          calories: '200',\n          serves: '1 person',\n          allergens: ['None'],\n          preparationTime: '1-2 min',\n          spiceLevel: 'None',\n          tags: ['Soft Drink', 'Lemon-Lime', 'Clear'],\n          vegetarian: true,\n          signature: false\n        }, {\n          id: 'bv-003',\n          name: 'Water (500ml)',\n          price: 'KES 60',\n          description: 'Pure bottled water',\n          category: 'Beverages',\n          image: '/images/food/subway-water.jpg',\n          isPromo: false,\n          calories: '0',\n          serves: '1 person',\n          allergens: ['None'],\n          preparationTime: '1 min',\n          spiceLevel: 'None',\n          tags: ['Water', 'Pure', 'Hydrating'],\n          vegetarian: true,\n          signature: false\n        }]\n      },\n      promotions: [{\n        id: 'promo-001',\n        title: 'Footlong Deal',\n        description: 'Get any footlong sandwich for only KES 600 (Save up to KES 200)',\n        discount: 'Save up to KES 200',\n        validUntil: '2024-12-31',\n        code: 'FOOTLONGDEAL',\n        timing: 'Available Daily'\n      }, {\n        id: 'promo-002',\n        title: 'Combo Special',\n        description: '6-inch sandwich + chips + drink for only KES 500',\n        discount: 'Save KES 100',\n        validUntil: '2024-12-31',\n        code: 'COMBOSPECIAL',\n        timing: 'Available Daily'\n      }, {\n        id: 'promo-003',\n        title: 'Healthy Choice',\n        description: 'Salad + drink for only KES 350 (Available all day)',\n        discount: 'Save KES 70',\n        validUntil: '2024-12-31',\n        code: 'HEALTHYCHOICE',\n        timing: 'Available All Day'\n      }],\n      deliveryInfo: {\n        available: true,\n        services: ['Jumia Food', 'Glovo', 'Uber Eats', 'Own Delivery'],\n        deliveryTime: '20-35 minutes',\n        deliveryFee: 'KES 120',\n        minimumOrder: 'KES 600',\n        freeDeliveryThreshold: 'KES 1,500'\n      },\n      locations: ['Westlands', 'CBD', 'Kilimani', 'Lavington', 'Karen', 'Mombasa Road', 'Thika Road', 'Nakuru', 'Mombasa', 'Kisumu'],\n      deals: ['Footlong Deal', 'Combo Special', 'Healthy Choice', 'Student Discount', 'Lunch Special'],\n      rewards: {\n        available: true,\n        program: 'Subway Rewards',\n        benefits: ['Points on every order', 'Free sandwich on birthday', 'Exclusive member deals', 'Early access to promotions']\n      },\n      customization: {\n        available: true,\n        options: {\n          breads: ['Italian', 'Wheat', 'Honey Oat', 'Flatbread', 'Wrap'],\n          sizes: ['6-inch', 'Footlong'],\n          meats: ['Chicken', 'Turkey', 'Ham', 'Salami', 'Pepperoni', 'Steak', 'Tuna'],\n          vegetables: ['Lettuce', 'Tomatoes', 'Cucumbers', 'Green Peppers', 'Onions', 'Olives', 'Jalapeños'],\n          condiments: ['Mayo', 'Mustard', 'Ketchup', 'BBQ', 'Ranch', 'Sweet Onion', 'Vinegar', 'Oil']\n        }\n      }\n    };\n  },\n  // Helper functions\n  findSubwayId(searchData) {\n    var _searchData$restauran;\n    // Logic to find Subway's ID in search results\n    const subway = (_searchData$restauran = searchData.restaurants) === null || _searchData$restauran === void 0 ? void 0 : _searchData$restauran.find(r => r.name.toLowerCase().includes('subway'));\n    return subway === null || subway === void 0 ? void 0 : subway.id;\n  },\n  transformDirectMenuData(data) {\n    // Transform direct API data to our format\n    return {\n      restaurant: SUBWAY_CONFIG,\n      categories: data.categories || {},\n      promotions: data.promotions || [],\n      deliveryInfo: data.delivery || {},\n      locations: data.locations || [],\n      deals: data.deals || [],\n      rewards: data.rewards || {},\n      customization: data.customization || {}\n    };\n  },\n  transformJumiaMenuData(data) {\n    // Transform Jumia Food data to our format\n    return {\n      restaurant: SUBWAY_CONFIG,\n      categories: this.groupByCategory(data.menu || []),\n      promotions: data.promotions || [],\n      deliveryInfo: {\n        available: true,\n        services: ['Jumia Food'],\n        deliveryTime: data.deliveryTime || '20-35 minutes',\n        deliveryFee: data.deliveryFee || 'KES 120',\n        minimumOrder: data.minimumOrder || 'KES 600'\n      },\n      locations: data.locations || [],\n      deals: data.deals || [],\n      rewards: data.rewards || {},\n      customization: data.customization || {}\n    };\n  },\n  transformGlovoMenuData(data) {\n    // Transform Glovo data to our format\n    return {\n      restaurant: SUBWAY_CONFIG,\n      categories: this.groupByCategory(data.menu || []),\n      promotions: data.promotions || [],\n      deliveryInfo: {\n        available: true,\n        services: ['Glovo'],\n        deliveryTime: data.deliveryTime || '20-35 minutes',\n        deliveryFee: data.deliveryFee || 'KES 120',\n        minimumOrder: data.minimumOrder || 'KES 600'\n      },\n      locations: data.locations || [],\n      deals: data.deals || [],\n      rewards: data.rewards || {},\n      customization: data.customization || {}\n    };\n  },\n  groupByCategory(menuItems) {\n    // Group menu items by category\n    const categories = {};\n    menuItems.forEach(item => {\n      if (!categories[item.category]) {\n        categories[item.category] = [];\n      }\n      categories[item.category].push(item);\n    });\n    return categories;\n  },\n  // Get restaurant information\n  getRestaurantInfo() {\n    return SUBWAY_CONFIG;\n  },\n  // Get current promotions\n  async getPromotions() {\n    try {\n      const response = await fetch(`${SUBWAY_DIRECT_API.baseURL}${SUBWAY_DIRECT_API.endpoints.promotions}`);\n      if (response.ok) {\n        return await response.json();\n      }\n    } catch (error) {\n      console.log('Using mock promotions');\n    }\n    return this.getEnhancedMockMenu().promotions;\n  },\n  // Check delivery availability\n  async checkDeliveryAvailability() {\n    try {\n      const response = await fetch(`${SUBWAY_DIRECT_API.baseURL}${SUBWAY_DIRECT_API.endpoints.delivery}`);\n      if (response.ok) {\n        return await response.json();\n      }\n    } catch (error) {\n      console.log('Using mock delivery info');\n    }\n    return this.getEnhancedMockMenu().deliveryInfo;\n  },\n  // Get deals\n  async getDeals() {\n    try {\n      const response = await fetch(`${SUBWAY_DIRECT_API.baseURL}${SUBWAY_DIRECT_API.endpoints.deals}`);\n      if (response.ok) {\n        return await response.json();\n      }\n    } catch (error) {\n      console.log('Using mock deals');\n    }\n    return this.getEnhancedMockMenu().deals;\n  },\n  // Get rewards info\n  async getRewards() {\n    try {\n      const response = await fetch(`${SUBWAY_DIRECT_API.baseURL}${SUBWAY_DIRECT_API.endpoints.rewards}`);\n      if (response.ok) {\n        return await response.json();\n      }\n    } catch (error) {\n      console.log('Using mock rewards info');\n    }\n    return this.getEnhancedMockMenu().rewards;\n  },\n  // Get customization options\n  async getCustomization() {\n    try {\n      const response = await fetch(`${SUBWAY_DIRECT_API.baseURL}${SUBWAY_DIRECT_API.endpoints.customization}`);\n      if (response.ok) {\n        return await response.json();\n      }\n    } catch (error) {\n      console.log('Using mock customization info');\n    }\n    return this.getEnhancedMockMenu().customization;\n  },\n  // Get all locations\n  async getLocations() {\n    try {\n      const response = await fetch(`${SUBWAY_DIRECT_API.baseURL}${SUBWAY_DIRECT_API.endpoints.locations}`);\n      if (response.ok) {\n        return await response.json();\n      }\n    } catch (error) {\n      console.log('Using mock locations');\n    }\n    return this.getEnhancedMockMenu().locations;\n  }\n};\nexport default subwayAPI;","map":{"version":3,"names":["SUBWAY_CONFIG","name","location","phone","website","coordinates","lat","lng","description","founded","branches","specialties","SUBWAY_DIRECT_API","baseURL","endpoints","menu","promotions","locations","delivery","deals","rewards","customization","JUMIA_FOOD_API","search","categories","headers","GLOVO_API","restaurants","subwayAPI","getFullMenu","directMenu","getDirectMenu","jumiaMenu","getJumiaMenu","glovoMenu","getGlovoMenu","getEnhancedMockMenu","error","console","response","fetch","ok","data","json","transformDirectMenuData","log","searchResponse","searchData","subwayId","findSubwayId","menuResponse","replace","menuData","transformJumiaMenuData","transformGlovoMenuData","restaurant","id","price","category","image","isPromo","promoText","calories","serves","allergens","preparationTime","spiceLevel","tags","vegetarian","signature","size","bread","title","discount","validUntil","code","timing","deliveryInfo","available","services","deliveryTime","deliveryFee","minimumOrder","freeDeliveryThreshold","program","benefits","options","breads","sizes","meats","vegetables","condiments","_searchData$restauran","subway","find","r","toLowerCase","includes","groupByCategory","menuItems","forEach","item","push","getRestaurantInfo","getPromotions","checkDeliveryAvailability","getDeals","getRewards","getCustomization","getLocations"],"sources":["C:/Projects/gawa/frontend/src/api/subwayAPI.js"],"sourcesContent":["// Subway Restaurant API Integration Service\r\n// This service provides multiple ways to get Subway's menu data\r\n\r\n// Base configuration\r\nconst SUBWAY_CONFIG = {\r\n  name: 'Subway',\r\n  location: 'Multiple locations across Kenya',\r\n  phone: '+254 20 777 9999',\r\n  website: 'https://www.subway.co.ke',\r\n  coordinates: { lat: -1.2921, lng: 36.8219 }, // Nairobi location\r\n  description: 'Eat Fresh! Serving made-to-order sandwiches, wraps, and salads with fresh ingredients and healthy options',\r\n  founded: 1965,\r\n  branches: 12,\r\n  specialties: ['Fresh Sandwiches', 'Wraps', 'Salads', 'Healthy Options', 'Customizable', 'Delivery']\r\n};\r\n\r\n// Option 1: Direct API endpoints (if Subway has them)\r\nconst SUBWAY_DIRECT_API = {\r\n  baseURL: 'https://api.subway.co.ke', // Hypothetical API endpoint\r\n  endpoints: {\r\n    menu: '/api/v1/menu',\r\n    promotions: '/api/v1/promotions',\r\n    locations: '/api/v1/locations',\r\n    delivery: '/api/v1/delivery',\r\n    deals: '/api/v1/deals',\r\n    rewards: '/api/v1/rewards',\r\n    customization: '/api/v1/customization'\r\n  }\r\n};\r\n\r\n// Option 2: Jumia Food API integration\r\nconst JUMIA_FOOD_API = {\r\n  baseURL: 'https://food.jumia.co.ke/api',\r\n  endpoints: {\r\n    search: '/restaurants/search',\r\n    menu: '/restaurants/{id}/menu',\r\n    categories: '/categories'\r\n  },\r\n  headers: {\r\n    'Authorization': 'Bearer YOUR_JUMIA_API_KEY',\r\n    'Content-Type': 'application/json'\r\n  }\r\n};\r\n\r\n// Option 3: Glovo API integration\r\nconst GLOVO_API = {\r\n  baseURL: 'https://api.glovoapp.com',\r\n  endpoints: {\r\n    restaurants: '/v3/restaurants',\r\n    menu: '/v3/restaurants/{id}/menu',\r\n    categories: '/v3/categories'\r\n  },\r\n  headers: {\r\n    'Authorization': 'Bearer YOUR_GLOVO_API_KEY',\r\n    'Content-Type': 'application/json'\r\n  }\r\n};\r\n\r\n// Main API functions\r\nexport const subwayAPI = {\r\n  // Get full menu with real-time data\r\n  async getFullMenu() {\r\n    try {\r\n      // Try direct API first\r\n      const directMenu = await this.getDirectMenu();\r\n      if (directMenu) return directMenu;\r\n\r\n      // Try Jumia Food API\r\n      const jumiaMenu = await this.getJumiaMenu();\r\n      if (jumiaMenu) return jumiaMenu;\r\n\r\n      // Try Glovo API\r\n      const glovoMenu = await this.getGlovoMenu();\r\n      if (glovoMenu) return glovoMenu;\r\n\r\n      // Fallback to enhanced mock data\r\n      return this.getEnhancedMockMenu();\r\n    } catch (error) {\r\n      console.error('Error fetching Subway menu:', error);\r\n      return this.getEnhancedMockMenu();\r\n    }\r\n  },\r\n\r\n  // Try direct Subway API\r\n  async getDirectMenu() {\r\n    try {\r\n      const response = await fetch(`${SUBWAY_DIRECT_API.baseURL}${SUBWAY_DIRECT_API.endpoints.menu}`);\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        return this.transformDirectMenuData(data);\r\n      }\r\n    } catch (error) {\r\n      console.log('Direct API not available, trying alternatives...');\r\n    }\r\n    return null;\r\n  },\r\n\r\n  // Try Jumia Food API\r\n  async getJumiaMenu() {\r\n    try {\r\n      // Search for Subway on Jumia Food\r\n      const searchResponse = await fetch(`${JUMIA_FOOD_API.baseURL}${JUMIA_FOOD_API.endpoints.search}?q=subway`, {\r\n        headers: JUMIA_FOOD_API.headers\r\n      });\r\n      \r\n      if (searchResponse.ok) {\r\n        const searchData = await searchResponse.json();\r\n        const subwayId = this.findSubwayId(searchData);\r\n        \r\n        if (subwayId) {\r\n          const menuResponse = await fetch(`${JUMIA_FOOD_API.baseURL}${JUMIA_FOOD_API.endpoints.menu.replace('{id}', subwayId)}`, {\r\n            headers: JUMIA_FOOD_API.headers\r\n          });\r\n          \r\n          if (menuResponse.ok) {\r\n            const menuData = await menuResponse.json();\r\n            return this.transformJumiaMenuData(menuData);\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log('Jumia Food API not available, trying alternatives...');\r\n    }\r\n    return null;\r\n  },\r\n\r\n  // Try Glovo API\r\n  async getGlovoMenu() {\r\n    try {\r\n      // Search for Subway on Glovo\r\n      const searchResponse = await fetch(`${GLOVO_API.baseURL}${GLOVO_API.endpoints.restaurants}?search=subway`, {\r\n        headers: GLOVO_API.headers\r\n      });\r\n      \r\n      if (searchResponse.ok) {\r\n        const searchData = await searchResponse.json();\r\n        const subwayId = this.findSubwayId(searchData);\r\n        \r\n        if (subwayId) {\r\n          const menuResponse = await fetch(`${GLOVO_API.baseURL}${GLOVO_API.endpoints.menu.replace('{id}', subwayId)}`, {\r\n            headers: GLOVO_API.headers\r\n          });\r\n          \r\n          if (menuResponse.ok) {\r\n            const menuData = await menuResponse.json();\r\n            return this.transformGlovoMenuData(menuData);\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log('Glovo API not available, using fallback...');\r\n    }\r\n    return null;\r\n  },\r\n\r\n  // Enhanced mock menu with realistic Subway data\r\n  getEnhancedMockMenu() {\r\n    return {\r\n      restaurant: SUBWAY_CONFIG,\r\n      categories: {\r\n        'Classic Sandwiches': [\r\n          {\r\n            id: 'cs-001',\r\n            name: 'BMT (Biggest, Meatiest, Tastiest)',\r\n            price: 'KES 450',\r\n            description: 'Salami, pepperoni, and ham with your choice of fresh vegetables and condiments',\r\n            category: 'Classic Sandwiches',\r\n            image: '/images/food/subway-bmt.jpg',\r\n            isPromo: true,\r\n            promoText: 'Popular',\r\n            calories: '380',\r\n            serves: '1 person',\r\n            allergens: ['Gluten', 'Pork', 'Beef'],\r\n            preparationTime: '5-8 min',\r\n            spiceLevel: 'Mild',\r\n            tags: ['Classic', 'Meat', 'Popular'],\r\n            vegetarian: false,\r\n            signature: true,\r\n            size: '6-inch',\r\n            bread: 'Italian'\r\n          },\r\n          {\r\n            id: 'cs-002',\r\n            name: 'Chicken Teriyaki',\r\n            price: 'KES 420',\r\n            description: 'Grilled chicken with teriyaki sauce, fresh vegetables, and your choice of condiments',\r\n            category: 'Classic Sandwiches',\r\n            image: '/images/food/subway-chicken-teriyaki.jpg',\r\n            isPromo: false,\r\n            calories: '320',\r\n            serves: '1 person',\r\n            allergens: ['Gluten', 'Chicken', 'Soy'],\r\n            preparationTime: '5-8 min',\r\n            spiceLevel: 'Mild',\r\n            tags: ['Classic', 'Chicken', 'Teriyaki'],\r\n            vegetarian: false,\r\n            signature: false,\r\n            size: '6-inch',\r\n            bread: 'Italian'\r\n          },\r\n          {\r\n            id: 'cs-003',\r\n            name: 'Veggie Delite',\r\n            price: 'KES 350',\r\n            description: 'Fresh lettuce, tomatoes, cucumbers, green peppers, and onions with your choice of condiments',\r\n            category: 'Classic Sandwiches',\r\n            image: '/images/food/subway-veggie-delite.jpg',\r\n            isPromo: false,\r\n            calories: '200',\r\n            serves: '1 person',\r\n            allergens: ['Gluten'],\r\n            preparationTime: '5-8 min',\r\n            spiceLevel: 'None',\r\n            tags: ['Classic', 'Vegetarian', 'Fresh'],\r\n            vegetarian: true,\r\n            signature: false,\r\n            size: '6-inch',\r\n            bread: 'Italian'\r\n          }\r\n        ],\r\n        'Premium Sandwiches': [\r\n          {\r\n            id: 'ps-001',\r\n            name: 'Steak & Cheese',\r\n            price: 'KES 480',\r\n            description: 'Tender steak strips with melted cheese, fresh vegetables, and your choice of condiments',\r\n            category: 'Premium Sandwiches',\r\n            image: '/images/food/subway-steak-cheese.jpg',\r\n            isPromo: false,\r\n            calories: '420',\r\n            serves: '1 person',\r\n            allergens: ['Gluten', 'Beef', 'Dairy'],\r\n            preparationTime: '6-10 min',\r\n            spiceLevel: 'Mild',\r\n            tags: ['Premium', 'Steak', 'Cheese'],\r\n            vegetarian: false,\r\n            signature: false,\r\n            size: '6-inch',\r\n            bread: 'Italian'\r\n          },\r\n          {\r\n            id: 'ps-002',\r\n            name: 'Turkey Breast',\r\n            price: 'KES 400',\r\n            description: 'Sliced turkey breast with fresh vegetables and your choice of condiments',\r\n            category: 'Premium Sandwiches',\r\n            image: '/images/food/subway-turkey-breast.jpg',\r\n            isPromo: false,\r\n            calories: '280',\r\n            serves: '1 person',\r\n            allergens: ['Gluten', 'Turkey'],\r\n            preparationTime: '5-8 min',\r\n            spiceLevel: 'None',\r\n            tags: ['Premium', 'Turkey', 'Lean'],\r\n            vegetarian: false,\r\n            signature: false,\r\n            size: '6-inch',\r\n            bread: 'Italian'\r\n          }\r\n        ],\r\n        'Wraps': [\r\n          {\r\n            id: 'wr-001',\r\n            name: 'Chicken Caesar Wrap',\r\n            price: 'KES 450',\r\n            description: 'Grilled chicken with Caesar dressing, lettuce, and parmesan cheese wrapped in a tortilla',\r\n            category: 'Wraps',\r\n            image: '/images/food/subway-chicken-caesar-wrap.jpg',\r\n            isPromo: false,\r\n            calories: '380',\r\n            serves: '1 person',\r\n            allergens: ['Gluten', 'Chicken', 'Dairy'],\r\n            preparationTime: '5-8 min',\r\n            spiceLevel: 'Mild',\r\n            tags: ['Wrap', 'Chicken', 'Caesar'],\r\n            vegetarian: false,\r\n            signature: false,\r\n            size: 'Regular',\r\n            bread: 'Tortilla'\r\n          },\r\n          {\r\n            id: 'wr-002',\r\n            name: 'Veggie Wrap',\r\n            price: 'KES 380',\r\n            description: 'Fresh vegetables with hummus and your choice of condiments wrapped in a tortilla',\r\n            category: 'Wraps',\r\n            image: '/images/food/subway-veggie-wrap.jpg',\r\n            isPromo: false,\r\n            calories: '250',\r\n            serves: '1 person',\r\n            allergens: ['Gluten', 'Chickpeas'],\r\n            preparationTime: '5-8 min',\r\n            spiceLevel: 'None',\r\n            tags: ['Wrap', 'Vegetarian', 'Hummus'],\r\n            vegetarian: true,\r\n            signature: false,\r\n            size: 'Regular',\r\n            bread: 'Tortilla'\r\n          }\r\n        ],\r\n        'Salads': [\r\n          {\r\n            id: 'sl-001',\r\n            name: 'Chicken Caesar Salad',\r\n            price: 'KES 420',\r\n            description: 'Fresh lettuce with grilled chicken, Caesar dressing, and parmesan cheese',\r\n            category: 'Salads',\r\n            image: '/images/food/subway-chicken-caesar-salad.jpg',\r\n            isPromo: false,\r\n            calories: '280',\r\n            serves: '1 person',\r\n            allergens: ['Chicken', 'Dairy', 'Eggs'],\r\n            preparationTime: '5-8 min',\r\n            spiceLevel: 'None',\r\n            tags: ['Salad', 'Chicken', 'Caesar'],\r\n            vegetarian: false,\r\n            signature: false\r\n          },\r\n          {\r\n            id: 'sl-002',\r\n            name: 'Veggie Delite Salad',\r\n            price: 'KES 320',\r\n            description: 'Fresh lettuce, tomatoes, cucumbers, green peppers, and onions with your choice of dressing',\r\n            category: 'Salads',\r\n            image: '/images/food/subway-veggie-salad.jpg',\r\n            isPromo: false,\r\n            calories: '120',\r\n            serves: '1 person',\r\n            allergens: ['None'],\r\n            preparationTime: '5-8 min',\r\n            spiceLevel: 'None',\r\n            tags: ['Salad', 'Vegetarian', 'Fresh'],\r\n            vegetarian: true,\r\n            signature: false\r\n          }\r\n        ],\r\n        'Sides & Snacks': [\r\n          {\r\n            id: 'ss-001',\r\n            name: 'Cookies (2 Pcs)',\r\n            price: 'KES 120',\r\n            description: 'Freshly baked chocolate chip cookies',\r\n            category: 'Sides & Snacks',\r\n            image: '/images/food/subway-cookies.jpg',\r\n            isPromo: false,\r\n            calories: '200',\r\n            serves: '1 person',\r\n            allergens: ['Gluten', 'Dairy', 'Chocolate'],\r\n            preparationTime: '1-2 min',\r\n            spiceLevel: 'None',\r\n            tags: ['Cookies', 'Sweet', 'Baked'],\r\n            vegetarian: true,\r\n            signature: false\r\n          },\r\n          {\r\n            id: 'ss-002',\r\n            name: 'Chips',\r\n            price: 'KES 80',\r\n            description: 'Assorted potato chips and snacks',\r\n            category: 'Sides & Snacks',\r\n            image: '/images/food/subway-chips.jpg',\r\n            isPromo: false,\r\n            calories: '150',\r\n            serves: '1 person',\r\n            allergens: ['Potatoes'],\r\n            preparationTime: '1 min',\r\n            spiceLevel: 'None',\r\n            tags: ['Chips', 'Snack', 'Crunchy'],\r\n            vegetarian: true,\r\n            signature: false\r\n          }\r\n        ],\r\n        'Beverages': [\r\n          {\r\n            id: 'bv-001',\r\n            name: 'Coca Cola (Medium)',\r\n            price: 'KES 100',\r\n            description: 'Refreshing Coca Cola soft drink',\r\n            category: 'Beverages',\r\n            image: '/images/food/subway-coca-cola.jpg',\r\n            isPromo: false,\r\n            calories: '210',\r\n            serves: '1 person',\r\n            allergens: ['None'],\r\n            preparationTime: '1-2 min',\r\n            spiceLevel: 'None',\r\n            tags: ['Soft Drink', 'Refreshing', 'Classic'],\r\n            vegetarian: true,\r\n            signature: false\r\n          },\r\n          {\r\n            id: 'bv-002',\r\n            name: 'Sprite (Medium)',\r\n            price: 'KES 100',\r\n            description: 'Clear lemon-lime soft drink',\r\n            category: 'Beverages',\r\n            image: '/images/food/subway-sprite.jpg',\r\n            isPromo: false,\r\n            calories: '200',\r\n            serves: '1 person',\r\n            allergens: ['None'],\r\n            preparationTime: '1-2 min',\r\n            spiceLevel: 'None',\r\n            tags: ['Soft Drink', 'Lemon-Lime', 'Clear'],\r\n            vegetarian: true,\r\n            signature: false\r\n          },\r\n          {\r\n            id: 'bv-003',\r\n            name: 'Water (500ml)',\r\n            price: 'KES 60',\r\n            description: 'Pure bottled water',\r\n            category: 'Beverages',\r\n            image: '/images/food/subway-water.jpg',\r\n            isPromo: false,\r\n            calories: '0',\r\n            serves: '1 person',\r\n            allergens: ['None'],\r\n            preparationTime: '1 min',\r\n            spiceLevel: 'None',\r\n            tags: ['Water', 'Pure', 'Hydrating'],\r\n            vegetarian: true,\r\n            signature: false\r\n          }\r\n        ]\r\n      },\r\n      promotions: [\r\n        {\r\n          id: 'promo-001',\r\n          title: 'Footlong Deal',\r\n          description: 'Get any footlong sandwich for only KES 600 (Save up to KES 200)',\r\n          discount: 'Save up to KES 200',\r\n          validUntil: '2024-12-31',\r\n          code: 'FOOTLONGDEAL',\r\n          timing: 'Available Daily'\r\n        },\r\n        {\r\n          id: 'promo-002',\r\n          title: 'Combo Special',\r\n          description: '6-inch sandwich + chips + drink for only KES 500',\r\n          discount: 'Save KES 100',\r\n          validUntil: '2024-12-31',\r\n          code: 'COMBOSPECIAL',\r\n          timing: 'Available Daily'\r\n        },\r\n        {\r\n          id: 'promo-003',\r\n          title: 'Healthy Choice',\r\n          description: 'Salad + drink for only KES 350 (Available all day)',\r\n          discount: 'Save KES 70',\r\n          validUntil: '2024-12-31',\r\n          code: 'HEALTHYCHOICE',\r\n          timing: 'Available All Day'\r\n        }\r\n      ],\r\n      deliveryInfo: {\r\n        available: true,\r\n        services: ['Jumia Food', 'Glovo', 'Uber Eats', 'Own Delivery'],\r\n        deliveryTime: '20-35 minutes',\r\n        deliveryFee: 'KES 120',\r\n        minimumOrder: 'KES 600',\r\n        freeDeliveryThreshold: 'KES 1,500'\r\n      },\r\n      locations: [\r\n        'Westlands',\r\n        'CBD',\r\n        'Kilimani',\r\n        'Lavington',\r\n        'Karen',\r\n        'Mombasa Road',\r\n        'Thika Road',\r\n        'Nakuru',\r\n        'Mombasa',\r\n        'Kisumu'\r\n      ],\r\n      deals: [\r\n        'Footlong Deal',\r\n        'Combo Special',\r\n        'Healthy Choice',\r\n        'Student Discount',\r\n        'Lunch Special'\r\n      ],\r\n      rewards: {\r\n        available: true,\r\n        program: 'Subway Rewards',\r\n        benefits: ['Points on every order', 'Free sandwich on birthday', 'Exclusive member deals', 'Early access to promotions']\r\n      },\r\n      customization: {\r\n        available: true,\r\n        options: {\r\n          breads: ['Italian', 'Wheat', 'Honey Oat', 'Flatbread', 'Wrap'],\r\n          sizes: ['6-inch', 'Footlong'],\r\n          meats: ['Chicken', 'Turkey', 'Ham', 'Salami', 'Pepperoni', 'Steak', 'Tuna'],\r\n          vegetables: ['Lettuce', 'Tomatoes', 'Cucumbers', 'Green Peppers', 'Onions', 'Olives', 'Jalapeños'],\r\n          condiments: ['Mayo', 'Mustard', 'Ketchup', 'BBQ', 'Ranch', 'Sweet Onion', 'Vinegar', 'Oil']\r\n        }\r\n      }\r\n    };\r\n  },\r\n\r\n  // Helper functions\r\n  findSubwayId(searchData) {\r\n    // Logic to find Subway's ID in search results\r\n    const subway = searchData.restaurants?.find(r => \r\n      r.name.toLowerCase().includes('subway')\r\n    );\r\n    return subway?.id;\r\n  },\r\n\r\n  transformDirectMenuData(data) {\r\n    // Transform direct API data to our format\r\n    return {\r\n      restaurant: SUBWAY_CONFIG,\r\n      categories: data.categories || {},\r\n      promotions: data.promotions || [],\r\n      deliveryInfo: data.delivery || {},\r\n      locations: data.locations || [],\r\n      deals: data.deals || [],\r\n      rewards: data.rewards || {},\r\n      customization: data.customization || {}\r\n    };\r\n  },\r\n\r\n  transformJumiaMenuData(data) {\r\n    // Transform Jumia Food data to our format\r\n    return {\r\n      restaurant: SUBWAY_CONFIG,\r\n      categories: this.groupByCategory(data.menu || []),\r\n      promotions: data.promotions || [],\r\n      deliveryInfo: {\r\n        available: true,\r\n        services: ['Jumia Food'],\r\n        deliveryTime: data.deliveryTime || '20-35 minutes',\r\n        deliveryFee: data.deliveryFee || 'KES 120',\r\n        minimumOrder: data.minimumOrder || 'KES 600'\r\n      },\r\n      locations: data.locations || [],\r\n      deals: data.deals || [],\r\n      rewards: data.rewards || {},\r\n      customization: data.customization || {}\r\n    };\r\n  },\r\n\r\n  transformGlovoMenuData(data) {\r\n    // Transform Glovo data to our format\r\n    return {\r\n      restaurant: SUBWAY_CONFIG,\r\n      categories: this.groupByCategory(data.menu || []),\r\n      promotions: data.promotions || [],\r\n      deliveryInfo: {\r\n        available: true,\r\n        services: ['Glovo'],\r\n        deliveryTime: data.deliveryTime || '20-35 minutes',\r\n        deliveryFee: data.deliveryFee || 'KES 120',\r\n        minimumOrder: data.minimumOrder || 'KES 600'\r\n      },\r\n      locations: data.locations || [],\r\n      deals: data.deals || [],\r\n      rewards: data.rewards || {},\r\n      customization: data.customization || {}\r\n    };\r\n  },\r\n\r\n  groupByCategory(menuItems) {\r\n    // Group menu items by category\r\n    const categories = {};\r\n    menuItems.forEach(item => {\r\n      if (!categories[item.category]) {\r\n        categories[item.category] = [];\r\n      }\r\n      categories[item.category].push(item);\r\n    });\r\n    return categories;\r\n  },\r\n\r\n  // Get restaurant information\r\n  getRestaurantInfo() {\r\n    return SUBWAY_CONFIG;\r\n  },\r\n\r\n  // Get current promotions\r\n  async getPromotions() {\r\n    try {\r\n      const response = await fetch(`${SUBWAY_DIRECT_API.baseURL}${SUBWAY_DIRECT_API.endpoints.promotions}`);\r\n      if (response.ok) {\r\n        return await response.json();\r\n      }\r\n    } catch (error) {\r\n      console.log('Using mock promotions');\r\n    }\r\n    \r\n    return this.getEnhancedMockMenu().promotions;\r\n  },\r\n\r\n  // Check delivery availability\r\n  async checkDeliveryAvailability() {\r\n    try {\r\n      const response = await fetch(`${SUBWAY_DIRECT_API.baseURL}${SUBWAY_DIRECT_API.endpoints.delivery}`);\r\n      if (response.ok) {\r\n        return await response.json();\r\n      }\r\n    } catch (error) {\r\n      console.log('Using mock delivery info');\r\n    }\r\n    \r\n    return this.getEnhancedMockMenu().deliveryInfo;\r\n  },\r\n\r\n  // Get deals\r\n  async getDeals() {\r\n    try {\r\n      const response = await fetch(`${SUBWAY_DIRECT_API.baseURL}${SUBWAY_DIRECT_API.endpoints.deals}`);\r\n      if (response.ok) {\r\n        return await response.json();\r\n      }\r\n    } catch (error) {\r\n      console.log('Using mock deals');\r\n    }\r\n    \r\n    return this.getEnhancedMockMenu().deals;\r\n  },\r\n\r\n  // Get rewards info\r\n  async getRewards() {\r\n    try {\r\n      const response = await fetch(`${SUBWAY_DIRECT_API.baseURL}${SUBWAY_DIRECT_API.endpoints.rewards}`);\r\n      if (response.ok) {\r\n        return await response.json();\r\n      }\r\n    } catch (error) {\r\n      console.log('Using mock rewards info');\r\n    }\r\n    \r\n    return this.getEnhancedMockMenu().rewards;\r\n  },\r\n\r\n  // Get customization options\r\n  async getCustomization() {\r\n    try {\r\n      const response = await fetch(`${SUBWAY_DIRECT_API.baseURL}${SUBWAY_DIRECT_API.endpoints.customization}`);\r\n      if (response.ok) {\r\n        return await response.json();\r\n      }\r\n    } catch (error) {\r\n      console.log('Using mock customization info');\r\n    }\r\n    \r\n    return this.getEnhancedMockMenu().customization;\r\n  },\r\n\r\n  // Get all locations\r\n  async getLocations() {\r\n    try {\r\n      const response = await fetch(`${SUBWAY_DIRECT_API.baseURL}${SUBWAY_DIRECT_API.endpoints.locations}`);\r\n      if (response.ok) {\r\n        return await response.json();\r\n      }\r\n    } catch (error) {\r\n      console.log('Using mock locations');\r\n    }\r\n    \r\n    return this.getEnhancedMockMenu().locations;\r\n  }\r\n};\r\n\r\nexport default subwayAPI;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}